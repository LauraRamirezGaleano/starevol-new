####################
### initializations
####################

initevolsm    
  echo
  echo                    ______________________________________
  echo                    |    Welcome to the macro package    |
  echo                    |     to view and plot graphs of     |
  echo                    |    the structure and evolution     |
  echo                    |      of stars with STAREVOL        |
  echo                    |         (and Super Mongo)          |
  echo                    |       Lionel Siess - 04/2006       |
  echo                    |           version 2.90             |
  echo                    --------------------------------------
  echo
  ptype 4 0
  #verbose 0
  #location 4500 31500 3500 31000
  location 3500	31000 3500 31000
  notation -5 5 -5 5
  set ptype_name = < '4 3 expand 1.8' '9 0 expand 2' '3 0 expand 1.5' '4 0 expand 1.5' '5 3 expand 1.5' '9 0 expand 1.5' '3 3 expand 1.5' >
  set main_elem = < H1 He4 C12 O16 Ne20 Na23 Si28 Mg24 >
  set color_name = < black red green4 blue cyan magenta orange3 lightblue merlot pink2a brown2 green  olive lightblue3 red3>
  set line_name = < 'expand 1 ltype 0' 'expand 2 ltype 1' 'expand 1 ltype 2' 'expand 1 ltype 3' 'expand 1 ltype 4' 'expand 1 ltype 5' 'expand 1 ltype 6'>
  set line_name = line_name concat <'expand 3 ltype 0' 'expand 3 ltype 1' 'expand 3 ltype 2' 'expand 3 ltype 3' 'expand 3 ltype 4' 'expand 3 ltype 5' 'expand 3 ltype 6'>
  set elem_net = < H1 H2 He3 He4 Li6 Li7 Be7 Be9 B8 B10 B11 C11 C12 C13 C14 N13 N14 N15 O15 O16 O17 O18 F18 F19 Ne20 Ne21 Ne22 Na22 Na23 Mg24 Mg25 Mg26 Alg26 Al27 Si28 Si29 Si30 Si31 P31 P32 Si32 S32 P33 S33 S34 S35 Cl35 S36 Cl36 Cl37 >
  set A_net = < 1 2 3 4 6 7 7 9 8 10 11 11 12 13 14 13 14 15 15 16 17 18 18 19 20 21 22 22 23 24 25 26 26 27 28 29 30 31 31 32 32 32 33 33 34 35 35 36 36 37 >
  define A_Al26m 26
  do k = 0,$(dimen(elem_net)-1) {
    define A_$(elem_net[$k]) $(A_net[$k]) 
  }
  define ncolors dimen(color_name)
  define nlines dimen(line_name)
  define nptype dimen(ptype_name)
  set suffix_name = < c1 c2 c3 c4 c5 s1 s2 s3 s4 s5 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 v12 hr >
  ticksize 0 0 0 0
  window 1 1 1 1
  define old_kipmacro 0
  define evolmode 1
  define irhoT 0
  define inucl 0
  define ishmod0 0
  define unit_x " "
  define unit_xy " "
  define unit_y " "
  define x model
  define y LH
  define unit_x x
  set nn = 1,100,1
  define xplotsc 100
  define yinflog 1e-2
  define name " "
  define iaccr 0
  define nstar 1
  define iunits 1
  define ihisto 0
  define iticksize 1
  define itick 0
  define iptick 0
  define iticklabel 1
  define iabsolute 0
  define iexpand 1
  define ixborne 1
  define ixbtype 0
  define iyborne 1
  define ixinv 0
  define iyinv 0
  define ixlog 0
  define iylog 0
  define itoplabel 1
  define ixlabel 1
  define iylabel 1 
  define ibox 1
  define iibox <1 2>
  define icheckvar 1
  define ichecknn 1
  define ilweight 0
  define ilweight_burn 2
  define inorm 0
  define ireverse 0
  define ierase 1
  define ipoints 0
  define icursor 0
  define ihrd 0
  define iphase 0
  define iphase0 0
  define nsmooth 1
  define xinf 0
  define xsup 1
  define yinf 0
  define ysup 1
  define ispline 0
  define iltype 1
  define iweight 0
  define ictype 1
  define _nfilentry 100
  define ysmooth Tc
  #define constants
  define msun 1.9892e33
  define lsun 3.8268e33
  define rsun 6.95987e10
  define sec 3.1557807e7
  define seci (1.e0/$sec)
  define vitc 2.99792458e10
  define gconst 6.67259e-8
  define boltz 1.380658e-16
  define hbar 6.6260755e-27
  define avn 6.0221367e23
  define ech 1.60217733e-19
  define econv ($ech*$avn*1.e13)
  #show chemical compostion
  define ichem 15
  #nuclear network
  define ireacnuc 29
  ## initialization structure variables
  define istruc 0
  define inuctype0 0
  define ishellnuc0 0
  define idxstar0 0
  set _nns = nn
  define _xsold Mr
  define _xsinf $xinf
  define _xssup $xsup
  define _ysinf $yinf 
  define _yssup $ysup
  define _nsstar $nstar
  define _iserase $ierase
  define _isctype $ictype
  define _isltype $iltype
  define _ispoints $ipoints
  define _isxborne $ixborne
  define _isyborne $iyborne
  do i=0,$_nfilentry { 
    define isave_$i 0
    define isconv_$i X
    define eformat_$i " "
    define sformat_$i " "
    define itshift_$i 0
    define imshift_$i 0
    define ireads_$i 0
    define nxsmooth_$i 1
    define nysmooth_$i 1
  }
  ## initialization evol variables
  set _nne = nn
  define imodelnuc0 0
  define ievol 0
  define _xeold t
  define _xeinf $xinf 
  define _xesup $xsup 
  define _yeinf $yinf
  define _yesup $ysup
  define _nestar $nstar
  define _ieerase $ierase
  define _iectype $ictype
  define _ieltype $iltype
  define _iepoints $ipoints
  define _iexborne $ixborne
  define _ieyborne $iyborne
  # kippenhahn
  define ntotconv 6
  set _nns = nn
  define ishade 100
  define iplotcz 1
  define itinv 0
  define iHeBS 1
  define iHeBS_m 1
  define iHBS 1
  define iHBS_m 1
  define iCburn 1
  define iCburn_m 1
  define iNeburn 1
  define iNeburn_m 1
  define iOburn 0
  define iOburn_m 0
  define kippen_type M
  define kippen_type_sav M
  define nenv_Mb 1
  define n_HMb 1
  define n_HMt 1
  define Hburn_color "green4"
  define Heburn_color "blue"
  define Cburn_color "red"
  define Neburn_color "magenta"
  define Oburn_color "cyan"
  define conv_color "black"
  do i=0,$_nfilentry {
    define itinv_$i 0
    define ireadi_$i 0
    define nxsmooth_$i 1
    define nysmooth_$i 1
    define ibeg_$i 1
    define iend_$i 500000
  }
  define recall " "
  define irecall 0
  define Abtype 1
  define Abiso 0
  set dimen(filevol) = 1
  set dimen(filestruc) = 1
  define _filerec ('$smhome/record')
  define _sfilerec ('$smhome/srecord')
  define _filevolsm ('$smdir/evol.sm')
  ## initialization obs variables
  set _nno = nn
  define _xoold t
  define _xoinf $xinf 
  define _xosup $xsup 
  define _yoinf $yinf
  define _yosup $ysup
  define _nostar $nstar
  define _ioerase $ierase
  define _ioctype $ictype
  define _ioltype $iltype
  define _iopoints 1
  define _ioxborne $ixborne
  define _ioyborne $iyborne 
  valsol
  set dimen(evolobs) = 0.s
  define _evolobs star
  define iobs 0
  define ilimit 1
  define ierror 1
  define iglobalerror 0
  define errorX 0.1
  define errorY 0.1
  set obsvar_AGB = ' '
  set fileobs = 1
  set obsvar = 'Variables read in files:' 
  goobs
  gostruc
  goevol
  # for shade color plot
  define ipasscolor 0

evolution
  define evolmode 1
  goevol

structure
  define evolmode 0
  gostruc

observation
  define evolmode 2
  goobs

ask 01
  if ($?1 == 0) { define 1 ? { proceed (y/n)}}
  define _answer $1

ss 1
  #save parameter session
  if ($1 == 0) {
    echo WARNING : 0 reserved for system
    echo command aborted 
    return
  }
  if ($isave_$1 != 0) {
    echo session already saved
    define proceed ?
    if ('$proceed' !=  'y') {return}
  }
  define isave_$1 1
  savevar $1

rs 1
  #restore parameter session
  if ($1 == 0) {
    echo WARNING : 0 reserved for system
    echo command aborted 
    return
  }
  if ($isave_$1 == 0) {
    echo session does not exists
    return
  }
  restorevar $1

savevar 1
  #if ($evolmode == 1 && $istruc == 0) {return}
  #if ($evolmode == 0 && $ievol == 0) {return}
  set _nnsave_$1 = nn    
  define _xold_$1 $x
  define _yold_$1 $y
  define _xinf_$1 $xinf 
  define _xsup_$1 $xsup 
  define _yinf_$1 $yinf 
  define _ysup_$1 $ysup
  define _nstar_$1 $nstar
  define _ierase_$1 $ierase
  define _iexpand_$1 $iexpand
  define _ipoints_$1 $ipoints
  define _ictype_$1 $ictype
  define _iltype_$1 $iltype
  define _ihisto_$1 $ihisto
  define _ixborne_$1 $ixborne
  define _iyborne_$1 $iyborne
  define _itoplabel_$1 $itoplabel
  define _ilweight_$1 $ilweight
  define _ixlabel_$1 $ixlabel
  define _iylabel_$1 $iylabel
  define _itick_$1 $itick
  define _iptick_$1 $iptick
  define _iticklabel_$1 $iticklabel
  define _ibox_$1 $ibox
  define _ixinv_$1 $ixinv
  define _iyinv_$1 $iyinv
  define _ixlog_$1 $ixlog
  define _iylog_$1 $iylog
  define _icheckvar_$1 $icheckvar
  define _ichecknn_$1 $ichecknn
  define _sysctype_$1 $ctype
  define _sysltype_$1 $ltype
  define _iibox <$iibox>

restorevar 1
  #if ($evolmode == 1 && $istruc == 0 && $inucl == 0) {return}
  #if ($evolmode == 0 && $ievol == 0 && $inucl == 0) {return}
  set nn = _nnsave_$1
  defx $_xold_$1
  define y $_yold_$1
  xlim $_xinf_$1 $_xsup_$1
  ylim $_yinf_$1 $_ysup_$1
  define nstar $_nstar_$1
  define ierase $_ierase_$1
  define iexpand $_iexpand_$1
  define ihisto $_ihisto_$1
  define ipoints $_ipoints_$1
  define ictype $_ictype_$1
  define iltype $_iltype_$1
  define ixborne $_ixborne_$1
  define iyborne $_iyborne_$1
  define itoplabel $_itoplabel_$1
  define ilweight $_ilweight_$1
  define ixlabel $_ixlabel_$1
  define iylabel $_iylabel_$1
  define itick $_itick_$1
  define iptick $_iptick_$1
  define iticklabel $_iticklabel_$1
  define ibox $_ibox_$1
  define ixinv $_ixinv_$1
  define iyinv $_iyinv_$1
  define ixlog $_ixlog_$1
  define iylog $_iylog_$1
  define icheckvar $_icheckvar_$1
  define ichecknn $_ichecknn_$1
  define iibox <$_iibox>
  ctype $_sysctype_$1
  ltype $_sysltype_$1

goevol 
  if ($evolmode != 1) { 
    define old $( ($evolmode == 0) ? 's' : 'o')
    set _nn$old = nn
    define _x$old""old $x
    define _x$old""inf $xinf 
    define _x$old""sup $xsup 
    define _y$old""inf $yinf 
    define _y$old""sup $ysup
    define _n$old""star $nstar
    define _i$old""erase $ierase
    define _i$old""ctype $ictype
    define _i$old""ltype $iltype
    define _i$old""points $ipoints
    define _i$old""xborne $ixborne
    define _i$old""yborne $iyborne
    define evolmode 1
    set nn = _nne
    define _checkvar $icheckvar
    define icheckvar 0
    defx $_xeold
    define icheckvar $_checkvar
    xlim $_xeinf $_xesup 
    ylim $_yeinf $_yesup
    define nstar $_nestar
    define ierase $_ieerase
    define ictype $_iectype
    define iltype $_ieltype
    define ipoints $_iepoints
    define ixborne $_iexborne
    define iyborne $_ieyborne
    define iphase $_iephase
    define iphase0 $(abs($_iephase))
    define ihrd $_ihrd
  }

gostruc
  if ($evolmode != 0) { 
    define old $( ($evolmode == 1) ? 'e' : 'o')
    set _nn$old = nn
    define _ihrd $ihrd
    define _x$old""old $x
    define _x$old""inf $xinf 
    define _x$old""sup $xsup 
    define _y$old""inf $yinf
    define _y$old""sup $ysup
    define _n$old""star $nstar
    define _i$old""erase $ierase
    define _i$old""ctype $ictype
    define _i$old""ltype $iltype
    define _i$old""points $ipoints
    define _i$old""xborne $ixborne
    define _i$old""yborne $iyborne
    define _i$old""phase $iphase
    define evolmode 0
    set nn = _nns
    define _checkvar $icheckvar
    define icheckvar 0
    defx $_xsold
    define icheckvar $_checkvar
    xlim $_xsinf $_xssup 
    ylim $_ysinf $_yssup 
    define nstar $_nsstar
    define ierase $_iserase
    define ictype $_isctype
    define iltype $_isltype
    define ipoints $_ispoints
    define ixborne $_isxborne
    define iyborne $_isyborne
    define ihrd 0
    define iphase 0
    define iphase0 0
  }


goobs
  if ($evolmode != 3) {
    define old $( ($evolmode==0) ? 's' : 'e')
    set _nn$old = nn
    define _ihrd $ihrd
    define _x$old""old $x
    define _x$old""inf $xinf 
    define _x$old""sup $xsup 
    define _y$old""nf $yinf
    define _y$old""sup $ysup
    define _n$old""star $nstar
    define _i$old""erase $ierase
    define _i$old""ctype $ictype
    define _i$old""ltype $iltype
    define _i$old""points $ipoints
    define _i$old""xborne $ixborne
    define _i$old""yborne $iyborne
    define _i$old""phase $iphase
    define evolmode 3
    set nn = _nno
    define _checkvar $icheckvar
    define icheckvar 0
    defx $_xoold
    define icheckvar $_checkvar
    xlim $_xsinf $_xosup
    ylim $_ysinf $_yosup
    define nstar $_nostar
    define ierase $_ioerase
    define ictype $_ioctype
    define iltype $_ioltype
    define ipoints $_iopoints
    define ixborne $_ioxborne
    define iyborne $_ioyborne
    define ihrd 0
    define iphase 0
    define iphase0 0
  }
  
initg
  window 1 1 1 1
  define ibox 0
  define ierase 0
  define ixlabel 0
  define iylabel 0
  define itoplabel 0
  it 0

initv
  window 1 1 1 1
  location 4000 31000 4000 31000
  ticksize 0 0 0 0
  notation -4 4 -4 4
  ibox 1
  ixlabel 1 iylabel 1
  itoplabel 1
  ixlog 0 iylog 0
  ixinv 0 iyinv 0
  ilweight 1 iltype 1
  ipoints 0 ictype 1
  ixborne 1 iyborne 1
  icheck 1 iphase 0
  ierase 1
  ihrd 0 
  ipoints ( ($evolmode == 3) ? 1 :0)
  inorm 0


#####################
## man page
#####################


man 01
  if ($?1 == 0) { define 1 ? { enter macro name or man for help : }}
  help sm_$1

sm_twoD
  initialize variables : init2d "structure number"
  make graphics : iso2d "variable" "structure number" with variable=psi/xlambda/Ucirc
     or all2d "structure number" to see all the graphs on the same plot
sm_readsi
  read structure files
    readsi filename_sequence-number ABSOLUTE_STAR_NUMBER
      ex : readsi "s1.0-02m1.5_01321" 2
sm_dels
  erase (from SM memory) structure file entry
    dels ABSOLUTE_STAR_NUMBER
      ex : dels 22
sm_readi
  read evolution files
    readi filename directory line_start line_end ABSOLUTE_STAR_NUMBER
      ex : readi "s1.0-02m1.5" AGB 100 350 3
sm_dele
  erase (from SM memory) evolution file entry
    dele ABSOLUTE_STAR_NUMBER
      ex : dele 27
sm_readtpagb
  read tpagb files
    readtpagb filename directory ABSOLUTE_STAR_NUMBER
      ex : readhtml m1.0z02 "HTML/Z02" 100 350 3
sm_readhtml
  read evolution files from the WWW server
    readhtml filename line1 line2 ABSOLUTE_STAR_NUMBER
      ex : readhtml m1.0z02 "HTML/Z02" 100 350 3
sm_reado
  read observational files
    reado filename ABSOLUTE_FILE_NUMBER
    Warning! May use several ABSOLUTE_FILE_NUMBER if more than 1 subtable is found
      ex : reado Letarte06 1
sm_lso
  list observational file in directory "OBS"
    ex: lso
sm_plot
  plot y/div-add
    3 arg : plot y division_factor addition_factor
    ex : plot Tc 10 -30 will plot Tc/10-30
sm_plotl
  plot log(y) 
    ex : plotl Tc 4 1e7 will plot log(Tc/4+1e7) 
sm_plotabs
  plot |y| : the negative values of y are indicated but dots
    ex : plotabs enucl 
sm_plotabsl
  plot log(|y|) : the negative values of y are indicated but dots
    ex : plotabsl enucl 
sm_plotR
  plot the ratio y1/y2
    ex : plotR YC12 YC13 
sm_plotD
  plot the ratio of a given variable from 2 different stars
    ex : plotD YC12 1 3 
sm_plotlD
  plot the log of the ratio of a given variable from 2 different stars
    ex : plotlD YC12 1 3 
sm_plotabsD
  plot the absolute value of the ratio of a given variable from 2 different stars
    ex : plotabsD YC12 1 3 
sm_plotabslD
  plot the log of the absolute value of the ratio of a given variable from 2 different stars
    ex : plotabslD YC12 1 3 
sm_plotabsR
  plot the ratio |y1/y2|
    ex : plotabsR YC12 YC13 
sm_plotlR
  plot log(ratio y1/y2)
    ex : plotlR YO16 YO18
sm_plotabslR
  plot log(ratio |y1/y2|)
    ex : plotabslR YO16 YO18
sm_defx
  define the name of the x variable
    ex : defx t
sm_chx
  change the name of the variable x keeping the same limits
    ex : chx model
sm_dx
  draw a vertical line at coordinate x
    ex : dx 1.3e4
sm_dy
  draw an horizontal line at coordinate y
    ex : dy 6.7
sm_xlim
  set x limits
    ex : xlim 1 10.2
sm_ylim
  set y limits
    ex : ylim 1.3e4 -121
sm_defxlim
  indicate the limits of the current variable ("$x") for the k^th star 
    ex : defxlim k  (k : integer, index number)
sm_defylim
  indicate the limits of the y variable within the x range for star index number k
    ex : defylim R k  (k : integer, index number)
sm_hrd
  draw HRD
     arg : (0) your limits, (1) limits estimated
        if ihrd = 1, different phases plotted with different line types
sm_ihrd
  attribute a different color to the different phases
	(1) cyan, (2) black, (3) green, (4) blue, 5 (red)
sm_iphase
  mode evolution : 
    if iphase > 0 : variable plotted if phase >= iphase
    if iphase < 0 : variable plotted if phase <= iphase
sm_dlconv
  delineate by drawing lines the convective boundaries of star number k in the INDEX LIST nn
    Note : if k = 0, draw convective limits for all the selected stars in the INDEX LIST nn
    ex : dlconv 1 (in structure only)
sm_dconv
  shade convective zone of star number k in the INDEX LIST nn
    Note : if k = 0, shade convective zones for all the selected stars in the INDEX LIST nn
    ex : dconv 1 (in structure only)
sm_dtshift
  shift time by t0 for the selected stars in the INDEX LIST nn
    the new time variable is ts and ts = t-t0 >=0
      ex : dtshift 7.1934e9
sm_mtshift
  starts counting the time from a specific MODEL NUMBER
  for the selected stars in the INDEX LIST nn
  the new time variable is tm and  tm = t-t0 >=0
    ex : mtshift 12034
sm_dtinv
  inverse time for the selected stars in the INDEX LIST nn
  the new time variable is tinv, time = 0 for the last computed model 
     ex : dtinv  (useful for massive stars)
sm_kippen
  kippen ABSOLUTE_STAR_NUMBER
     draw the Kippenhahn diagram of the selected star
     you can choose to draw Kippenhahn diagram as a function of mass or radius
     to do so : define kippen_type M (for mass) or  define kippen_type R (for radius)
   burning shells :  HBS (green)  HeBS (blue)  CBS (red)  NeBS (magenta)  OBS (cyan)
sm_kippenl
  kippenl ABSOLUTE_STAR_NUMBER
     draw the Kippenhahn diagram of the selected star in y-log scale
     you can choose to draw Kippenhahn diagram as a function of mass or radius
     to do so : define kippen_type M (for mass) or  define kippen_type R (for radius)
   burning shells :  HBS (green)  HeBS (blue)  CBS (red)  NeBS (magenta)  OBS (cyan)
sm_rhoT
  draw log(rho)-log(T) for the selected models 
  for evolutionary files different options : (0) rhoc-Tc/Tmax, (1) rhoc-Tc, (2) rhoc-Tmax
     ex : rhoT 1
sm_diff
  draw all diffusion coefficients
    diff ABSOLUTE_STAR_NUMBER
sm_CMD
  draw the color-magnitude (V vs B-V) diagram for the selected stars 
sm_varevol
  display variables in evolution files
    shortcut : ve
sm_varpulse
  display variables in tpagb files
    shortcut : vp
sm_varstruc
  display variables in structure files
    shortcut : vs
sm_varflame
  display variables in flame files
    shortcut : vf
sm_vare
  display status of the current evolution session
sm_vars
  display status of the current structure session
sm_mode
  display/set current mode : evolution = 1, structure = 0, observation = 2
    ex : mode 1 will set evolmode to 1
         mode   will display the current mode
sm_progvar
  print internal program variables
    shortcut : vv
sm_print
  ps  filename.ps  --> open the device : portrait
  psl filename.ps  --> open the device : landscape
  psp              --> create the .ps
sm_initg
  reset graphical parameters (box, labels, ..) for printing session
sm_initv
  setup/reset evol.sm default parameters for graphical session
sm_mysmooth
   Smooth a given Variable with the Filter_size. Output written in Variables
   mysmooth Variable Filter_size
     Ex: mysmooth L 20 
         output in Ls 
sm_mixing
   Calculate the amount of a species between the surface and a choosen depth. Print the result in Mo, mass fraction and [X/Fe]
   Need to know the element, its atomic mass, its solar abundance (in A(Li)), the depth of the mixing, and the [Fe/H] of the star
     ex: mixing [O16 16 8.83 1 -3.7]
sm_frequ
  draw frequency distribution of a given variable X over the models/structure with the step Y
    frequ X Y
      ex: frequ cputime 1  
sm_frequnorm
  draw frequency distribution (normalized to 1) of a given variable X over the models/structure with the step Y
    frequnorm X Y
      ex: frequnorm cputime 1
sm_deriv
  Make the derivative of Variable_1 over Variable_2
  The derivative is written in variable DVariable_1
    deriv Variable_1 Variable_2
      ex : deriv M t (for evolutionary files)
           deriv T Mr (for structure files) 
sm_integ
  Sum the input variable1 over variable2
  Output variable is written in IVariable1
    integ Variable1 Variable2
      ex: integ cputime model
          integ Egrav Mr
	  output : intEgrav
	  WARNING experimental : integ YNa23 -M give ejecta in Na23
sm_color
  Colorize the kippenhahn diagram with chemical composition for the selected evolutionary file.
  WARNING: need `mygensm.pl' in "$DIR_SMPROG" to work
    color NUMBER
      ex: color 1
sm_calcMloss
  Calculate the mass loss rates for Blocker, Reimers, Vassiliadis & Wood prescriptions. No metallicity dependence is included
    calcMloss

sm_nuc
  ------------  nuclear routines
  nucstruc : display nuclear information at shell ksh
     routines below only work if nucstruc has been called previously  (structure mode only)
  pflux    : plot as a function of reaction number, the nuclear property at the shell specified in nucstruc 
  pfluxl   : same as pflux but in log scale
  cf       : on a pflux graph, click on a reaction and it prints the name of that reaction
  reac     : print list of reactions by decreasing flux strength
  reacflx  : plot the flux of a specified reaction through the star
  shellflx : plot the flux of all reactions at a specified shell
  irad     : plot central irradiation value

sm_nucstruc
  display nuclear information at shell ksh
    1st arg : 0 local, 1 mean
    2nd arg : shell number
    3rd arg : ABSOLUTE_STAR_NUMBER (absolute number)
      ex : nucstruc 0 362 2
      see also flux, pflux
sm_flux
  after nucstruc, display the nuclear flux of all the network
       command = flux (no argument)
sm_cf
  on a pflux graph, click on a reaction and it prints the name of that reaction
sm_pflux
 plot as a function of reaction number, the nuclear property at the shell specified in nucstruc 
    1st arg : flux or eng or perc
      flux = nuclear flux
      eng  = nuclear energy production rate
      perc = percentage of the reaction to the total nuclear luminosity
    ex : pflux flux,  see also cf
sm_pfluxl
 plot as a function of reaction number, the log of nuclear property at the shell specified in nucstruc 
    1st arg : flux or eng or perc
      flux = nuclear flux
      eng  = nuclear energy production rate
      perc = percentage of the reaction to the total nuclear luminosity
    ex : pfluxl flux,   see also cf
sm_reac
  print reaction number and name ranked by decreasing flux intensity
    data provided by record
sm_reacflx
  plot the nuclear flux of a given reaction through the star
    1st arg : reaction number (to know the number type reac)
      ex reacflx 33  : plot the flux of 13C(a,g)
sm_shellflx
  plot the flux of all reactions at a specified shell
    1st arg : shell number
      ex shellflx 633
sm_irad
  plot central irradiation value, mode evolution only
    irad
sm_zoom
  select with the cursor the new limits and re-make the plot
  the limits will be lost after this new plot
    shortcut : z
  see also zoomx
sm_zoomx
  select with the cursor the new limits and re-make the plot
  the selected lkimits are now the default one
    shortcut : zx
  see also zoom
sm_abundance
  ------------  abundances
  Yields   : compute the yields for the selected stars up to a certain point
  pYields  : print Yields
  c1213    : draw the evolution of the C12/C13 ratio
  CO       : draw the evolution of the C/O ratio
  CFe      : draw the evolution of the index [C/Fe]
  NFe      : draw the evolution of the index [N/Fe]
  OFe      : draw the evolution of the index [O/Fe]
  MgAl     : draw the evolution of [Al/Fe] vs [Mg/Fe]
  ONa      : draw the evolution of [O/Fe] vs [Na/Fe]
  Li       : draw the surface evolution of epsilon(Li)  
  Be       : draw the surface evolution of epsilon(Be)  
  pmain    : plot main species as defined in the vecor list main_elem
  pmainl   : same as pmain but in y-log scale
  main     : display chemical composition at a given shell or at the center/surface
  shell    : display properties of a given shell (structure mode only)
  abund    : display available abundances
  ab       : plot abundance in specific units
 
sm_Yields
  compute the yields for the selected stars up to the model number nnn (see also pYields)
    ex : Yields nnn
         if nnn = 0 or not defined, Yields computed for all models
sm_pYields
  print the yields for the selected star up to the model number nnn in the specified filename
    ex : pYields absolute_star_number nnn filename
         if nnn = 0 or not defined, Yields computed for all models
sm_c1213
  draw the surface evolution of the C12/C13 ratio for the selected stars
sm_CO
  draw the surface evolution of the C/O ratio for the selected stars
sm_CFe
  draw the surface evolution of the [C/Fe] index for the selected stars
sm_NFe
  draw the surface evolution of the [N/Fe] index for the selected stars
sm_Li
  draw the surface evolution of epsilon(7Li) for the selected stars
sm_Be
  draw the surface evolution of epsilon(9Be) for the selected stars
sm_pmain
  plot at the same time all the elements specified in the "main_elem" vector
    o if you are in structure mode, plot profiles PX : 
       command = pmain PX
    o if you are in evolution mode, plot the central or surface abundances 
       command = pmain X  or  pmain Y
   Note : you can define your element list. By default  
       set main_elem = < H1 He4 C12 O16 Ne20 Na23 Si28 Mg24 >
sm_pmainl
  idem as pmain, but plot in y-log scale
     see : man pmain
sm_main
  print the "$ichem" most abundant chemical species by decreasing mass fraction
sm_shell
  print the properties of a given shell for a given star
       command = shell shell_number ABSOLUTE_star_number
           ex  shell 265 3 
sm_abund
  display available abundances for plotting
sm_ab
  plot abundances in observers units
    1st arg : atom name
    2nd arg : unit to consider, (1) [X/Fe], (2) esp(X), (3) [X/H]
    3rd arg : (0) element or (>0) isotope number to consider
    4th arg : (0: default) draw graph, (1) compute only 
      ex : ab C 1 14
sm_dist
  give the distance in x and y between 2 points
    ex dixt
sm_nabla
  plot the different gradient (structure mode) for the selected stars
    ex nabla
sm_dover
  compute overshoot diffusion coefficient
    ex : dover  ABSOLUTE_STAR_NUMBER  
sm_dMcoredt
  compute the H mean core growth rate for the selected stars
    ex : dMcoredt Hburn_Mb  
sm_calcfluxAM
  Calculate the flux of angular momentum transported by meridional circulation and by the shear for the selected star
     ex :  calcfluxAM STRUCTURE_STAR_NUMBER
sm_fluxAM
  Calculate the flux of angular momentum transported by meridional circulation and by the shear for the selected star
     ex :  fluxAM STRUCTURE_STAR_NUMBER

     
sm_man
  
                 USING EVOLSM
  
    EACH COMMAND IS DESCRIBED IN THE MAN PAGE, TYPE : man COMMAND_NAME
   
    1st : read the files 
    ====================
     use either 
  readsi : read structure files
  readi  : read evolution files
  readhtml : read evolution files in the WWW server format
  reado  : read observational files
  
    2nd : define nn, the array of the index
    =======================================
      the vector nn is a list of ABSOLUTE_STAR_NUMBERS
         ex : set nn = < 1 2 5 3 > 
    In nn are listed the stars numbers which will appear in the plot
    In the present example, the stellar models for which the ABSOLUTE_STAR_NUMBER
    equal 1, 2, 5 and 3 will be plotted
  
    3rd : define nstar, the number of stars that will be plotted
    ============================================================
         ex : define nstar 3 OR nstar 3

    Note : 2nd and 3rd step can be resume by the command nn
         ex : nn < 1 2 5 >    <=>   set nn = < 1 2 5 >
                                    nstar 3
  
  YOU CAN GO BACK AND FORTH FROM EVOLUTION TO STRUCTURE OR OBSERVATION BY SIMPLY
               TYPING goevol OR gostruc OR goobs RESPECTIVELY
  the setting of the session is also restored (limits, xvar, yvar ...)
  
  
  ----------------- read files -------------------
  readsi    : read structure files
  readi     : read evolution files
  readhtml  : read evolution files from the WWW server
  readtpagb : read tpagb files
  reado     : read observational files
  ----------------- delete entry -------------------
  dele      : erase (from SM memory) evolutionary file entry
  dels      : erase (from SM memory) structure file entry
  delo      : not yet implemented
  ----------------- plotting data -------------------
  plot      : plot y variable
  plotl     : plot log(y)
  plotabs   : plot |y| : the negative values of y are indicated but dots
  plotabsl  : plot log(|y|) : the negative values of y are indicated by dots
  plotR     : plot the ratio y1/y2
  plotlR    : plot log(ratio y1/y2)
  plotabslR : plot log|ratio y1/y2|
  plotD     : plot the ratio y_i/y_j from models i and j
  plotlD    : plot log (y_i/y_j) where y is the common variable of models i and j
  plotabsD  : plot |y_i/y_j| where y is the common variable of models i and j
  plotabslD : plot log |y_i/y_j| wher y is the common variable of models i and j
  dist      : give the distance between 2 points
  defx      : define the name of the x variable
  chx       : change the name of the variable x keeping the same limits
  dx        : draw a vertical line at coordinate x
  dy        : draw an horizontal line at coordinate y
  xlim      : set x limits
  ylim      : set y limits
  defxlim   : indicate the limits of the x variable for the k^th star 
  defylim   : indicate the limits of the y variable within the x range for star index number k
  -------------- Built-in functions --------------
  hrd       : draw HRD
  kippen    : draw the kippenhahn diagram of the selected star
  kippenl   : draw the kippenhahn diagram of the selected star in y-log scale
  rhoT      : draw the evolution in the log(T_c) - log(Tc) plane
  dconv     : shade convective zones of star number k in the INDEX LIST nn
  dlconv    : delineate convective zones of star number k in the INDEX LIST nn
  calcMloss : calculate the mass loss rates for Blocker, Reimers, Vassiliadis & Wood prescriptions. No metallicity dependence is included
  calcfluxAM: calculate the flux of angular momentum transported by meridional circulation and by the shear for the selected star
  fluxAM    : calculate and plot the flux of angular momentum
  nabla     : plot the different gradients
  dover     : compute overshoot diffusion coefficient
  dMcoredt  : compute the H mean core growth rate for the selected stars
  ------------  define new times reference
  dtshift   : shift time by t0 for the selected stars in the INDEX LIST nn - new variable ts
  mtshift   : starts counting time from a specific model number - new variable tm
  dtinv     : start counting time from last computed model - new variable tinv
  iphase    : plot variable if phase >= (<=) iphase if ipase is > 0 (< 0)
  ihrd      : assign a color at each phase
  ------------  nuclear
  nucstruc  : display nuclear information at shell ksh
     routines below only work if nucstruc has been called previously  (structure mode only)
  pflux     : plot as a function of reaction number, the nuclear property at the shell specified in nucstruc 
  pfluxl    : same as pflux but in log scale
  cf        : on a pflux graph, click on a reaction and it prints the name of that reaction
  reac      : print list of reactions by decreasing flux strength
  reacflx   : plot the flux of a specified reaction through the star
  shellflx  : plot the flux of all reactions at a specified shell
  irad      : plot central irradiation value
  ------------  abundances
  Yields    : compute the yield for the selected stars up to a certain point
  c1213     : draw the evolution of the C12/C13 ratio
  CO        : draw the evolution of the C/O ratio
  CFe       : draw the evolution of the index [C/Fe]
  NFe       : draw the evolution of the index [N/Fe]
  Li        : draw the surface evolution of epsilon(Li)  
  Be        : draw the surface evolution of epsilon(Be)  
  pmain     : plot main species as defined in the vecor list main_elem
  pmainl    : same as pmain but in y-log scale
  main      : display chemical composition at a given shell or at the center/surface
  shell     : display properties of a given shell (structure mode only)
  abund     : display available abundances
  ab        : plot abundance in specific units
  ------------  session info
  vare      : display evolution session
  vars      : display structure session
  varevol   : display variables in evolution files
  varstruc  : display variables in structure files
  varflame  : display variables in flame files
  mode      : display/set current mode (evolution 1, structure 0)
  progvar   : display internal program variables
  ------------  print, graphical mode
  print     : use ps or psl, run your macro and then close device with psp
  initg     : reset graphical parameters (box, labels, ..) for printing session
  initv     : setup/reset evol.sm default parameters for graphical session
  frequ     : draw frequency distribution of a given variable
  frequnorm : draw normalized frequency distribution of a given variable
  deriv     : compute derivative of a given variable with respect to another
  integ     : compute integratation of a given variable with respect to another

########################
##  environment varibles
########################
  

progvar
  #display internal variable setup
  echo   
  echo 			PARAMETERS
  echo
  echo     0 = disactivated    1 >= activated
  echo
  echo "    draw box         : ibox     " $ibox   "--   set ltype mode   : iltype    " $iltype
  echo "    toplabel         : itoplabel" $itoplabel "  --   set ctype mode   : ictype    " $ictype 
  echo "    auto-erase       : ierase   " $ierase   "--   ipoints : (0) lines, (1) points, (2) points + lines"
  echo "    auto x-limits    : ixborne  " $ixborne   "--   log x scale      : ixlog     " $ixlog
  echo "    auto y-limits    : iyborne  " $iyborne   "--   log y scale      : iylog     " $iylog  
  echo "    xlabel           : ixlabel  " $ixlabel   "--   draw points      : ipoints   " $ipoints
  echo "    ylabel           : iylabel  " $iylabel   "--   normalization    : inorm     " $inorm 
  echo "    mark sequence    : itick    " $itick   "--   label sequence   : iticklabel" $iticklabel
  echo "            ticksize : iticksize" $iticksize   "--   label curve      : iptick    " $iptick
  echo "        the limits are stored in xinf,xsup,yinf and ysup"
  echo "    select phase     : iphase   " $iphase   "--   line weight      : ilweight " $ilweight
  echo "    draw hrd         : ihrd     " $ihrd   "--   draw histogram   : ihisto   " $ihisto
  echo "          if ihrd activated, different ltype for each evolutionary phase"
  echo "    check variable   : icheckvar" $icheckvar   "--   check index list : ichecknn " $ichecknn
  echo "    draw error       : ierror   " $ierror   "--   draw limits      : ilimit   " $ilimit
  echo "                     : errorX   " $errorX   
  echo "                     : errorY   " $errorY
  echo "                     : iglobalerror" $iglobalerror
  echo "    kippen :  spacing between lines  : ishade "  $ishade   ", ilweight_burn"  $ilweight_burn
  echo "              plot H burning shells  : iHBS   , iHBS_m   "  $iHBS, $iHBS_m
  echo "              plot He burning shells : iHeBS  , iHeBS_m  "  $iHeBS, $iHeBS_m
  echo "              plot C burning shells  : iCburn , iCburn_m "  $iCburn, $iCburn_m
  echo "              plot Ne burning shells : iNeburn, iNeburn_m"  $iNeburn, $iNeburn_m
  echo "              plot O burning shells  : iOburn , iOburn_m "  $iOburn, $iOburn_m
  echo "              kippenhahn type        : kippen_type " $kippen_type
  echo "    nuclear:  number of nuclear reaction to plot : ireacnuc " $ireacnuc
  echo "    spline (to draw isochrons only)  : ispline" $ispline
  #echo "    smooth ? "
  #echo "     x smoothed  : nxsmooth (>2 for activation)" $nxsmooth
  #echo "     y smoothed  : nysmooth (>2 for activation)" $nysmooth
  echo

vars
  #display structure files list
  if ($istruc ==0) {
    echo no structure files read
    return
  }
  define _ipass 0
  if ($evolmode != 0) {
    define _ipass 1
    define ioldmode $evolmode
    gostruc
  }
  echo
  echo "#" setup
  echo            x-axis         y-axis                   graph setup : (0) off - (1) on
  echo   limits   ixborne : $ixborne    iyborne  : $iyborne      |   icheckvar : $icheckvar     inorm    : $inorm            
  echo   log      ixlog   : $ixlog    iylog    : $iylog      |   iltype    : $iltype     ictype   : $ictype
  echo   inv      ixinv   : $ixinv    iyinv    : $iyinv      |   ihrd      : $ihrd     ierase   : $ierase
  echo   label    ixlabel : $ixlabel    iylabel  : $iylabel      |   ipoints   : $ipoints     ibox     : $ibox
  define nfilestruc (dimen(filestruc)-1)
  local define print_noheader 1
  if ($nfilestruc >= 0 ) {
    echo
    echo "#" files
    echo        index    type  seq          name                   Luminosity       Mass      Radius   nsh  bin
    set dimen(_arg2) = 1.s
    set dimen(_arg4) = 1.s
    set dimen(_arg) = 1.s
    do i =0,$nfilestruc {
      define _ntrc $(filestruc[$i])
      set _arg1 = $_ntrc
      set _arg2 = '$sformat_$_ntrc'
      set _arg3 = $(nseq_$_ntrc""[0])
      set _arg4 = '$names_$_ntrc'
      set _arg5 = $Lstar_$_ntrc
      set _arg6 = $Mstar_$_ntrc
      set _arg7 = $Rstar_$_ntrc
      set _arg8 = $nshell_$_ntrc
      set _arg9 = $binversion_$_ntrc
      print 'star  "#" [%2d] %7s  %3d : %-30s %9.2f %10.3f  %10.4e  %4d  %3d' {_arg1 _arg2 _arg3 _arg4 _arg5 _arg6 _arg7 _arg8 _arg9}
    }
    define nstars dimen(nn)
    if ($nstar == 0)  { define nstar $nstars}
    if ($nstar > $nstars ) { define nstar $nstars}
    if ($nstar > ($nfilestruc +1) ) { define nstar $nfilestruc}
    echo
    echo   $nstar star(s) selected :    $x = [$xinf,$xsup] , $y = [$yinf,$ysup]
    echo
    echo           nb     color     index     type  seq   nsh bin    name
    do i = 1,$nstar {
      define i1 ($i-1)
      define icolor ($i1 % $ncolors)
      if ($ireads_$(nn[$i1]) != 0) {
        set _arg1 = $i
        set _arg3 = $(nn[$i1])
        set _arg2 = '$sformat_$(nn[$i1])'
        set _arg5 = $(nseq_$(nn[$i1])""[0])
        set _arg4 = '$names_$(nn[$i1])'
        set _arg9 = $binversion_$(nn[$i1])
        set _arg6 = $nshell_$(nn[$i1])
        set _arg = '$(color_name[$icolor])'
        print '    star  %2d "#"   %-9s  [%2d]  %7s  %3d  %4d %3d :  %-30s' {_arg1 _arg _arg3 _arg2 _arg5 _arg6 _arg9 _arg4}
      }
    }
    delete _arg
    delete _arg1
    delete _arg2
    delete _arg3
    delete _arg4
    delete _arg5
    delete _arg6
    delete _arg7
  }
  echo
  if ($_ipass == 1) { 
    if ($ioldmode == 1 || $ioldmode == 2) { goevol } 
    if ($ioldmode == 3) { goobs }
  }
  delete _ipass
  if ($ievol == 1) {echo warning : you are in mode evolution}

vare
  #display evolution files list
  if ($ievol == 0) {
    echo no evolution files read
    return
  }
  define _ipass 0
  if ($evolmode != 1 && $evolmode != 2) {
    define _ipass 1
    define ioldmode $evolmode
    goevol
  }
  echo
  echo "#" setup
  echo            x-axis         y-axis                   graph setup : (0) off - (1) on
  echo   limits   ixborne : $ixborne    iyborne  : $iyborne      |   icheckvar : $icheckvar     iphase   : $iphase (0-6)          
  echo   log      ixlog   : $ixlog    iylog    : $iylog      |   ierase    : $ierase     ictype   : $ictype
  echo   inv      ixinv   : $ixinv    iyinv    : $iyinv      |   ihrd      : $ihrd     iltype   : $iltype
  echo   label    ixlabel : $ixlabel    iylabel  : $iylabel      |   ipoints   : $ipoints     ibox     : $ibox
  define nfilevol (dimen(filevol)-1)
  local define print_noheader 1
  if ($nfilevol >= 0 ) {
    echo
    echo "#" files
    echo            index   name                                 lines  version
    set dimen(_arg) = 1.s
    set dimen(_arg0) = 1.s
    set dimen(_arg3) = 1.s
    do i =0,$nfilevol {
      set _arg1 = $(filevol[$i])
      set _arg = '$namee_$(filevol[$i])'
      set _arg5 = $eversion_$(filevol[$i])
      set _arg4 = $eline_$(filevol[$i])
      set _arg6 = $(filevol[$i])
      print 'star     "#"  [%2d] : %-35s %6d   %4.2f' {_arg1 _arg _arg4 _arg5}
    }    
    define nstare dimen(nn)
    if ($nstar == 0)  { define nstar $nstare}
    if ($nstar > $nstare ) { define nstar $nstare}
    if ($nstar > ($nfilevol+1) ) { define nstar $nfilevol}
    echo
    echo   $nstar star(s) selected :    $x = [$xinf,$xsup] , $y = [$yinf,$ysup]
    echo
    echo           nb     color     index     type    name                                 lines
    do i =1,$nstar {
      define i1 ($i-1)
      define icolor  ($i1 % $ncolors)
      if ($ireadi_$(nn[$i1]) != 0) {
        set _arg1 = $i
        set _arg0 = '$(color_name[$icolor])'
        set _arg = '$namee_$(nn[$i1])'
        set _arg3 = '$eformat_$(nn[$i1])'
        set _arg2 = $(nn[$i1])
        set _arg4 = $eline_$(nn[$i1])
        print '    star  %2d "#"   %-9s  [%2d]  %7s  : %-35s %6d' {_arg1 _arg0 _arg2 _arg3 _arg _arg4}
      }
    }
    delete _arg
    delete _arg0
    delete _arg1
    delete _arg2
    delete _arg3
  }
  echo
  if ($_ipass == 1) { 
    if ($ioldmode == 0) { gostruc } 
    if ($ioldmode == 3) { goobs }
  }
  delete _ipass
  if ($ievol == 0) {echo warning : you are in mode structure}

varo
  local define print_noheader 1
  echo "#" setup
  echo            x-axis         y-axis                   graph setup : (0) off - (1) on
  echo   limits   ixborne : $ixborne    iyborne  : $iyborne      |   icheckvar : $icheckvar     iphase   : $iphase (0-6)          
  echo   log      ixlog   : $ixlog    iylog    : $iylog      |   ierase    : $ierase     ictype   : $ictype
  echo   inv      ixinv   : $ixinv    iyinv    : $iyinv      |   ihrd      : $ihrd     iltype   : $iltype
  echo   label    ixlabel : $ixlabel    iylabel  : $iylabel      |   ipoints   : $ipoints     ibox     : $ibox
  #echo   $nstar star(s) selected :    $x = [$xinf,$xsup] , $y = [$yinf,$ysup]
  echo \# Obvervationary Files:
  echo      index  name       source               subtable   
  do i = 1,100 {
    if ($?nameo_$i == 1) {
      set _arg1 = $i
      set _arg2 = '$nameo_$i'
      set _arg3 = '$Src_$i'
      set _arg4 = '$SubtableInfo_$i'
      print 'obs "#" [%2d]  %-10s %19s  %-25s' {_arg1 _arg2 _arg3 _arg4}
    }
  }
  echo \# Selected Files:
  echo      index  name             subtable            color ptype
  do i=1,$nstar {
      define i1 ($i-1)
      set _arg1 = nn[$i1]
      set _arg2 = '$nameo_$(nn[$i1])'
      set _arg3 = '$SubtableInfo_$(nn[$i1])'
      define icolor  ($i1 % $ncolors)
      define iptype  ($i1 % $nptype)
      set _arg4 = '$(color_name[$icolor])'
      set _arg5 = '$(ptype_name[$iptype])'
      print 'obs "#" [%2d]  %-10s %19s: %10s %3s' {_arg1 _arg2 _arg3 _arg4 _arg5}
  }


varevol 
  #display list of evolution variables
  echo 
  echo           LIST OF VARIABLES FOR EVOLUTION FILES
  echo 
  echo MODEL      :  t         tKH      ts,tm    dt       model    iter     nshell   phase  cputime
  echo ENERGETICS :  L         LH       LHe      LC       Lnucl    Lgrav    Lnu_pla  Lce    Leconv
  echo CENTER     :  Egrav     Enucl    Enu_pla  Tmax     Tmax_Mr  rho_max
  echo               betac     etac     Pc       Tc       rhoc     degpec   hydrm
  echo               irradiation (center) :      trad     XNn
  echo SURFACE    :  Reff      R        roeff    Teff     geff     mlos     M
  echo ACCRETION  :  Lacc      Lshear   maccr    Racc     Macc
  #echo ROTATION   :  k2conv    k2rad    Jtot     deltaJ   OmS      vsurf
  echo ROTATION   :  k2conv    k2rad    Jrad     Jtot     Usurf    vsurf
  echo
  echo BURNING SHELLS    : {X}burn_Mt   {X}burn_Rt  {X}burn_rot  {X}burn_Tt     with {X}=[H,He,C]
  echo       H and He BS : {X}burn_Mm   {X}burn_em  {X}burn_enum {X}burn_etam
  echo CONVECTIVE ZONES  :    nconvt
  echo       core (i=1)  :    conv1_rob   conv1_rot   conv1_Tb     conv1_Tt
  echo       envelope    :    env_Tb      env_Mb      env_Rb       env_rob
  echo       all shells  :    conv{i}_Rb  conv{i}_Rt  conv{i}_Mb   conv{i}_Mt  (i=1,5)
  echo ABUNDANCES :  type abund
  echo

varstruc 
  #display list of structure variables
  echo
  echo           LIST OF VARIABLES FOR STRUCTURE FILES
  echo
  echo STRUCTURE  :  Mr(Mo)   r(Ro)    xmr      r        nsh        yzi     tcond     Mrc (centered mass coor.)
  echo HYDRO-CONV :  u        g        pvisc    Vconv    rfconv     Mack    tconv(yr) Dconv (=Dmlt+Dsconv)
  echo THERMO     :  rho      s        P        T        lnf        hydrat  gamma1    cp  
  echo               Hp       abadd    abla     abmu/abmuj (smooth) abrad   tau       kap
  echo               beta     cs       eta      mu       mue        mui     Kt (thermal diffusivity)      
  echo URCA       :  eloc     egconv   efermi
  echo ENERGETICS :  Lr       egrav    eint     enucl    enupla     enuc    enunucl
  echo               enucl = (enuc-|enunucl|-|enupla|) : TOTAL nuclear energy generation rate (epsilon_nuc)
  echo               Legrav   Leint    Lenucl   Lenupla  Lenunucl   Lenuc   rfconv    rfrad  
  echo               work = -Pd(1/rho)/dt    etherm = -deint/dt     comp = dlnrho/dt  heat = dlnT/dt
  echo NEUTRONS   :  tirad (neutron exposure)   PXNn  (neutron density) 
  echo ROTATION   :  omega    Ucirc (merid)     theta  xlambda  
  echo DIFFUSION  :  Nuturb   Numol    Dshear   Dcirc    Dh (hori)  Dmicro  Vmicro   Dtot (=Dshear+Dcirc+Dmicro)
  echo TIMESCALES :  tdyn     tdiff    tcond    tkap     tcomp      theat   teint    tenuc
  echo               tigni(cpT/enucl)    tcond(cp*Kap*rho**2*HP**2/T**3)
  echo ABUNDANCES :  type abund
  echo
 
varpulse 
  #display list of structure variables
  echo
  echo           LIST OF VARIABLES FOR TPAGB FILES
  echo
  echo  MODELS :  npul       mpulse      seqpulse     mtop seqtop  mend       seqend   mdup    seqdup
  echo  STAR   :  Mtp        Ltp         Rtp          Mlosstp      Mlossit    dmloss   dmcore  Tenv
  echo  DUP    :  fdilu      fovlap      dupH         dup_dm       lambda     dmHpul   dup_Tb
  echo  PULSE  :  pulse_Tb   pulse_Tt    pulse_rob    pulse_rot    tp_start   dtpulse  dtinter rHeBS  eta_He
  echo            pulse_Mbm  pulse_LHem  pulse_dmmax  pulse_Mcore  pulse_Menv pulse_mHeBS  pulse_rHeBS
  echo  CORE   :  dMcore     dMcore_eff


abund
  #display list of abundances variables
  echo 
  echo                  LIST OF ABUNDANCE VARIABLES
  echo 
  echo n      H1     H2     He3    He4    Li6    Li7    Be7    Be9    B8
  echo B10    B11    C11    C12    C13    C14    N13    N14    N15    O15
  echo O16    O17    O18    F18    F19    Ne20   Ne21   Ne22   Na22   Na23
  echo Mg24   Mg25   Mg26   Al26g  Al26m  Al27   Si28   Si29   Si30   Si31
  echo P31    P32    Si32   S32    P33    S33    S34    S35    Cl35   S36
  echo Cl36   Cl37   heavy    Zsurf    Zcent   Nn (neutron density)
  echo 
  echo    variables for the evolution of the central (surface)
  echo    abundances are prefixed by X (Y), while variables
  echo    for the abundance profiles are prefixed by PX
  echo 


varflame 
  #display list of flame variables
  echo 
  echo           LIST OF VARIABLES FOR FLAME FILES
  echo 
  echo MODEL      :  tf          tmf        modelf       dtf
  echo PRECURSOR  :  pflame_dm   pflame_dr  pflame_smin  pflame_smax  Lmin -- Lmaxcz
  echo FLAME      :  flame_Mb    flame_Mt   flame_dm     flame_Rb     flame_Tb  flame_rob  flame_C12 flame_O16 
  echo SPEED      :  u_theo      u_ff
  echo WIDTH      :  dr_bff      dr_theo    nmove_theo   nmove_real   tau_Lcbcz
  echo ENERGETICS
  echo    convective zones :  Lnu_pla_cbcz   LC_cbcz   Lgrav_cbcz   Lmaxcz  XC12cbcz 
  echo    radiative  zones :  Lnu_pla_rz     LC_rz     Lgrav_rz
  echo

varobs
  print <obsvar>
  
#####################
### ouput commands
#####################

ps 02
  #printing command
  if ($?1 == 0) { define 1 ? { select : output filename }}
  if ('$1' == 'x') {return}
  define _psfilename delete
  if ($?2 == 0) { define 2 ? { print filename on postscript (y/n) }}
  if ('$2' != 'n') { define _psfilename $1 }
  define _iplweight $ilweight
  define _file ('$smdir/../$1')
  if (is_file("$_file")) {
    echo File $_file already exists !
    define _ans ? { Overwritte it ? (y/n)}
    if ('$_ans' != 'y') {
      echo File not replace
      define _ans delete
      return
    }
    define _ans delete
  }
  if ($ilweight < 3 ) { define ilweight 3 }
  define lweight |
  if ($lweight < 2) { lweight 2}
  dev postencap $_file

psport 02
  #printing command
  if ($?1 == 0) { define 1 ? { select : output filename }}
  if ('$1' == 'x') {return}
  define _psfilename delete
  if ($?2 == 0) { define 2 ? { print filename on postscript (y/n) }}
  if ('$2' != 'n') { define _psfilename $1 }
  define _iplweight $ilweight
  define _file ('$smdir/../$1')
  if (is_file("$_file")) {
    echo File $_file already exists !
    define _ans ? { Overwritte it ? (y/n)}
    if ('$_ans' != 'y') {
      echo File not replace
      define _ans delete
      return
    }
    define _ans delete
  }
  if ($ilweight < 3 ) { define ilweight 3 }
  define lweight |
  if ($lweight < 2) { lweight 2}
  dev postportfile $_file

psl 02
  #printing command - landscape mode
  if ($?1 == 0) { define 1 ? { select : output filename }}
  if ('$1' == 'x') {return}
  define _psfilename delete
  if ($?2 == 0) { define 2 ? { print filename on postscript (y/n) }}
  if ('$2' != 'n') { define _psfilename $1 }
  define _iplweight $ilweight
  define _file ('$smdir/../$1')
  if (is_file("$_file")) {
    echo File $_file already exists !
    define _ans ? { Overwritte it ? (y/n)}
    if ('$_ans' != 'y') {
      echo File not replace
      define _ans delete
      return
    }
    define _ans delete
  }
  dev postlandfile $_file
  define ilweight 3
  lweight 2
	
psp
  #close printing device
  if ($?_psfilename == 1) {
    relocate (200 600)
    ctype black
    putlabel 6 \-3\t $(quote_TeX(' $_psfilename')) printed $(substr('$!date',0,12) + substr('$!date',15,0))
    if ($?extralabel != 0) {
      relocate (200 1200)
      putlabel 6 \-3\t $(quote_TeX('$extralabel'))
      define extralabel delete
    }      
  }
  hardcopy 
  dev x11
  lweight 1
  define ilweight $_iplweight
  define _psfilename delete


#####################
#### graph settings
#####################

xborne
  #compute x limits : xinf0, xsup0
  set dimen(b) = 0
  foreach n nn {
    if ($ixlog == 1) {
      set x_temp_$n = lg($x"_"$n+1e-31)
    } else {
      set x_temp_$n = $x"_"$n
    }
    if ($iphase != 0 && $evolmode == 1) {
      if ($iphase > 0) { set _x_temp_$n = x_temp_$n if (phase_$n >= $iphase)
      } else {
        set _x_temp_$n = x_temp_$n if (phase_$n <= abs($iphase))
      }
    } else {
      if ($evolmode == 3) {
        set _x_temp_$n = x_temp_$n if ($x"_"$n < 1e36)
      } else { 
        set _x_temp_$n = x_temp_$n
      }
    }
    if ($(dimen(_x_temp_$n)) > 0) {
      vecminmax _x_temp_$n _x1 _x2
      set b = b concat $_x1 concat $_x2
    }
  }
  vecminmax b _b1 _b2
  if ($ixbtype == 0) { define deltab (($_b2-$_b1)*0.04) }\
  else { define deltab 0. }
  define xinf0 ($_b1-$deltab)
  define xsup0 ($_b2+$deltab)
  delete b
  define ixbtype 0
  define _b1 delete define _x1 delete 
  define _b2 delete define _x2 delete 

yborne 03
  #compute y limits
  if ($?2 == 0) { define 2 1 }
  if ($?3 == 0) { define 3 0 }
  if ($2 == 0) { define 2 1 }
  set dimen(b) = 0
  foreach n nn {  
    if ($inorm == 0) {
       if ($iylog >= 1) {set y_temp_$n = lg($1_$n/$2+$3+1e-31) }\
       else             {set y_temp_$n = $1_$n/$2+$3 }
    }
    if ($inorm == 1) {
       if ( $evolmode == 1 ) {
         if ($iphase == 0) { 
           define y0 $($1_$n[0]) }\
         else {
           if ($iphase > 0 ) { set _y0 = $1_$n if ( phase_$n >= $iphase) }
           if ($iphase < 0 ) { set _y0 = $1_$n if ( phase_$n <= abs($iphase)) }
           define y0 $(_y0[0])
         }
       } else {
         define y0 $(_y0[0])
       }
       if ($iylog >= 1) { set y_temp_$n = lg($1_$n/$y0+1e-31) }\
       else { set y_temp_$n = $1_$n/$y0 }
    }
    if ($evolmode == 1) {
      if ($iphase != 0) {
        if ($iphase > 0) {
          set sphase_$n = phase_$n if ( phase_$n >= $iphase)
          set _y_temp_$n = y_temp_$n if ( phase_$n >= $iphase) 
        } else { 
          set sphase_$n = phase_$n if ( phase_$n <= abs($iphase) )
          set _y_temp_$n = y_temp_$n if ( phase_$n <= abs($iphase) ) } }\
      else {
        set sphase_$n = phase_$n
        set _y_temp_$n = y_temp_$n
      } }\
    else {
      if ($evolmode == 3) {
        set _y_temp_$n = y_temp_$n if ($1_$n<1e36 && $x""_$n<1e36)
      } else {
        set _y_temp_$n = y_temp_$n
      }
    } 
    if ($(dimen(_x_temp_$n)) > 0 ) {
      if ($evolmode >= 2) {
        set y = _y_temp_$n
      } else {
        set y = _y_temp_$n if ( _x_temp_$n > $xinf && _x_temp_$n < $xsup)
      }
      if ($(dimen(y)) > 0) { 
        vecminmax y _x1 _x2
        set b = b concat $_x1 concat $_x2
      }
    }
  }
  vecminmax b _b1 _b2
  define _db12 ($_b2-$_b1)
  if ($_db12 > 0. ) {
    define deltabinf ($_db12*0.04)
    define deltabsup ($_db12*0.04) }\
  else {
    if ($_b2 != 0. ) {
      define deltabinf $($_b2*1.e-3)
      define deltabsup $deltabinf }\
    else {
      define deltabinf 1.e-5
      define deltabsup 1.e-5
    }      
  }
  define yinf0 ($_b1-$deltabinf)
  define ysup0 ($_b2+$deltabsup)
	delete b
  define y0 delete define _db12 delete
  define _b1 delete define _x1 delete 
  define _b2 delete define _x2 delete 

defxlim 02
  set x_temp = $x"_"$(nn[($1-1)])
  if ($ixlog == 1) {set x_temp = (lg(x_temp+1e-10))}
  vecminmax x_temp xinf0 xsup0
  if ($?2 != 0) {
    echo star $(nn[($1-1)])
    echo xinf0 : $xinf0
    echo xsup0 : $xsup0
  }

defylim 03
  set x_temp = $x"_"$(nn[($2-1)])
  if ($ixlog == 1) {set x_temp = (lg(x_temp+1e-31))}
  set y_temp = $1"_"$(nn[($2-1)]) if (x_temp > $xinf && x_temp < $xsup)
  set x_temp = $x"_"$(nn[($2-1)]) if (x_temp > $xinf && x_temp < $xsup)
  if ($iylog >= 1) {set y_temp = (lg(y_temp+1e-31))}
  vecminmax y_temp yinf0 ysup0
  if ($?3 !=0) {
    echo $x "["$xinf","$xsup"]"  -->  $1 "["$(y_temp[0])","$(y_temp[$(dimen(x_temp)-1)])"]"
    echo x(yinf) : $(x_temp[0]) 
    echo x(ysup) : $(x_temp[$(dimen(x_temp)-1)])
    echo ymin : $yinf0
    echo ymax : $ysup0
  }

xlog 01
  #set x-log axis
  if ($?1 == 0) { define 1 ? { (0) x-log scale off, (1) x-log scale on }}
  if ('$1' == 'x') {return}
  define ixlog $1
  if ($ixborne == 0 && $irhoT == 0) {
    if ($ixlog == 1) {
      if ($xinf < 0) {
        define xinf 0}\
      else {
        define xinf $(lg($xinf))}
      define xsup $(lg($xsup))}\
    else {
      define xinf $(10.**$xinf)
      define xsup $(10.**$xsup)}
    define fx1 $xinf
    define fx2 $xsup
  }

ylog 01
  #set y-log axis
  if ($?1 == 0) { define 1 ? { (0) y-log scale off, (1) y-log scale on }}
  if ('$1' == 'x') {return}
  define iylog $1
  define iyborne $1
  if ($iyborne == 0 && $irhoT == 0) {
    if ($iylog >= 1) {
      if ($yinf < 0) {
        define yinf 0}\
      else {
        define yinf $(lg($yinf))}
      define ysup $(lg($ysup))}\
    else {
      define yinf $(10.**$yinf)
      define ysup $(10.**$ysup)
    }
    define fy1 $yinf
    define fy2 $ysup
  }

xl 1
  limits $x"_"$(nn[($1-1)]) $yinf $ysup

defx 1
  #define x variable
  define _xsav $x
  if ($evolmode == 3 && '$(substr('$1 ',0,2))' != 'O_') {
    define 1  O_$1
  }
  define x $1
  if ($icheckvar == 1) {checkvar $1}\
  else {define ipass 1 }
  if ($ipass != 1) { 
    if ($ipass == 0) {
      define x $_xsav
      echo
      echo variable $1 not defined
      echo 
      return
    } else {
      #define evolmode $(abs($evolmode-1))
      #if ($evolmode == 0 && $istruc > 0) {gostruc}\
      #else { 
      #  if ($ievol > 0) {goevol}\
      #  else {define evolmode $(abs($evolmode-1))}
      #}
    }
  }
  units $x
  define unit_x "$!!unit_xy"
  define xsmooth $1
  if ('$1' == 'tinv') {
    define ixinv 1
    define itinv 1}\
  else {
    define ixinv 0
    define itinv 0}

chx 01
  if ($?1 == 0) { define 1 ? { new x axis variable ?}}
  if ('$1' != '$x') {
    define ipass 1
    if ($icheckvar == 1) {checkvar $1}
    if ($ipass !=1) { 
      echo variable $1 not defined
      return
    }
    define _iylog $iylog
    define iylog $ixlog
    define _yinf0 1.e37
    define _sup0 1.e37
    if ($(dimen(nn)) < $nstar ) { define nstar $(dimen(nn)) }
    do k = 1,$nstar {
      defylim $1 $k
      if ($k > 1) {
        if ($yinf0 < $_yinf0) { define _yinf0 $yinf0 }
        if ($ysup0 > $_ysup0) { define _ysup0 $ysup0 } }\
      else {
        define _yinf0 $yinf0
        define _ysup0 $ysup0 }
    }
    define dy0 (($_ysup0-$_yinf0)*0.01)
    if ( $dy0 == 0 ) {define dy0 ($_ysup0*0.0001)}
    define yinf0 ($_yinf0-$dy0)
    define ysup0 ($_ysup0+$dy0)
    defx $1
    xlim $yinf0 $ysup0
    define iylog $_iylog
    echo "new variable : "$1", new limits : "$yinf0 $ysup0
  }

xliml 02
   if ($?1 == 0) { define 1 ? { left x abscissa}}\
   else { define xinf $(lg($1)) }
   if ($?2 == 0) { define 2 ? { right x abscissa}}\
   else { define xsup $(lg($2)) }
   xlim $xinf $xsup
   
xlim 02	
   #set x limits
   define ixborne 0
   define ixinv 0
   define ixbtype 0
   if ($?1 == 0) { define 1 ? { left x abscissa}}\
   else { define xinf $1 }
   if ($?2 == 0) { define 2 ? { right x abscissa}}\
   else { define xsup $2 }
   if ('$2' == 'x') {
     define ixbtype 2
     xborne
     define deltab (($xsup0-$xinf)*0.04)
     define xsup $($xsup0+0.9*$deltab)
   }
   if ('$1' == 'x') {
     define ixbtype 1
     xborne
     define deltab (($xsup-$xinf0)*0.04) 
     define xinf $($xinf0-0.9*$deltab)
   }
   if ($xinf > $xsup) {
     define ixinv 1
     define xinf $2
     define xsup $1 }\
   else {
     define ixinv 0
   }
   define fx1 $xinf
   define fx2 $xsup

ylim 02
   #set y limits
   define iyborne 0
   if ($?1 == 0) { define yinf ?}\
   else { define yinf $1 }
   if ($?2 == 0) { define ysup ?}\
   else { define ysup $2 }
   if ('$2' == 'x') {
     yborne $kippen_type
     define ysup $($ysup0-0.9*$deltabsup)
   }
   if ('$1' == 'x') {
     yborne $kippen_type
     define yinf $($yinf0+0.9*$deltabsup)
   }
   if ($yinf > $ysup) {
     define iyinv 1
     define yinf $2
     define ysup $1 }\
   else {
     define iyinv 0
   }
   define fy1 $yinf
   define fy2 $ysup


#####################
### plotting graphs
#####################

units 1
   #set units
   define unit_xy cgs
   if ('$1' == 'LHe' || '$1' == 'L') {define unit_xy L_\odot}
   if ('$1' == 'T' || '$1' == 'Tc' || '$1' == 'Teff') {define unit_xy K}
   if ('$1' == 'nsh') {define unit_xy x}
   if ('$1' == 'model') {define unit_xy x }
   if ('$1' == 'Hp')  {define unit_xy cm}
   if ('$1' == 'Lr')  {define unit_xy L_\odot}
   if ('$1' == 'xmr') {define unit_xy ("Mr\/M")}
   #if ('$1' == 'xmr') {define unit_xy "scaled mass"}
   if ('$1' == 'xr')   {define unit_xy R_\odot}
   if ('$1' == 'r')   {define unit_xy R_\odot}
   if ('$1' == 'R')   {define unit_xy R_\odot}
   if ('$1' == 'M')  {define unit_xy M_\odot}
   if ('$1' == 'env_Mb')  {define unit_xy M_\odot}
   if ('$1' == 'Mr')  {define unit_xy M_\odot}
   #if ('$1' == 'xr')  {define unit_xy "R/Ro" }
   if ('$1' == 'r')  {define unit_xy "R_\odot" }
   if ('$1' == 't' || '$1' == 'ts' ) {define unit_xy yr}
   if ('$1' == 'tinv' ) {define unit_xy yr}
   if ('$1' == 'dt') {define unit_xy yr}
   if ('$1' == 'tdiff') {define unit_xy yr}
   if ('$1' == 'tconv') {define unit_xy yr}
   if ('$1' == 'tcond') {define unit_xy yr}
   if ('$1' == 'NLi') {define unit_xy "dex"}
   if ('$1' == 'NLi7') {define unit_xy "dex"}
   if ('$1' == 't8') {define unit_xy "10^8yr"}
   if ('$1' == 't9') {define unit_xy "10^9yr"}

axis_label 1
  define 1 $(substr('$1 ',2,0))
  #if ($?1 == 0) { define 1 ? {Variable to labelize?}}
  define label ('$1')
  if ('$1' == 'CFe')    {define label ('[C/Fe]')}
  if ('$1' == 'NFe')    {define label ('[N/Fe]')}
  if ('$1' == 'OFe')    {define label ('[O/Fe]')}
  if ('$1' == 'NaFe')   {define label ('[Na/Fe]')}
  if ('$1' == 'AlFe')   {define label ('[Al/Fe]')}
  if ('$1' == 'MgFe')   {define label ('[Mg/Fe]')}
  if ('$1' == 'FeH')    {define label ('[Fe/H]')}
  if ('$1' == '12C13C') {define label ('^{12}C/^{13}C')}
  if ('$1' == 'Mbol')   {define label ('M_{bol}')}
  if ('$1' == 'Mlos')   {define label {\dot{M}  (M_\odot/yr)}}
  if ('$1' == 'v')      {define label ('v  (km/s)')}
  if ('$1' == 'vsini')  {define label ('v.sini  (km/s)')}
  if ('$1' == 'Teff')   {define label ('T_{eff}  (K)')}
  if ('$1' == 'Prot')   {define label ('P_{rot}  (d)')}
  if ('$1' == 'logg')   {define label ('log g')}
  if ('$1' == 'T')      {define label ('T  (K)')}
  if ('$1' == 'v0')     {define label ('v_{esc,0}  (km s^{-1})')}
  if ('$1' == 'vh')     {define label ('v_{esc,h}  (km s^{-1})')}

checkvar 1
  #variables checkings
  set _plotvar = 'test'
  if ($evolmode == 0 && $istruc > 0) {set _plotvar = strucvar_$sformat_$(nn[0])}
  if (($evolmode == 1 || $evolmode == 2) &&  $ievol > 0) {set _plotvar = evolvar_$eformat_$(nn[0])}
  if ($evolmode == 3 &&   $iobs > 0) {set _plotvar = obsvar_AGB}
  if ('_plotvar' == 'test') {
    echo Wrong evolmode -- aborted
    return
  }
	define ipass 0
  foreach _xxvar _plotvar {
    if ('$_xxvar' == '$1') { define ipass 1 }
  }
  if ($evolmode >= 2) { return}
	if ($ipass == 0 && $icheckvar == 1) {
    #echo WARNING !!!!! checkvar
    set _nnsav = nn
    define icheckvar 0
    define evolmode $(abs($evolmode-1))
    if ($evolmode == 1 && $ievol > 0) { set nn = $(filevol[0]) }\
    else { if ($istruc > 0) {set nn = $(filestruc[0]) }}
    if ( $(nn[0]) != 0) {
      checkvar $1
      set nn = _nnsav
      delete _nnsav
      return }\
    else {
      set nn = _nnsav
      delete _nnsav
    }
  }
  if ($icheckvar == 0) {
    define evolmode $(abs($evolmode-1))
    define icheckvar 1
    if ($ipass == 1) {define ipass -1 }
  }

checknn
  if ($ichecknn == 0) {
    define ipass 0
    return
  }
  if ($(dimen(nn)) < $nstar) {define nstar $(dimen(nn))}
  if ($nstar == 1 && $(nn[0]) == 999 ) {
     define ipass 0
     return}
  if ($evolmode == 0 && $istruc > 0) {set _readfile = filestruc}
  if (($evolmode == 1 || $evolmode == 2) &&  $ievol > 0) {set _readfile = filevol}
  if ($evolmode == 3 &&   $iobs > 0) {set _readfile = fileobs}
  if ($(dimen(_readfile)) < $nstar) {define nstar $(dimen(_readfile))}
  set dimen(npass) = 0
  foreach n nn {
    foreach _xxvar _readfile {
      if ($_xxvar == $n) { set npass = npass concat $n }
    }
  }
  define _npass (dimen(npass))
  define ipass ($nstar-$_npass)
  if ($ipass != 0) {
    echo
    echo bad STAR number : $ipass star(s) badly referenced in vector nn
    echo
  }
  echo
  
logerrX 3 # syntax: logerr x y error, where x is logged, and error isn't
          # adapted from logerr (in utils)
		SET _x = 10**$1
		SET d_x = LG(_x + $3) - $1 ERRORBAR $1 $2 d_x 1
		SET d_x = $1 - LG(_x - $3) ERRORBAR $1 $2 d_x 3
		DELETE _x DELETE d_x
    
plot 03
  #plotting routine
  if ($?1 == 0) { define 1 ? {Arg 1 : variable name} }
  if ($?2 == 0) { define 2 1 }
  if ($?3 == 0) { define 3 0 }
  checknn
  if ($irecall == 0) { define recall <plot $1 $2 $3> }
  define irecall 0 
  if ($ipass != 0) {
    echo not passed
    return
  }
  if ($evolmode == 3) {
    foreach n nn {
      set _y_$n = O_$1""_$n
    }
    define _tempY "O_$1"
    define 1 $_tempY
  }
	if ($icheckvar == 1) {
    checkvar $1
    if ($ipass != 1) { 
      echo
      if ($ipass == 0) {
        echo variable $1 not defined}\
      else {
        if ($evolmode == 0) { echo $1 : evolution variable, use defx }\
        else  { echo $1 : structural variable, use defx }
      }
      echo
      return }
  }
  if ('$x' == 'tm' || '$x' == 'ts') {
    define _test 0
    foreach n nn {
       if ($imshift_$n == 0 && '$x' == 'tm') {define _test 1}
       if ($itshift_$n == 0 && '$x' == 'ts') {define _test 1}
    }
    if ($_test != 0) {
      echo
      echo variable $x not defined for all the selected stars
      return
    }
  }
  define y $1
  if ( $(dimen(nn)) < $nstar ) { define nstar $(dimen(nn)) }
  if ($iexpand == 1) {expand 0.9}
  define ysmooth $1
  if ($iunits == 1) {
    units $1
    define unit_y $unit_xy}
  if ($ierase == 1) {erase}
  xborne
  if ($ixborne == 1) {
    define xinf $xinf0
    define xsup $xsup0}\
  else {    
    if ($xinf > $xsup0 || $xsup < $xinf0) {
      echo
      echo bad limits 1 : $x must range between [$xinf0 $xsup0]
      return
    }
  }
  if ($evolmode == 3) {
    yborne _y $2 $3
  } else {
    yborne $1 $2 $3
  }
	if ($iyborne == 1) {
    define yinf $yinf0
    define ysup $ysup0}\
  else {
    if ($yinf > $ysup0 || $ysup < $yinf0) {
      echo bad limits 2 : $1 must range between [$yinf0 $ysup0]
      echo
      return
    }
  }
  limits $xinf $xsup $yinf $ysup
  if ($ixinv == 1) {limits $xsup $xinf $yinf $ysup}
  if ($iyinv == 1) {limits $xinf $xsup $ysup $yinf}
  if ($iyinv == 1 && $ixinv == 1) {limits $xsup $xinf $ysup $yinf}
  if ($iexpand == 1) {expand 1.2}
  if ($ibox == 1) { box $iibox}
  if ($itoplabel == 1) {
    if ($evolmode == 1 || $evolmode == 2) {
      define name "$namee_$(nn[0])" }\
    else {
      if ($evolmode == 3) {
        define name "$nameo_$(nn[0])" }\
      else {
        define name "$names_$(nn[0])"
      }
    }
    toplabel \-2\t File : $(quote_TeX('$name')) : \ $(substr('$!date',0,12) + substr('$!date',15,0))
  }
  if ($evolmode != 3) {
    if ($ixlabel == 1 && $ixlog == 0) {xlabel $(quote_TeX('$x')) ($unit_x)}
    if ($ixlabel == 1 && $ixlog == 1) {xlabel $(quote_TeX('log $x')) ($unit_x)}
    if ($iylabel == 1 && $iylog == 0) {ylabel $(quote_TeX('$1')) ($unit_y)}
    if ($iylabel == 1 && $iylog >= 1) {ylabel $(quote_TeX('log $1')) ($unit_y)}
  }\
  else {
    if ($ixlabel == 1 && $ixlog == 0) {axis_label $x xlabel $label}
    if ($ixlabel == 1 && $ixlog == 1) {axis_label $x xlabel log $label}
    if ($iylabel == 1 && $iylog == 0) {axis_label $1 ylabel $label}
    if ($iylabel == 1 && $iylog >= 1) {axis_label $1 ylabel log $label}
  }
  foreach n nn {
    define jline (_index(nn,$n) % $nlines)
    define jcolor (_index(nn,$n) % $ncolors)
    if ($iltype == 1 && $nstar > 1) {ltype $(line_name[$jline])}
    if ($ictype == 1 && $nstar > 1) {ctype $(color_name[$jcolor])}
    if ($nxsmooth_$n > 2) {
      set var = x_temp_$n
      set mvar = model_$n
      do k=1,$nsmooth { smoothvar $nxsmooth_$n $ibeg_$n $iend_$n }
      set x_temp_$n = var
    }
    if ($nysmooth_$n > 2) {
      set var = y_temp_$n
      set mvar = model_$n
      do k=1,$nsmooth { smoothvar $nysmooth_$n $ibeg_$n $iend_$n }
      set y_temp_$n = var
    }
    lweight $ilweight
    if ($ipoints == 1) {
      define _iltype $iltype
      ltype 0
      ptype $(ptype_name[_index(nn,$n)% $nptype])
      points x_temp_$n y_temp_$n
      define iltype $_iltype }\
    else {
      if (($evolmode == 1 && $itshift_$n == 0) || $evolmode == 0 ) {
        if ($ihrd == 1) {
          if ($(dimen(_x_temp_$n)) > 0  && $evolmode == 1) {
            ctype 6 connect _x_temp_$n _y_temp_$n if (sphase_$n == 1)
            ctype 0 connect _x_temp_$n _y_temp_$n if (sphase_$n == 2)
            ctype 4 connect _x_temp_$n _y_temp_$n if (sphase_$n == 3)
            ctype 5 connect _x_temp_$n _y_temp_$n if (sphase_$n == 4)
            ctype 3 connect _x_temp_$n _y_temp_$n if (sphase_$n == 5)
            ctype 7 connect _x_temp_$n _y_temp_$n if (sphase_$n == 6)
            ctype pink connect _x_temp_$n _y_temp_$n if (sphase_$n > 6)
          }   
        } else {
          if ($ihisto == 0) { connect _x_temp_$n _y_temp_$n if (_x_temp_$n >= $xinf && _x_temp_$n <= $xsup) }\
          else { histogram _x_temp_$n _y_temp_$n if (_x_temp_$n >= $xinf && _x_temp_$n <= $xsup) }
        } 
      } else {
         if ($ihisto == 0) { connect _x_temp_$n _y_temp_$n if (_x_temp_$n >= $xinf && _x_temp_$n <= $xsup) }\
         else { histogram _x_temp_$n _y_temp_$n }
      }
      if ($ipoints == 2) { 
        define _iltype $iltype
        ltype 0
        ptype $(ptype_name[_index(nn,$n)% $nptype])
        points x_temp_$n y_temp_$n
        define iltype $_iltype 
      }
      if ($evolmode == 1 && $itick == 1) {
        if ($nstar == 1) { ctype orange3 }
        define lweight |
        define _iltype $iltype
        ltype 0
        define _ntick $(dimen(idxseq_$n)-1)
        set xtick = x_temp_$n
        define _wtick $(abs($ysup-$yinf)/50)
        if ($iyinv == 0) {
          define _ytick ($yinf+2*$_wtick)
          define _ytickb ($yinf+$_wtick)
          define _ytickl $($_ytick+$_wtick*.2) }\
        else {
          define _ytick ($ysup-2*$_wtick)
          define _ytickb ($ysup-$_wtick)
          define _ytickl $($_ytick-$_wtick*.2)
        }
        do k = 0,$_ntick {
          lweight 3
          define il $(idxseq_$n[$k])
          relocate $(xtick[$il]) $_ytickb
          draw $(xtick[$il]) $_ytick
          if ($iticklabel == 1) {
            lweight 1
            expand (0.6*$iticksize)
            if ($(xtick[$il]) >= $xinf && $(xtick[$il]) <= $xsup) {
              relocate $(xtick[$il]) $_ytickl
              putlabel 8 $(seq_$n[$k])
            }
            expand 1.2
          }
        }
        if ($nstar == 1) { ctype 0 }
        lweight $lweight
        ltype $_iltype
      }
      if ($evolmode == 1 && $iptick == 1) {
        define ctype |
        define ptype |
        define expand |
        define _ctype0 $ctype
        define _ptype0 "$ptype"
        define _expand0 $expand
        ptype 4 3
        expand 2
        ctype orange3
        set _xptick = _x_temp_$n[idxseq_$n]
        set _yptick = _y_temp_$n[idxseq_$n]
        points _xptick _yptick
        ctype $_ctype0
        ptype $_ptype0
        expand $_expand0
      }
    }
  }
  if ($iexpand == 1) {expand 1.2}
  if ($iltype == 1) {ltype 0}
  if ($ictype == 1) {ctype 0}
  if ($iphase !=0 && ($evolmode == 1 || $evolmode == 2)) {echo WARNING : iphase = $iphase}
  if ($inorm !=0) {echo WARNING : inorm = $inorm}
  # OBSERVATIONS
  if ($evolmode == 3) {
    if ($ilimit==1) {
      echo Draw limit/error values (if provided)
      define _x $(substr('$x ',2,0))
      define _y $(substr('$1 ',2,0))
      foreach n nn {
        if ($ictype == 1 && $nstar > 1) {ctype $(color_name[_index(nn,$n)% $ncolors])}
        #X limit arrow
        if (is_vector(O_l_$_x""_$n) == 1) {
          set _temp = O_l_$_x""_$n*O_l_$_x""_$n if ($y""_$n<=1e36 && O_l_$_x""_$n<=1e36)
          if (sum(_temp) != 0) {
            set _Xl = x_temp_$n    if (O_l_$_x""_$n != 0 && $x""_$n <= 1e36 && $y""_$n<=1e36)
            set _Yl = y_temp_$n    if (O_l_$_x""_$n != 0 && $x""_$n <= 1e36 && $y""_$n<=1e36)
            set _lX = O_l_$_x""_$n if (O_l_$_x""_$n != 0 && $x""_$n <= 1e36 && $y""_$n<=1e36)
            define _dx $(0.10*($xsup-$xinf))
            do i = 0,$(dimen(_Xl)-1) {
              if (_Xl[$i]<1e36 && _Yl[$i]<1e36 && _lX[$i]<1e36) {
                draw_arrow $(_Xl[$i]) $(_Yl[$i]) $(_Xl[$i]+_lX[$i]*$_dx) $(_Yl[$i])
              }
            }
          }
        }
        #Y limit arrow
        if (is_vector(O_l_$_y""_$n) == 1) {
          set _temp = O_l_$_y""_$n*O_l_$_y""_$n if ($x""_$n<=1e36 && O_l_$_y""_$n<=1e36)
          if (sum(_temp) != 0) {
            set _Xl = x_temp_$n    if (O_l_$_y""_$n != 0 && $x""_$n <= 1e36 && $y""_$n<=1e36)
            set _Yl = y_temp_$n    if (O_l_$_y""_$n != 0 && $x""_$n <= 1e36 && $y""_$n<=1e36)
            set _lY = O_l_$_y""_$n if (O_l_$_y""_$n != 0 && $x""_$n <= 1e36 && $y""_$n<=1e36)
            define _dy $(0.10*($ysup-$yinf))
            do i = 0,$(dimen(_Xl)-1) {
              if (_Xl[$i]<1e36 && _Yl[$i]<1e36 && _lY[$i]<1e36) {
                draw_arrow $(_Xl[$i]) $(_Yl[$i]) $(_Xl[$i]) $(_Yl[$i]+_lY[$i]*$_dy)
              }
            }
          } 
        } 
      }
    }
    if ($ierror == 1) {
      if ($iglobalerror == 1) {
        echo Global error in all data points with deltaX=$errorX -- deltaY=$errorY
        foreach n nn {
          if ($ictype == 1 && $nstar > 1) {ctype $(color_name[_index(nn,$n)% $ncolors])}
          if ($ixlog == 0) {
            error_x x_temp_$n y_temp_$n $errorX
          } else {
            logerr x_temp_$n y_temp_$n $errorX
          }
          if ($iylog == 0) {
            error_y x_temp_$n y_temp_$n $errorY
          } else {
            logerr x_temp_$n y_temp_$n $errorY 
          }            
        }
      } else {
        foreach n nn {
          if ($ictype == 1 && $nstar > 1) {ctype $(color_name[_index(nn,$n)% $ncolors])}
          # X axis
          if (is_vector(O_e_$_x""_$n) == 1) {
            set _x_temp_$n = x_temp_$n       if (O_e_$_x""_$n<1e36 && $x""_$n <= 1e36 && $y""_$n<=1e36)
            set _y_temp_$n = y_temp_$n       if (O_e_$_x""_$n<1e36 && $x""_$n <= 1e36 && $y""_$n<=1e36)
            set _O_e_$_x""_$n = O_e_$_x""_$n if (O_e_$_x""_$n<1e36 && $x""_$n <= 1e36 && $y""_$n<=1e36)
            if ($ixlog == 0) {
              error_x _x_temp_$n _y_temp_$n _O_e_$_x""_$n
            } else {
              logerrX _x_temp_$n _y_temp_$n _O_e_$_x""_$n
            }
          }          
          # Y axis
          if (is_vector(O_e_$_y""_$n) == 1) {
            set _x_temp_$n = x_temp_$n       if (O_e_$_y""_$n<1e36 && $x""_$n <= 1e36 && $y""_$n<=1e36)
            set _y_temp_$n = y_temp_$n       if (O_e_$_y""_$n<1e36 && $x""_$n <= 1e36 && $y""_$n<=1e36)
            set _O_e_$_y""_$n = O_e_$_y""_$n if (O_e_$_y""_$n<1e36 && $x""_$n <= 1e36 && $y""_$n<=1e36)
            if ($iylog == 0) {
              error_y _x_temp_$n _y_temp_$n _O_e_$_y""_$n
            } else {
              logerr _x_temp_$n _y_temp_$n _O_e_$_y""_$n
            }
          }
        }
      }
    }
    ctype black
  }

_index 2
  #internal macro
  set $0 = do(0,dimen($1)-1) if ($1 == $2)

plotl 03	
  #plot log ($1/$2-$3)
  if ($?1 == 0) { define 1 ? {Arg 1 : variable name} }
  if ($?2 == 0) { define 2 1 }
  if ($?3 == 0) { define 3 0 }
  define _iylog $iylog
  define iylog 1
  if ($irecall == 0) { 
    define recall <plotl $1 $2 $3>
    define irecall 1 }
  plot $1 $2 $3
  define iylog $_iylog

plotlg 03 
  #plot log ($1/$2-$3)
  if ($?1 == 0) { define 1 ? {Arg 1 : variable name} }
  if ($?2 == 0) { define 2 1 }
  if ($?3 == 0) { define 3 0 }
  define _iylog $iylog
  define iylog 2
  if ($irecall == 0) { 
    define recall <plotllog $1 $2 $3>
    define irecall 1 }
  plot $1 $2 $3
  define iylog $_iylog

plotabs 03
  #plot |$1/$2-$3|
  if ($?1 == 0) { define 1 ? {Arg 1 : variable name} }
  if ('$1' == 'x') {return}
  if ($?2 == 0) { define 2 1 }
  if ('$1' == 'x') {return}
  if ($?3 == 0) { define 3 0 }
  if ('$1' == 'x') {return}
  foreach n nn {
    set _ytemp = $1_$n/$2+$3+1e-31
    set abs_$1_$n = abs(_ytemp)
    set pos_$1_$n = abs(_ytemp) if (_ytemp < 0)
    set pos_x_$n = $x"_"$n if (_ytemp < 0)
    if ($ixlog == 1) {set pos_x_$n = lg(pos_x_$n) }
  }
  if ($irecall == 0) { 
    define recall <plotabs $1 $2 $3>
    define irecall 1 }
  define _checkvar $icheckvar
  define icheckvar 0
  plot abs_$1 $2 $3
  define icheckvar $_checkvar
  savevar 0
  ix 0
  iy 0
  define ibox 0
  define itoplabel 0
  define ixlabel 0
  define iylabel 0
  #expand 1
  foreach n nn {
    define _posdim dimen(pos_x_$n)
    if ($_posdim > 0) {
      if ($ictype == 1) {
        ctype $(color_name[_index(nn,$n)%$ncolors])
      }
      define _iltype $iltype
      ltype 0
      ptype $(ptype_name[_index(nn,$n)%$nptype])
      if ($iylog == 1) {
        points pos_x_$n (lg(pos_$1_$n))}\
      else {
        if ($iylog == 2) {
          define lweight |
          lweight $($lweight+3)
          connect _x_temp_$n y_temp_$n if($1_$n<0)
          lweight $lweight
        } else {
          points pos_x_$n pos_$1_$n
        }
      }
      define iltype $_iltype
    }
  }
  ctype 0
  restorevar 0

plotabslg 03
  #plot log |$1/$2-$3| 
  if ($?1 == 0) { define 1 ? {Arg 1 : variable name} }
  if ($?2 == 0) { define 2 1 }
  if ($?3 == 0) { define 3 0 }
  define _iaylog $iylog
  define iylog 2
  if ($irecall == 0) { 
    define recall <plotabslg $1 $2 $3>
    define irecall 1 }
  plotabs $1 $2 $3
  define iylog $_iaylog
  delete _iaylog

plotabsl 03
  #plot log |$1/$2-$3| 
  if ($?1 == 0) { define 1 ? {Arg 1 : variable name} }
  if ($?2 == 0) { define 2 1 }
  if ($?3 == 0) { define 3 0 }
  define _iaylog $iylog
  define iylog 1
  if ($irecall == 0) { 
    define recall <plotabsl $1 $2 $3>
    define irecall 1 }
  plotabs $1 $2 $3
  define iylog $_iaylog
  delete _iaylog

plotlog 01
  if ($?1 == 0) { define 1 ? {Arg 1 : variable name} }
  if ($irecall == 0) { 
    define recall <plotlog $1>
    define irecall 1 }
  define ylogl (lg($yinflog))
  if ($iunits == 1) {
    units $1
    define unit_y $unit_xy}
  if ($ierase == 1) {erase}
  ltype 0
  do k=1,$nstar {
    define j ($k-1)
    define jline ($j % $nlines)
    define jcolor ($j % $ncolors)
    if ($iltype == 1 && $nstar > 1) {ltype $(line_name[$jline])}
    if ($ictype == 1 && $nstar > 1) {ctype $(color_name[$jcolor])}
    set yvarp = $1_$(nn[$j]) if ($1_$(nn[$j]) > $yinflog)
    set x1p = $x"_"$(nn[$j]) if ($1_$(nn[$j]) > $yinflog)
    set yvarn = $1_$(nn[$j]) if ($1_$(nn[$j]) < 0 && abs($1_$(nn[$j])) > $yinflog)
    set x1n = $x"_"$(nn[$j]) if ($1_$(nn[$j]) < 0 && abs($1_$(nn[$j])) > $yinflog)
    define n1 dimen(x1p)
    define n2 dimen(x1n)
    define nn ($n1+$n2)
    set xx = 1,$nn
    set yy = 1,$nn
    set zz = 1,$nn
    do i = 1,($n1-1) {
      set xx[$i] = x1p[$i]
      set yy[$i] = yvarp[$i]
      set zz[$i] = 1}
    do i = $n1,($n1+$n2-1) {
      define ii ($i-$n1)
      set xx[$i] = x1n[$ii]
      set yy[$i] = -yvarn[$ii] 
      set zz[$i] = -1}
    sort {xx yy zz}
    set yy = lg(yy)
    define kk ($k-1)
    ltype $kk
    set var = yy
    set xvar = $xsmooth"_"$(nn[$j])
    if ($nxsmooth_$(nn[$j]) > 2) {smoothvar $nxsmooth_$(nn[$j]) $ibeg_$(nn[$j]) $iend_$(nn[$j])}
    define xx $(zz[1])
    window 1 -2 1 2
    #window 1 1 1 1
    if ($iylabel == 1) {ylabel $(quote_TeX('$1 < 0            log (|$1|)            $1 > 0'))}
    define yinfn (-$yinf)
    define ysupn (2*$ylogl-$yinfn)
    define yinfp (2*$ylogl-$ysup)
    if ($xx == 1) { limits $xinf $xsup $yinfp $ysup }
    if ($xx == -1) { limits $xinf $xsup $yinfn $ysupn }
    relocate $(xx[1]) $(yy[1])
    do i = 1,($n1+$n2-1) {
      define i1 ($i+1)
      define xx $(zz[$i])
      if ($xx == 1) { limits $xinf $xsup $yinfp $ysup }
      if ($xx == -1) { limits $xinf $xsup $yinfn $ysupn }
      draw $(xx[$i]) $(var[$i]) }
  }
  window 1 -4 1 4
  #window 1 -2 1 2
  limits $xinf $xsup $ylogl $ysup 
  box 0 2 1 0
  window 1 -4 1 3
  #window 1 -2 1 1
  limits $xinf $xsup $yinfn $ylogl
  box 0 2 0 0
  window 1 1 1 1

nameobject 01
  # indicate name of Star/Object in previous graph
  # mode observation only

  if ($evolmode != 3) {
    mode
    echo For mode = 2 only
    return
  }

  if ($?1 == 0) { define 1 ? {Variable with object names?}}
  
  if ($ierase == 1) {erase}
  foreach n nn {
    define jcolor (_index(nn,$n) % $ncolors)
    ctype $(color_name[$jcolor])
    alpha_poi $x""_$n $y""_$n O_$1_$n
  }
  ctype black
  if ($ibox == 1) { box $iibox }
  if ($ixlabel == 1) { axis_label $x xlabel $label }
  if ($iylabel == 1) { axis_label $y ylabel $label }


##################################################################
### plot ratio of two variables from the stars listed in vector nn
##################################################################

plotR 02
  #plot $1/$2
  if ($?1 == 0) { define 1 ? {Arg 1 : variable name 1} }
  if ('$1' == 'x') {return}
  if ($?2 == 0) { define 2 ? {Arg 2 : variable name 2} }
  if ('$2' == 'x') {return}
  define _iylabel $iylabel
  iylabel 0
  foreach n nn {
    if ($evolmode != 3) {
      set Ratio_$n = $1_$n/$2_$n 
    } else {
      set O_Ratio_$n = O_$1_$n/O_$2_$n
    }
  }
  define _checkvar $icheckvar
  define icheckvar 0
  if ($irecall == 0) { 
    define recall <plotR $1 $2>
    define irecall 1 }
  if ($iabsolute == 0) { plot Ratio }\
  else { plotabs Ratio}
  if ($_iylabel == 1) {
    define iylabel $_iylabel
    if ($iylog == 0 ) { 
       if ($iabsolute == 0 ) { ylabel $1/$2 }\
       else { ylabel |$1/$2| } }\
    else { 
       if ($iabsolute == 0 ) { ylabel log($1/$2)}\
       else { ylabel log|$1/$2| } }
  }
  define icheckvar $_checkvar

plotlR 02
  #plot log($1/$2)
  define _iylog $iylog
  define iylog 1
  if ($irecall == 0) { 
    define recall <plotlR $1 $2>
    define irecall 1 }
  plotR $1 $2
  define iylog $_iylog

plotabsR 02
  #plot |$1/$2|
  define _iabsolute $iabsolute
  define iabsolute 1
  if ($irecall == 0) { 
    define recall <plotabsR $1 $2>
    define irecall 1 }
  plotR $1 $2
  define iabsolute $_iabsolute

plotabslR 02
  #plot log(|$1/$2|)
  define _iylog $iylog
  define iylog 1
  if ($irecall == 0) { 
    define recall <plotabslR $1 $2>
    define irecall 1 }
  plotabsR $1 $2
  define iylog $_iylog


#############################################################
### plot ratio of a same variable from 2 different stars
#############################################################

plotdiff 02
  # find ratio of a given quantity ($1) for the star selected in vector nn
  # star may have not the same length
  # if $2 is given, use it as reference, otherwise use nn[0]
  # Need that "x" variable is monotone
  if ($?1 == 0) { define 1 ? {Arg 1 : variable name } }
  if ('$1' == 'x') {return}
  if ($?2 == 0) { 
    echo No reference star is given, use $(nn[0]) instead
    define 2 (nn[0])
  }
  sv 5

  set _mymin = $xinf
  set _mymax = $xsup
  foreach n nn {
    vecminmax $x""_$n min max
    set _mymin = _mymin concat <$min>
    set _mymax = _mymax concat <$max>
  }
  vecminmax _mymin _ttt max
  vecminmax _mymax min _ttt
  
  erase
  ie 0
  define _xsav $x
  foreach n nn {
    set xx_$n = 0,100
    set xx_$n = xx_$n/100*($max-$min)+$min
    interp2 $x""_$n $1_$n xx_$n yy_$n
  }
  icheck 0
  foreach n nn {
    set ratio_$n = abs(yy_$n/yy_$2)
  }

  window 1 -2 1 2
  define iibox <0 2>
  iylabel 0 ixlabel 0
  defx xx
  plot yy
  if ($iylog == 1) {ylabel log $(quote_TeX('$1'))  }\
  else {ylabel $(quote_TeX('$1'))}
    
  window 1 -2 1 1
  define iibox <1 2>
  iylog 0
  plot ratio
  xlabel $(quote_TeX('$_xsav'))
  ylabel $(quote_TeX('Ratio: $1 (ref: $2)'))
 
  w
	rv 5

plotldiff 02 
  # find ratio (in log) of a given quantity ($1) 
  # for the star selected in vector nn
  # star may have not the same length
  # if $2 is given, use it as reference, otherwise use nn[0]
  define _iylog $iylog
  define iylog 1
  if ($irecall == 0) { 
    define recall <plotldiff $1 $2>
    define irecall 1 }
  plotdiff $1 $2
  define iylog $_iylog


plotD 03
  #plot $1_$2/$1_$3
  if ($?1 == 0) { define 1 ? {Arg 1 : variable name } }
  if ('$1' == 'x') {return}
  if ($?2 == 0) { define 2 ? {Arg 2 : star1 absolute number} }
  if ('$2' == 'x') {return}
  if ($?3 == 0) { define 3 ? {Arg 3 : star2 absolute number} }
  if ('$3' == 'x') {return}
  if ( $(dimen($1"_"$2)) !=  $(dimen($1"_"$3))) {
    echo dimensions of vectors $1"_"$2 and $1"_"$3 differ
    echo try plotdiff instead
    return
  }
  define _iylabel $iylabel
  define _nstar $nstar
  iylabel 0
  set _nn = nn
  nn $2
  #set _den = $1"_"$3 ? ($1"_"$3 !=0 ) : 1
  set _den = ($1"_"$3 !=0 ) ? $1"_"$3 : 1
  set _num = $1"_"$2
  set Ratio_$2 = _num/_den
  define _checkvar $icheckvar
  define icheckvar 0
  if ($irecall == 0) { 
    define recall <plotD $1 $2 $3>
    define irecall 1 }
  if ($iabsolute == 0) { plot Ratio }\
  else { plotabs Ratio}
  if ($_iylabel == 1) {
    define iylabel $_iylabel
    if ($iylog == 0 ) { 
       if ($iabsolute == 0 ) { ylabel $1\_$2/$1\_$3 }\
       else { ylabel |$1\_$2/$1\_$3| } }\
    else { 
       if ($iabsolute == 0 ) { ylabel log($1\_$2/$1\_$3)}\
       else { ylabel log(|$1\_$2/$1\_$3|) }
    }
  }
  delete _num
  delete _den
  delete Ratio_$2
  define icheckvar $_checkvar
  set nn = _nn
  define nstar $_nstar

plotlD 03
  #plot log($1_$2/$1_$3)
  define _iylog $iylog
  define iylog 1
  if ($irecall == 0) { 
    define recall <plotlD $1 $2 $3>
    define irecall 1 }
  plotD $1 $2 $3
  define iylog $_iylog

plotabsD 03
  #plot |$1_$2/$1_$3|
  define _iabsolute $iabsolute
  define iabsolute 1
  if ($irecall == 0) { 
    define recall <plotabsD $1 $2 $3>
    define irecall 1 }
  plotD $1 $2 $3
  define iabsolute $_iabsolute

plotabslD 03
  #plot log|$1_$2/$1_$3|
  define _iylog $iylog
  define iylog 1
  if ($irecall == 0) { 
    define recall <plotabslD $1 $2 $3>
    define irecall 1 }
  plotabsD $1 $2 $3
  define iylog $_iylog

#######
## zoom
#######

zoom
  # Select two points on the X11 graph and replot it.
  echo Select two coordinates.
  echo Exit with `q'.
  define _ix $ixborne
  define _iy $iyborne
  define _defx $x
  c
  if (dimen(_Xcursor)<2) {
    echo Abording - Not enough points selected
    return }
  define _xinf $xinf
  define _xsup $xsup
  define _yinf $yinf 
  define _ysup $ysup
  if (($(_Xcursor[0]) < $(_Xcursor[1]) && $ixinv == 0) || ($(_Xcursor[0]) > $(_Xcursor[1]) && $ixinv == 1)) {
    xlim $(_Xcursor[0]) $(_Xcursor[1]) }\
  else {
    xlim $(_Xcursor[1]) $(_Xcursor[0]) }
  if (($(_Ycursor[0]) < $(_Ycursor[1]) && $iyinv == 0) || ($(_Ycursor[0]) > $(_Ycursor[1]) && $iyinv == 1)) {
    ylim $(_Ycursor[0]) $(_Ycursor[1]) }\
  else {
    ylim $(_Ycursor[1]) $(_Ycursor[0]) }
  echo limits $xinf $xsup $yinf $ysup
  $recall
  if ($_ix == 1) { 
    ix 1 }\
  else {
   define xinf $_xinf
   define xsup $_xsup }
  if ($_iy == 1) {
    iy 1 }\
  else {
    define yinf $_yinf 
    define ysup $_ysup }

zoomx
  zoom
  if ($(_Xcursor[0]) < $(_Xcursor[1]) && $ixinv == 0) {
    xlim $(_Xcursor[0]) $(_Xcursor[1])
  } else {
    xlim $(_Xcursor[1]) $(_Xcursor[0])
  }


###############################
####  plot cumulative functions
###############################

frequ 04
  if ($?1 == 0) { define 1 ? {Arg 1 : variable name }}
  if ('$1' == 'x') {return}
  if ($?2 == 0) { define 2 ? {Arg 2 : bin size }}
  if ('$2' == 'x') {return}
  # 3rd argument (optional): weight variable (usually dt)
  # 4rd argument (optional): minimum value to start binning
  savevar 0
  if ($irecall == 0) { 
    define recall <frequ $1 $2>
    define irecall 1 }
  local define _xlab "$!1"
  if ($evolmode == 3) {
    foreach n nn {
      set O_tempY_$n = O_$1_$n if (O_$1_$n<1e36)
    }
    define 1 "O_tempY"
    ip 0
  }
  set max = 0
  set min = 0
  foreach n nn {
    vecminmax $1_$n mymin mymax
    if (min[0]==0 || min[0]>$mymin) {set min = $mymin}
    if (max[0]<$mymax) {set max = $mymax}
  }
  if ($?4 == 1) { set min = $4 }
  define dx $2
  set nbr = int((max-min)/$dx)
  echo Use $(nbr) bins between $(min) -- $(max)  (bin length: $2) $3
  foreach n nn {
    set dimen(tempX_$n) = $(nbr)
    set dimen(tempY_$n) = $(nbr)
    set _temp = ($?3 == 1) ? $3_$n : 1+0*$1_$n
    #set _temp = 1+0*$1_$n
    do j = 0,nbr+1{
      set tempX_$n[$j] = min+$j*$2
      set _temp2 = _temp if ($1_$n>=$(tempX_$n[$j]) && $1_$n<$(tempX_$n[$j]+$2))
      set tempY_$n[$j] = sum(_temp2)
    }
    if ($?mynorm == 1) { 
      set  tempY_$n = tempY_$n/$( ($?3 == 1) ? sum(_temp) : $(dimen($1_$n)) ) 
    }
    if ($evolmode == 3) {
      set O_tempY_$n = tempY_$n
      set O_tempX_$n = tempX_$n
    }
  }
  if ($ierase == 1) {erase}
  ie 0
  define icheckvar 0
  local define _myinv $ixinv
  defx tempX
  ixinv $_myinv
  echo end defx 
  ixlabel 0  iylabel 0
  define ihisto 0
  define ihisto 1
  #if ($iyborne == 1) {
  #  yborne tempY
  #  ylim 0 $ysup0
  #}
  plot tempY
  if ($ixlabel == 1) {
    if ($evolmode == 2) {
      xlabel $(quote_TeX('$_xlab')) ($unit_x)
    } else {
      xlabel $(quote_TeX('$1')) ($unit_x)
    }
  }
  ylabel $( ($?mynorm==1) ? 'N/N_{tot}' : 'N' )
  define ichecvar 1
  restorevar 0

frequnorm 04
  if ($?1 == 0) { define 1 ? {Arg 1 : variable name }}
  if ('$1' == 'x') {return}
  if ($?2 == 0) { define 2 ? {Arg 2 : bin size }}
  if ('$2' == 'x') {return}
  define mynorm 1
  if ($irecall == 0) { 
    define recall <frequnorm $1 $2 $3 $4>
    define irecall 1 }
  frequ $1 $2 $3 $4
  define mynorm delete



#####################
####  reading data
#####################

reload 1
  if ($evolmode == 0) {
    readsi $names_$1 $1
    return
  }
  if ($evolmode == 1) {
    readi $namee_$1 $dir_$1 0 0 $1
    return
  }
  if ($evolmode == 3) {
    reado $nameo_$1 $1
    return
  }


 #____________________
 ## structure files ##
 #--------------------

readsi 02
  #read structure files
  if ($?1 == 0) { define 1 ? {Arg 1 : file name} }
  if ('$1' == 'x') {return}
  if ($?2 == 0) { define 2 ? {Arg 2 : star index number} }
  if ('$2' == 'x') {return}
  if ($2 <= 0) {
    echo
    echo index must be > 0
    echo file not read $2
    return
  }
  define _file ('$smhome/DATA/$1.p0')
  define metal -9.999
  if(! is_file("$_file")) {
    echo file $_file not found
    return }\
  else {
    data "$!_file"
    read filetype 15.s
    define sformat_$2 $(filetype[0])
    delete filetype
    read ! {metal 16}
  }
  if ('$sformat_$2' != 'AGB' && '$sformat_$2' != 'alpha' && '$sformat_$2' != 'ALPHA' && '$sformat_$2' != 'SN' && '$sformat_$2' != 'MASSIVE') {
    echo wrong file format : $sformat_$2, check header of $_file
    return
  }

  if ($evolmode != 0) {gostruc}
  if ($ievol == 0 && $istruc == 0 ) {set nn = $2}
  define istruc ($istruc+1)
  define irotbin 0
  define sFeH_$2 $(metal[0])
  define ireads_$2 $2
  set filestruc = 0,$_nfilentry,1
  set filestruc = 0*filestruc
  define ij 0
  do i = 0,$_nfilentry {
    if ($ireads_$i != 0) {
      set filestruc[$ij] = $i
      define ij ($ij+1)
    }
  }
  set filestruc = filestruc if (filestruc > 0)

  delete ij
  define nseq_$2 0
  define names_$2 $1

  set dimen(strucvar_$sformat_$2) = 0.s
  set dimen(PXabund_$sformat_$2) = 0.s
  do ij = 0,12 {
    define _file ('$smhome/DATA/$1.p$ij')
    if(is_file("$_file")) {
      data "$!_file"
      read row _namep$ij 1.s
      define _nspec (dimen(_namep$ij)-1)
      if ($ij > 3 && $ij < 10) {
        set _namep$ij = 'PX'+_namep$ij
        set PXabund_$sformat_$2 = PXabund_$sformat_$2 concat _namep$ij }\
      else {
        set strucvar_$sformat_$2 = strucvar_$sformat_$2 concat _namep$ij
      }
      define Xname " "
      do k = 2,$_nspec {
        define kc $k
        if ($ij ==0 && $k == 15) { define kc $k.s }
        define Xname < $Xname $(_namep$ij[$k])"_"$2 $kc >
      }
      read < $Xname >
      define Xname delete
    }
  }
  define Mstar_$2 (MM_$2[0])
  define Lstar_$2 (LL_$2[0])
  define Rstar_$2 (RR_$2[0])
  define age_$2 (times_$2[0]/3.1557807e7)
  define iaccr $(iacc_$2[0])
  define irotbin_$2 $(irot_$2[0])
  define phases_$2 (npha_$2[0])
  define nshell_$2 (shell_$2[0])
  define nsp_$2 (nxsp_$2[0])
  define models_$2 (modl_$2[0])
  define dtn_$2 (tstep_$2[0])
  define binversion_$2 $(version_$2[0])

  set PXabund_$sformat_$2 = PXabund_$sformat_$2 if (PXabund_$sformat_$2 != 'PX\#' && PXabund_$sformat_$2 != 'PXnsh')
  set strucvar_$sformat_$2 = strucvar_$sformat_$2 if (strucvar_$sformat_$2 != '\#' && strucvar_$sformat_$2 != 'nsh')
  set strucvar_$sformat_$2 = <nsh > concat strucvar_$sformat_$2 concat PXabund_$sformat_$2

  if ($binversion_$2 < 292 ) { set yzi_$2 = (yzi_$2 == 1) ? -2 : 0 }
  # define new variables

  set nsh_$2 = 1,$(dimen(Lr_$2)),1
  set Lr_$2[0] = Lr_$2[1]
  set tconv_$2 = tconv_$2/3.1557807e7  

  if ('$sformat_$2' != 'alpha' && '$sformat_$2' != 'ALPHA') {
    set PXNn_$2 = rho_$2*6.02e23*PXn_$2
    set PXSi_$2 = PXSi28_$2+PXSi29_$2+PXSi30_$2
    set PXS_$2 = PXS32_$2+PXS34_$2
    set PXNe_$2 = PXNe20_$2+PXNe21_$2+PXNe22_$2
    set PXO_$2 = PXO16_$2+PXO17_$2+PXO18_$2
    set PXMg_$2 = PXMg24_$2+PXMg25_$2+PXMg26_$2
    set newvar = <PXNn PXSi PXS PXNe PXO PXMg>
    set strucvar_$sformat_$2 = strucvar_$sformat_$2 concat newvar
  }
  set enuc_$2 = enucl_$2+enupla_$2+enunucl_$2+1.e-20
  set efermieV_$2 = 5.110281011e5*(sqrt(1.e0+1.018e-4*(rho_$2/mue_$2)**0.666666667)-1.)  #eV
  set efermi_$2 = 8.187578e-7*(sqrt(1.e0+1.018e-4*(rho_$2/mue_$2)**0.666666667)-1.)  #cgs
  set Mr_$2 = xmr_$2*$Mstar_$2
  set xr_$2 = r_$2/$Rstar_$2
  set g_$2 = 2.723e4*Mr_$2/(r_$2*r_$2+1.e-10)+1.e-20
  set g_$2[0] = g_$2[1]
  set Hp_$2 = P_$2/(g_$2*rho_$2)
  set Hp_$2[0] = Hp_$2[1]
  set newvar = <enuc Mr xr g Hp efermi>
  set strucvar_$sformat_$2 = strucvar_$sformat_$2 concat newvar

  if (! is_vector(Dconv_$2)) { set Dconv_$2 = dturb_$2 }
  #set y = lg(x > 0 ? x : 1e-37)
  #if (Dconv_$2 != 0) {
    set rdiff = r_$2 ? (Dconv_$2 > 1) : -1
    define ndiff (dimen(rdiff)-1)
    define diffover $(rdiff[$ndiff]-rdiff[0])
    set tdiff_$2 = (21.6852+2*lg($diffover)-lg(Dconv_$2+1.)-7.4991) ? (Dconv_$2 != 0) : 1.e37
    set tdiff_$2 = 10**tdiff_$2
    set tdiff1_$2 = Hp_$2*Hp_$2/(10**Dconv_$2)/3.1557312e8
  #}
  # set dtirad_$2 = 7.732495e0*rho_$2*PXH1_$2*sqrt(T_$2)*$dtn_$2
  define ns (dimen(Mr_$2)-1)
  define ns1 ($ns+1)
  set dimen(dr) = $ns1
  set dimen(dm) = $ns1
  set dimen(Leint) = $ns1
  set dimen(Legrav) = $ns1
  set dimen(Lenuc) = $ns1
  set dimen(Lenucl) = $ns1
  set dimen(Lenupla) = $ns1
  set dimen(Lenunucl) = $ns1
  do i = 1,$ns {
    define i1 ($i-1)
    define ddm (Mr_$2[$i]-Mr_$2[$i1])
    define ddr (r_$2[$i]-r_$2[$i1])
    set dm[$i1] = $ddm
    set dr[$i1] = $ddr
  }
  set dm_$2 = dm
  set Mrc_$2 = Mr_$2+dm*0.5
  set rc_$2 = r_$2+dr*0.5
  set Leint_$2 = cumulate(eint_$2*dm)*0.5197
  set Legrav_$2 = cumulate(egrav_$2*dm)*0.5197
  set Lenuc_$2 = cumulate(enuc_$2*dm)*0.5197
  set Lenunucl_$2 = cumulate(enunucl_$2*dm)*0.5197
  set Lenupla_$2 = cumulate(enupla_$2*dm)*0.5197
  set Lenucl_$2 = Lenuc_$2-Lenupla_$2-Lenunucl_$2
 
  if ($iaccr == 1 || $iaccr == 2) { set lacc_$2 = 3.1393e2*Mr_$2/(1.e-10+r_$2) }
  set tcond_$2 = 1.049e-4*cp_$2*kap_$2*(Hp_$2*rho_$2)**2/(T_$2)**3  #in yr
  set tkap_$2 = 3385.3737*kap_$2*dm_$2/(rho_$2*r_$2**4+1.e-30)  #in yr
  #set ttherm_$2 = 1.1186e17*cp_$2*kap_$2/(T_$2**3*r_$2**4+1.e-30)*dm_$2**2  #in yr
  set tenuc_$2 = 3.168788e-8/abs(denucdt_$2+1.e-30)  #in yr
  set tlum_$2 = 3.168788e-8/abs(dlumdt_$2+1.e-30)  #in yr
  set theat_$2 = 3.168788e-8/abs(heat_$2+1.e-30)  #in yr
  set tcomp_$2 = 3.168788e-8/abs(comp_$2+1.e-30)  #in yr
  set teint_$2 = 3.168788e-8*abs(eint_$2/etherm_$2)  #in yr
  set tdyn_$2 = dr/cs_$2
  set tigni_$2 =3.168788e-8*cp_$2*T_$2/(abs(enucl_$2)+1.e-30)  #in yr
  set vlib_$2 = 3.73092e5*sqrt(g_$2*r_$2)
  set newvar = < tcond tenuc theat tcomp teint tdyn tigni vlib dm >
  set strucvar_$sformat_$2 = strucvar_$sformat_$2 concat newvar

  set mui_$2 = mu_$2*mue_$2/(mue_$2-mu_$2)
  set Mack_$2 = abs(u_$2/cs_$2)
  set tkap_$2[0] = $(tkap_$2[1])
  set tlum_$2[0] = $(tlum_$2[1])
  define mcore 0
  define menv 0
  define icore_$2 0
  define ienv_$2 0
  do i = 1,$ns-1 {
    define i1 ($i-1)
    if (($(PXH1_$2[$i]) > 1e-9 && $(PXH1_$2[$i1]) < 1e-9 && $icore_$2 == 0) || $icore_$2 < 0) {
      if ($(yzi_$2[$i]) < -1) { 
        define mcore $(Mr_$2[$i])
        define icore_$2 $(-$i) 
      } else {
        define icore_$2 $($i+1)
      }
    }
    if ($(PXH1_$2[$i]) > 0.3 && $(yzi_$2[$i]) < -1 && $(yzi_$2[$i1]) > 0 && $(T_$2[$i]) < 1.7e8) { 
        define menv $(Mr_$2[$i]) 
        define ienv_$2 ($i+1)
    }
  }
  set newvar = <Leint Legrav Lenucl Lenuc Lenunucl Lenupla tcond Mack mui Mrc rc>
  set strucvar_$sformat_$2 = strucvar_$sformat_$2 concat newvar

  if ($irotbin_$2 > 0) {
    set omKepler_$2 = 1593.86*omega_$2*r_$2**1.5/(Mr_$2+1e-20)**0.5
    set omKepler_$2[0] = omKepler_$2[1]
    set momspec_$2=  omega_$2*r_$2*r_$2*$rsun**2
    set dimen(momang_$2) = $ns1
    do i = 1,$ns {
      define i1 ($i-1)
      set momang_$2[$i] =  momang_$2[$i1]+omega_$2[$i]*r_$2[$i]*r_$2[$i]*$rsun**2*dm_$2[$i]
    }
    set strucvar_$sformat_$2 = strucvar_$sformat_$2 concat < omKepler momspec momang>
  }
  echo "    readsi" $1 $2


***** delete structure record

dels 01
  #delete structure entry
  if ($?1 == 0) { define 1 ? { enter absolute star number} }
  if ('$1' == 'x') {return}
  foreach _xelem strucvar_$sformat_$1 {
    delete _xelem_$1 }
  define isave_$1 0
  define ireads_$1 0
  define nseq_$1 0
  define names_$1 delete
  define sformat_$1 delete
  define irotbin_$1 delete
  define sformat_$1 delete
  define binversion_$1 delete
  define Mstar_$1 delete
  define Lstar_$1 delete
  define Rstar_$1 delete
  define age_$1 delete
  define phases_$1 delete
  define nmod_$1 delete
  define models_$1 delete
  define nfilestruc (dimen(filestruc)-1)
  set _filestruc = filestruc
  delete filestruc
  set dimen(filestruc) = $nfilestruc
  define ij -1
  do i = 0,$nfilestruc {
    define _entry $(_filestruc[$i])
    if ($_entry != $1) {
      define ij ($ij+1)
      set filestruc[$ij] = $_entry
    }
  }


 #____________________
 ## evolution files ##
 #--------------------



readi 05
  #read evolution files
  if ($?1 == 0) { define 1 ? { Arg 1 : filename}}
  if ('$1' == 'x') {return}
  if ($?2 == 0) { define 2 ? { Arg 2 : directory}}
  if ('$2' == 'x') {return}
  if ($?3 == 0) { define 3 ? { Arg 3 : first line}}
  if ('$3' == 'x') {return}
  if ($?4 == 0) { define 4 ? { Arg 4 : last line}}
  if ('$4' == 'x') {return}
  if ($?5 == 0) { define 5 ? { Arg 5 : star index number}}
  if ('$5' == 'x') {return}
  if ($5 <= 0) {
    echo
    echo index must be > 0
    echo file not read
    return
  }
  if ($evolmode != 1) {goevol}
  define dir "$2"
  define _file ('$smevol/$2/$1.hr')
  define _filegz ('$_file.gz')
  define do_unzip 0
  if(is_file("$_file")) {
    define dir "$2" }\
  else {
    if(is_file("$_filegz")) {
      define do_unzip 1
      echo copying files $smevol/$2/$1 to $smevol/tmp
      !\cp -f $smevol/$2/$1".hr.gz" $smevol/tmp
      !\cp -f $smevol/$2/$1".v*.gz" $smevol/tmp
      !\cp -f $smevol/$2/$1".s*.gz" $smevol/tmp
      !\cp -f $smevol/$2/$1".c*.gz" $smevol/tmp
      define _filetp ('$smevol/$2/$1.tpagb0.gz')
      if(is_file("$_filetp")) { !\cp -f $smevol/$2/$1".tpagb*" $smevol/tmp }
      define _fileflame ('$smevol/$2/$1.flame.gz')
      if(is_file("$_fileflame")) { !\cp -f $smevol/$2/$1".flame.gz" $smevol/tmp }
      define dir "tmp" }\
    else {
      echo file $_file not found
      return
    }
  }

  set z = -99
  set feh = -99
  define _tmpfile ('$smevol/$dir/$1.s1')
  if ($do_unzip == 1) { !gunzip -f $_tmpfile".gz" }
  data "$!_tmpfile" lines 2 2
  read ! {z 6}
  define Z_$5 $(z[0])
  read ! '%54s %f7.4' {c feh}
  define FeH_$5 $(feh[0])

  define dir_$5 $2
  define _tmpfile ('$smevol/$dir/$1.hr')
  define _tmpfilegz ('$smevol/$dir/$1.hr.gz')
  if(is_file("$_tmpfilegz")) {
    !gunzip -f $_tmpfilegz
  }  
  data "$!_tmpfile"
  read row _v 1.s
  define eformat_$5 $(_v[0])
  if ( !('$eformat_$5' == 'alpha' || '$eformat_$5' == 'ALPHA' || '$eformat_$5' == 'SN' || '$eformat_$5' == 'AGB' || '$eformat_$5' == 'MASSIVE')) {
    echo 
    echo   format $eformat_$5 not recognized : header problem
    echo   reading aborted
    echo
    return
  }
  define eversion_$5 $(_v[4])

  if ($ievol == 0 && $istruc == 0 ) {set nn = $5}
  define ievol ($ievol+1)
  define ireadi_$5 $5
  set filevol = 0,$_nfilentry,1
  set filevol = 0*filevol
  define ij 0
  do i = 0,$_nfilentry {
    if ($ireadi_$i != 0) {
      set filevol[$ij] = $i
      define ij ($ij+1)
    }
  }
  delete ij
  set filevol = filevol if (filevol > 0)

  define itinv_$5 0
  define isconv_$5 X
  define itshift_$5 0
  define imshift_$5 0
  define namee_$5 $1
  define ibeg ($3+8)
  define iv11 0
  define iend $4
  if ($iend != 0) {define iend ($iend+8)}

  set dimen(evolvar_$eformat_$5) = 0.s
  set dimen(Xabund_$eformat_$5) = 0.s
  set dimen(Yabund_$eformat_$5) = 0.s
  set dimen(Yabund) = 0.s
  define nevolfile (dimen(suffix_name)-1)
  do ij = 0,$nevolfile {
    define _filegz ('$smevol/$dir/$1.$(suffix_name[$ij]).gz')
    if(is_file("$_filegz")) {
      !gunzip -f $_filegz
    }
    define _file ('$smevol/$dir/$1.$(suffix_name[$ij])')
    if(is_file("$_file")) {
      echo reading file $_file
      if ('$(suffix_name[$ij])' == 'v11') {define iv11 1}
      data "$!_file" lines $ibeg $iend
      read row _namev$ij 4.s
      define _nspec (dimen(_namev$ij)-1)
      # central abundances
      if ($ij < 5) { 
        set _namev$ij = 'X'+_namev$ij
        set Xabund_$eformat_$5 = Xabund_$eformat_$5 concat _namev$ij 
      }
      # surface abundances
      if ($ij > 4 && $ij < 10) {
        set Yabund = Yabund concat _namev$ij 
        set _namev$ij = 'Y'+_namev$ij
        set Yabund_$eformat_$5 = Yabund_$eformat_$5 concat _namev$ij 
      } 
      if ($ij > 9) {set evolvar_$eformat_$5 = evolvar_$eformat_$5 concat _namev$ij}
      define Xname " "
      do k = 0,$_nspec {
        define j ($k+1)
        define Xname < $Xname $(_namev$ij[$k])"_"$5 $j >
      }
      read < $Xname >
      if ('$(suffix_name[$ij])' == 'hr') {
        set ijk = 0,$(dimen(model_$5)-1)
        define _nspec (dimen(_namev$ij)+1)
        define Xname < _seq $_nspec".s" >
        read ! < $Xname >
        set idxseq_$5 = ijk if ( _seq !='' && _seq !='>' && _seq !='<' && _seq !='|' )
        set modseq_$5 = model_$5-1 if ( _seq !='' && _seq !='>' && _seq !='<' && _seq !='|' )
        set rseq = _seq if ( _seq !='' && _seq !='>' && _seq !='<' && _seq !='|' )
        set _seq = ( rseq == '"####"' ) ? '0000' : rseq
        set seq_$5 = number(_seq)
      }
      delete _seq
      delete rseq
      define Xname delete
      if ('$dir' == 'tmp' && $do_unzip == 1 ) { !\rm -f $_file }
    }
  }
  define eline_$5 $(dimen(model_$5))
  set Yabund_$eformat_$5 = Yabund_$eformat_$5 if (Yabund_$eformat_$5 != 'Ymodel')
  set Xabund_$eformat_$5 = Xabund_$eformat_$5 if (Xabund_$eformat_$5 != 'Xmodel')
  set evolvar_$eformat_$5 = evolvar_$eformat_$5 if (evolvar_$eformat_$5 != '\#' && evolvar_$eformat_$5 != 'model')
  set evolvar_$eformat_$5 = <model> concat evolvar_$eformat_$5 concat Xabund_$eformat_$5 concat Yabund_$eformat_$5


  # define new variables

  #set XHe3_$5 = 1.e-30
  #set YHe3_$5 = 1.e-30
  if ('$eformat_$5' == 'AGB' || '$eformat_$5' == 'SN') { 
    set XNn_$5 = rhoc_$5*6.02e23*Xn_$5
    set trad_$5 = dt_$5*rhoc_$5*Xn_$5*sqrt(Tc_$5)*7.73249*3.1557807e7
    set evolvar_$eformat_$5 = evolvar_$eformat_$5 concat < trad xNn >
    set Zcent_$5 = 1.0-XH1_$5-XH2_$5-XHe3_$5-XHe4_$5
    set Zsurf_$5 = 1.0-YH1_$5-YH2_$5-YHe3_$5-YHe4_$5
    set env_Mt_$5 = M_$5-env_Mb_$5
    set evolvar_$eformat_$5 = evolvar_$eformat_$5 concat < Zcent Zsurf env_Mt>
  }

  define dimension (dimen(R_$5)-1)
  define dimension_$5 dimension
  define Rstar (R_$5[$dimension])
  define Mstar (M_$5[$dimension])
  set Mbol_$5 = 4.76-2.5*lg(L_$5)
  set LHe_$5 = LHe_$5+1.0
  set LH_$5 = LH_$5+1.0
  set LC_$5 = LC_$5+1.0
  set LNee_$5 = abs(LNe_$5)
  if ($iv11 == 1) {
    set Irad_$5 = k2rad_$5*M_$5*R_$5*R_$5
    set Iconv_$5 = k2conv_$5*M_$5*R_$5*R_$5
    set Itot_$5 = Iconv_$5+Irad_$5
    set Lacc_$5 = (3.13031e7*M_$5*maccr_$5/R_$5)
    #set Jtot_$5 = (Jconv_$5+Jrad_$5)
    set maccr_$5 = maccr_$5+1.e-15
    #set omK_$5 = OmS_$5/(6.67259e-8*M_$5*1.989e33/(R_$5*6.96e10)**3)**0.5
    #set evolvar_$eformat_$5 = evolvar_$eformat_$5 concat < Irad Iconv Itot Lacc maccr Jtot >
    set evolvar_$eformat_$5 = evolvar_$eformat_$5 concat < Irad Iconv Itot Lacc maccr omK Mbol>
  }
  set conv1_Tb_$5 = 10.**conv1_Tb_$5
  set conv1_rob_$5 = 10.**conv1_rob_$5
  set conv1_Rb_$5 = conv1_Rb_$5*R_$5
  set conv1_Tt_$5 = 10**conv1_Tt_$5
  set conv1_rot_$5 = 10**conv1_rot_$5
  set conv1_Rt_$5 = conv1_Rt_$5*R_$5
  set env_Tb_$5 = 10**env_Tb_$5
  set env_rob_$5 = 10**env_rob_$5
  set env_Rb_$5 = env_Rb_$5*R_$5
  set Hburn_Rb_$5 = Hburn_Rb_$5*R_$5
  set Hburn_Rt_$5 = Hburn_Rt_$5*R_$5
  set Heburn_Rb_$5 = Heburn_Rb_$5*R_$5
  set Heburn_Rt_$5 = Heburn_Rt_$5*R_$5
  if ( $eversion_$5 >= 2.05 ) {
    set Cburn_Rb_$5 = Cburn_Rb_$5*R_$5
    set Cburn_Rt_$5 = Cburn_Rt_$5*R_$5
    set Neburn_Rb_$5 = Neburn_Rb_$5*R_$5
    set Neburn_Rt_$5 = Neburn_Rt_$5*R_$5
    if ( '$eformat_$5' == 'SN' ) {
      set Oburn_Rb_$5 = Oburn_Rb_$5*R_$5
      set Oburn_Rt_$5 = Oburn_Rt_$5*R_$5
      set Siburn_Rb_$5 = Siburn_Rb_$5*R_$5
      set Siburn_Rt_$5 = Siburn_Rt_$5*R_$5
    }
  }
  set tinv_$5 = 0*t_$5
  set ts_$5 = 0*t_$5
  set tm_$5 = 0*t_$5
  set tKH_$5 = (3.13031e7*M_$5*M_$5/(R_$5*L_$5))
  set Mm_$5 = (M_$5/M_$5[0])
  set evolvar_$eformat_$5 = evolvar_$eformat_$5 concat < tKH ts tm tinv LNee Mm>  
  set YH_$5 = YH1_$5+YH2_$5
  set YHe_$5 = YHe3_$5+YHe4_$5
  set YLi_$5 = YLi6_$5+YLi7_$5
  set YC_$5 = YC12_$5+YC13_$5+YC14_$5
  set YN_$5 = YN14_$5+YN15_$5
  set YO_$5 = YO15_$5+YO16_$5+YO17_$5+YO18_$5
  set YCNO_$5 = YC_$5+YN_$5+YO_$5
  set YF_$5 = YF19_$5
  set YNa_$5 =YNa23_$5
  set YMg_$5 = YMg24_$5+YMg25_$5+YMg26_$5
  set YAl_$5 = YAl26g_$5+YAl26m_$5+YAl27_$5

  set conv0_Rb_$5 = (env_Rb_$5 > 0) ? env_Rb_$5 : R_$5 
  set conv0_Mb_$5 = (env_Mb_$5 > 0) ? env_Mb_$5 : M_$5
  set conv0_Rt_$5 = R_$5
  set conv0_Mt_$5 = M_$5

  define _filegz ('$smevol/$dir/$1.tpagb0.gz')
  if(is_file("$_filegz")) {
    define _filegz ('$smevol/$dir/$1.tpagb*.gz')
    !gunzip -f $_filegz
  }
  define _file ('$smevol/$dir/$1.tpagb0')  
  if (is_file("$_file")) {
    readtpagb $1 $2 $5
    define _file ('$smevol/$dir/$1.tpagb*')
    if ('$dir' == 'tmp' && $do_unzip == 1 ) { !\rm $_file }
  }

  define _filegz ('$smevol/$dir/$1.flame.gz')
  if(is_file("$_filegz")) {
    !gunzip -f $_filegz
  }
  define _file ('$smevol/$dir/$1.flame')
  if (is_file("$_file")) {
     readflame $1 $2 $5 1
     if ($do_unzip == 1 && '$dir' == 'tmp') { !\rm -f $smevol/tmp/$1".flame" }
  }
  define do_unzip delete 
  echo "metallicity : [Fe/H] = "$FeH_$5
  echo "    readi" $1 $2 $3 $4 $5
  
***** delete evolution record

dele 01
  #delete evolution entry
  if ($?1 == 0) { define 1 ? { enter absolute star number} }
  if ('$1' == 'x') {return}
  set _nn = nn
  set nn = $1
  checknn
  if ($ipass != 0) {
    define ipass 0
    echo return checknn
    return
   }
  set nn = _nn
  delnn $1
  foreach _xelem evolvar_$eformat_$1 {
    delete _xelem_$1 }
  define ireadi_$1 0
  do i=0,$ntotconv {
    delete "conv"$i"Mb_"$1
    delete "conv"$i"Rb_"$1
  }
  define isave_$1 0
  define eline_$1 delete
  define namee_$1 delete
  define eformat_$1 delete
  define itinv_$1 0
  define itshift_$1 0
  define imshift_$1 0
  define dir_$1 delete
  define eversion_$1 delete
  define dimension_$1 delete
  define nfilevol (dimen(filevol)-1)
  set _filevol = filevol
  delete filevol
  set dimen(filevol) = $nfilevol
  define ij -1
  do i = 0,$nfilevol {
    define _entry $(_filevol[$i])
    if ($_entry != $1) {
      define ij ($ij+1)
      set filevol[$ij] = $_entry
    }
  }

readtpagb 04
  #read tpagb files
  icheck 0
  if ($?1 == 0) { define 1 ? { Arg 1 : filename}}
  if ($?2 == 0) { define 2 ? { Arg 2 : directory}}
  if ($?3 == 0) { define 3 ? { Arg 3 : star index number}}
  if ($3 <= 0) {
    echo
    echo index must be > 0
    echo file not read
    return
  }
  if ($?4 != 0) {
    if ($?eversion_$3 == 0) {define eversion_$3 2.90 }
    if ($?eformat_$3 == 0) {define eformat_$3 AGB }
    if ($ireadi_$3 == 0) { define ireadi_$3 $3 }
    if ($?namee_$3 == 0) {define namee_$3 $1 }
    if ($?evolvar_$eformat_$3 == 0) { set evolvar_$eformat_$3 = <" " > }
    set filevol = 0,$_nfilentry,1
    set filevol = 0*filevol
    define ij 0
    do i = 0,$_nfilentry {
      if ($ireadi_$i != 0) {
        set filevol[$ij] = $i
        define ij ($ij+1)
      }
    }
    delete ij
    set filevol = filevol if (filevol > 0)
    
    define dir "$2"
    define _file ('$smevol/$2/$1.tpagb1')
    define _filegz ('$_file.gz')
    if(is_file("$_file")) {
      define do_unzip 0
      define dir "$2" 
    } else {
      if(is_file("$_filegz")) {
        define do_unzip 1
        echo copying files $smevol/$2/$1 to $smevol/tmp
        !\cp -f $smevol/$2/$1".tpagb*" $smevol/tmp
        !gunzip -f $smevol/tmp/$1".tpagb*"
        define dir "tmp" 
      } else {
        echo file $_file not found
        return
      }
    }
  }

  do ij = 1,3 {
    define _file ('$smevol/$dir/$1.tpagb$ij')
    if(is_file("$_file")) {
      data "$!_file" lines 2 0
      read row _nametpagb$ij 1.s
      set evolvar_$eformat_$3 = evolvar_$eformat_$3 concat _nametpagb$ij
    }
    define _nspec (dimen(_nametpagb$ij)-1)
    define Xname " "
    do k = 0,$_nspec {
      define j ($k+1)
      define Xname < $Xname $(_nametpagb$ij[$k])"_"$3 $j >
    }
    read ! < $Xname >
    define Xname delete
    if ('$dir' == 'tmp' && $do_unzip == 1 ) { !\rm -f $_file }
  }
  if ($?4 != 0) { 
    define do_unzip delete 
    define eline_$3 $(dimen(npul_$3))
  }
  set pulse_Menv_$3 = Mtp_$3-pulse_Mbm_$3+pulse_dmmax_$3
  set dmloss_$3 = 0*pulse_Menv_$3+1e-10
  set dmcore_$3 = 0*pulse_Menv_$3+1e-10
  do k = 1,$(dimen(pulse_Menv_$3)-1) {
    set dmloss_$3[$k] = Mtp_$3[$($k-1)]-Mtp_$3[$k]
    set dmcore_$3[$k] = pulse_Mbm_$3[$k]-pulse_Mbm_$3[$($k-1)]
  }
  set Mlossit_$3 = dmloss_$3/(dtinter_$3+1e-3)

readflame 04
  #read flame files
  icheck 0
  if ($?1 == 0) { define 1 ? { Arg 1 : filename}}
  if ($?2 == 0) { define 2 ? { Arg 2 : directory}}
  if ($?3 == 0) { define 3 ? { Arg 3 : star index number}}
  if ($3 <= 0) {
    echo
    echo index must be > 0
    echo file not read
    return
  }
  define do_flunzip 0
  if ($?eformat_$3 == 0) {define eformat_$3 AGB }
  if ($?iread_$3 == 0) {define iread_$3 $3 }
  if ($?namee_$3 == 0) {define namee_$3 $1 }
  if ($?sFeH_$3 == 0) {define sFeH_$3 -10 }
  #if	($?evolvar_$eformat_$3 == 0) { set evolvar_$eformat_$3 = <" " > }
  if ($?4 == 0) {
    define dir "$2"
    define _file ('$smevol/$2/$1.flame')
    define _filegz ('$_file.gz')
    if(is_file("$_file")) {
      define dir "$2"
    } else {
      if(is_file("$_filegz")) {
        define do_flunzip 1
        echo copying files $smevol/$2/$1 to $smevol/tmp
        !\cp -f $_filegz $smevol/tmp
        !gunzip -f $smevol/tmp/$_filegz
        define dir "tmp" 
      } else {
        echo file $_file not found
        return
      }
    }
  }

  data "$!_file" lines 5 0
  read ! <modelf"_"$3 1 tf"_"$3 2 dtf"_"$3 3 flame_Mb"_"$3 5 flame_Mt"_"$3 6 flame_dm"_"$3 7 flame_Rb"_"$3 12 >
  read ! <flame_Tb"_"$3 14 flame_rob"_"$3 15 pflame_C12"_"$3 16 pflame_O16"_"$3 17 pflame_dm"_"$3 19 pflame_dr"_"$3 20 >
  read ! <pflame_smin"_"$3 21 pflame_smax"_"$3 22 dr_bff"_"$3 24 >
  read ! <dr_theo"_"$3 25 u_theo"_"$3 26 u_ff"_"$3 27 Lmin"_"$3 29 Lmaxcz"_"$3 30 nmove_theo"_"$3 31 nmove_real"_"$3 32 >
  read ! <flame_C12"_"$3 33 Lnu_pla_cbcz"_"$3 34 LC_cbcz"_"$3 35 Lgrav_cbcz"_"$3 36 Lnu_pla_rz"_"$3 37 LC_rz"_"$3 38 >
  read ! <Lgrav_rz"_"$3 39 tau_Lcbcz"_"$3 40 >

  set tmf = tf_$3
  set _tmf = 0*tmf
  set _dtf = dtf_$3
  define n (dimen(_tmf)-2)
  do k = 0,$n {
     define k1 ($k+1)
     set _tmf[$k1] = _tmf[$k]+_dtf[$k]
   }
  set tmf_$3 = _tmf
  delete _tmf
  if ('$dir' == 'tmp' && $do_flunzip == 1) { !\rm -f $smevol/tmp/$1.flame }


pf
  #plot flame
  plot flame_Mb
  iy 0
  plot flame_Mt
  iy 1

readhtml 05
  if ($?1 == 0) { define 1 ? { Arg 1 : filename}}
  if ('$1' == 'x') {return}
  if ($?2 == 0) { define 2 ? { Arg 2 : directory}}
  if ('$2' == 'x') {return}
  if ($?3 == 0) { define 3 ? { Arg 3 : first line}}
  if ('$3' == 'x') {return}
  if ($?4 == 0) { define 4 ? { Arg 4 : last line}}
  if ('$4' == 'x') {return}
  if ($?5 == 0) { define 5 ? { Arg 5 : star index number}}
  if ('$5' == 'x') {return}
  if ($5 <= 0) {
    echo
    echo index must be > 0
    echo file not read
    return
  }
  define ievol ($ievol+1)
  define ireadi_$5 $5
  define namee_$5 $1
  define nline ($3+3)
  define eversion_$5 000
  define eformat_$5 html
  set _varhtml1 = <model phase L Mbol Reff R Teff roeff geff M t>
  set _varhtml2 = <Tc rhoc etac conv1_Mb conv1_Rb Lnucl Lgrav k2conv k2rad>
  set _varhtml3 = <conv1_Mt conv1_Rt env_Mb env_Rb env_Tb env_rob>
  set _varhtml4 = <YH2 YHe3 YLi6 YLi7 YBe9 YB10 YB11>
  define _file ('$smevol/$2/$1.hrd')
  data "$!_file" lines $nline $4
  read { _x1v1 1 _x2v1 2 _x3v1 3 _x4v1 4 _x5v1 5 _x6v1 6 _x7v1 7 _x8v1 8 _x9v1 9 _x10v1 10 _x11v1 11 }
  define _file ('$smevol/$2/$1.var1')
  data "$!_file" lines $nline $4
  read { _x1v2 2 _x2v2 3 _x3v2 4 _x4v2 5 _x5v2 6 _x6v2 7 _x7v2 8 _x8v2 9 _x9v2 10}
  define _file ('$smevol/$2/$1.var2')
  data "$!_file" lines $nline $4
  read { _x1v3 2 _x2v3 3 _x3v3 4 _x4v3 5 _x5v3 6 _x6v3 7}
  define _file ('$smevol/$2/$1.xsurf')
  data "$!_file" lines $nline $4
  read { _x1v4 2 _x2v4 3 _x3v4 4 _x4v4 5 _x5v4 6 _x6v4 7 _x7v4 8}

  do i = 1,4 {
    define _nspec (dimen(_varhtml$i)-1)
    do k = 0,$_nspec {
      define j ($k+1)
      define X $(_varhtml$i[$k])"_"$5
      set $X = "_x"$j"v"$i
      delete "_x"$j"v"$i
    } 
  }
  set dimen(phase_$5) = $(dimen(model_$5))
  set phase_$5 = (Lnucl_$5 > 0.95*Lgrav_$5) ? 2 : 1      
  define dimension (dimen(R_$5)-1)
  define Rstar (R_$5[$dimension])
  set env_Tb_$5 = (10**(env_Tb_$5))
  set env_Rb_$5 = env_Rb_$5*R_$5



 #______________________
 ## observation files ##
 #----------------------

  
reado 02
  # 1: obs file,  2: logical number
  if ($?1 == 0) {define 1 ? {File to read (use lso for list) ?}}
  if ($?2 == 0) {define 2 ? {Logical number ?}}
  if ($evolmode != 3) {goobs}
  local define file "$!smobs/$!1.dat"
  if(! is_file("$file")) {
    echo  $file not exist -- Aborted
    return
  }
  echo Open $file
	data "$!file"
  local define line 1
  lines $line $line
  read {_nbrtable 1 src 4.s}
  echo Find $(_nbrtable) subtable(s).  
  read row _quantities 2.s
  read row _units 3.s
  local define _nbrelem $(dimen(_quantities)-1)
  define line 3
  do i = 1,_nbrtable {
    define k $($2+$i-1)
    define line $($line+1)
    lines $line $line
    read {_nbrdata 1 _info 3.s}
    define line $($line+1)
    define line2 $($line+_nbrdata-1)
    lines $line $line2
    define readline " "
    do j = 0,$_nbrelem {
      define readline <$readline O_$(_quantities[$j])_$k $(_units[$j]) >
    }
    read < $readline>
    define nameo_$k  $1
    define Subtable_$k  $i
    define SubtableInfo_$k  $(_info[0])
    define Src_$k  (src[0])
    define line $line2
  }
  define readline2 " "
  do j = 0,$_nbrelem {
    define ipass 0
    foreach _xxvar obsvar_AGB {    
      if ('$_xxvar' == 'O_$(_quantities[$j])') { define ipass 1 }
    } 
    if ($ipass != 1) {
      addvar O_$(_quantities[$j])
      define readline2 <$readline2 $(_quantities[$j])>
      if (STRLEN('$readline2') >= 70) {
        set obsvar = obsvar concat <'$readline2'>
        define readline2 " "
      }
    }
  }
  if ('$(substr('$readline2 ',0,2))' == '  ') {
    set obsvar = obsvar concat <'$readline2'>
  }
  echo End reading file
  echo Observation logical number $2 to $($2+$(_nbrtable)-1)
  do n = $2,$($2+$(_nbrtable)-1) {
    define add 1
    foreach f fileobs { if ($n == $f) {define add 0} }
    if ($add == 1) {set fileobs = fileobs concat <$n>}
  }

	do j = 0,$_nbrelem {
    define _evolobs  <$_evolobs $(_quantities[$j])_$k>
  }
  set evolobs = < $_evolobs >
  if ($iobs == 0) {
    define iobs 1
    nn $2,$($2+_nbrtable-1)
  }  
  # Clean variables
  #define file delete
  #define line delete
  #define line2 delete
  delete _quantities
  delete _units
  define _nbrelem delete
  delete _nbrtable 
  delete _nbrdata
  delete src
  delete _info
  delete readline
  
lso
  define _cmd {\ls $smobs/*.dat | perl -ne 's/.dat//; s/^.*\///; print ;'}
  echo Find following file in directory $smobs:
  !$_cmd

#####################################
###### HR diagram (hrgen, hriso, hrd)
#####################################


hrd 01
  #draw HR diagrams
  if ($?1 == 0) { define 1 ? { (0) your limits, (1) limits estimated : }}
  if ('$1' == 'x') {return}
  if ($irecall == 0) { 
    define recall <hrd 0>
    define irecall 1 }
  checknn
  if ($ipass != 0) {return}
  savevar 0
  echo "if ihrd = 1, different phases plotted with different line types"
  define x0 $x
  define xinf00 $xinf
  define xsup00 $xsup
  local define y0 $ysmooth
  if ($1 < 2) { 
    define ixinv 1
    define ixlog 1
    define x "Teff"
    define ysmooth "L"
    units Teff
    if ( $1 == 1 ) { 
      define ixborne 1 
      define iyborne 1
    } 
    plotl L }\
  else {
    define iyinv 1
    define x "BV"
    define ysmooth "L"
    if ( $1 == 3 ) { define ixborne 1 } 
    plot V 
  }      
  define xinf $xinf00
  define xsup $xsup00
  define x $x0
  define ysmooth $y0
  restorevar 0
  define irecall 0

colors
  echo 
  echo ________________________________________
  echo | MAGNITUDE - COLOR DIAGRAM SELECTION  |
  echo |                                      |
  echo |  0 : HRD                             |
  echo |  1 : Mbol versus Teff                |
  echo |  2 : V versus U-V                    |
  echo |  3 : U versus Teff                   |
  echo |  4 : V versus B-V                    |
  echo |  5 : V versus Teff                   |
  echo |  6 : B versus B-V                    |
  echo |  7 : B versus Teff                   |
  echo |  8 : R versus V-R                    |
  echo |  9 : R versus Teff                   |
  echo | 10 : I versus V-I                    |
  echo | 11 : I versus R-I                    |
  echo | 12 : I versus Teff                   |
  echo | 13 : J versus V-J                    |
  echo | 14 : J versus Teff                   |
  echo | 15 : K versus V-K                    |
  echo | 16 : K versus Teff                   |
  echo | 17 : L versus V-L                    |
  echo | 18 : L versus Teff                   |
  echo | 19 : V versus V-I                    |
  echo ________________________________________
  echo 

colcode 1
  define scol $1
  if ($scol == 0) {
    set x = lg(Teffiso)
    define labx "log (Teff)"
    set y = lg(Liso)
    define laby "log (L/L_\odot)"
  }
  if ($scol == 1) {
    set x = lg(Teffiso)
    define labx "log (Teff)"
    set y = Mbolisod
    define laby "M_{bol}"
  }
  if ($scol == 2) {
    set x = UV
    define labx "U-V"
    set y = V
    define laby "V"
  }
  if ($scol == 3) {
    set x = lg(Teffiso)
    define labx "log (Teff)"
    set y = U
    define laby "U"
  }
  if ($scol == 4) {
    set x = BV
    define labx "B-V"
    set y = V
    define laby "V"
  }
  if ($scol == 5) {
    set x = lg(Teffiso)
    define labx "log (Teff)"
    set y = V
    define laby "V"
  }
  if ($scol == 6) {
  set x = BV
  define labx "B-V"
  set y = B
    define laby "B"
  }
  if ($scol == 7) {
    set x = lg(Teffiso)
    define labx "log (Teff)"
    set y = B
    define laby "B"
  }
  if ($scol == 8) {
    set x = VR
    define labx "V-R"
    set y = R
    define laby "R"
  }
  if ($scol == 9) {
    set x = lg(Teffiso)
    define labx "log (Teff)"
    set y = R
    define laby "R"
  }
  if ($scol == 10) {
    set x = VI
    define labx "V-I"
    set y = I
    define laby "I"
  }
  if ($scol == 11) {
    set x = RI
    define labx "R-I"
    set y = I
    define laby "I"
  }
  if ($scol == 12) {
    set x = lg(Teffiso)
    define labx "log (Teff)"
    set y = I
    define laby "I"
  }
  if ($scol == 13) {
    set x = VJ
    define labx "V-J"
    set y = J
    define laby "J"
  }
  if ($scol == 14) {
    set x = lg(Teffiso)
    define labx "log (Teff)"
    set y = J
    define laby "J"
  }
  if ($scol == 15) {
    set x = VK
    define labx "V-K"
    set y = K
    define laby "K"
  }
  if ($scol == 16) {
    set x = lg(Teffiso)
    define labx "log (Teff)"
    set y = K
    define laby "K"
  }
  if ($scol == 17) {
    set x = VL
    define labx "V-L"
    set y = L
    define laby "L"
  }
  if ($scol == 18) {
    set x = lg(Teffiso)
    define labx "log (Teff)"
    set y = L
    define laby "L"
  }
  if ($scol == 19) {
    set x = VI
    define labx "V-I"
    set y = V
    define laby "V"
  }

isochron
  echo 
  echo Isochrons for HRDs mode initiated;
  echo variable selection: automatic, except axis properties
  echo Parameters must be defined in iso.par!
  colors
  define ispec 1
  erase
  isoinit

isoinit 1
  define scol $1
  !echo $user | $smprog/isochron.e
  data "isonbr"
  read { nseqr 1  nisor 2 }
  define nni1 1
  define nni2 (nseqr[0])
  ltype 0
  data "iso.out"
  read { Liso 3  Teffiso 5  Mboliso 7  Mbolisod 8  BC 9  UV 10  BV 11  VR 12  VI 13  VJ 14  VK 15  VL 16  U 17  V 18  B 19  R 20  I 21  J 22  K 23 L 24 }
  set RI = VI-VR
  colcode $scol
  define nn (dimen(x))  define nn1 ($nn-1)  define fx1 (x[0])  define fx2 (x[$nn1])  define fy1 (y[0])  define fy2 (y[$nn1])
  if ($ispec == 1) {
    limits x y
    if ($ixborne == 0 && $iyborne == 0) {
          if ($ixinv == 0 && $iyinv == 0) {limits $xinf $xsup $yinf $ysup}
          if ($ixinv == 0 && $iyinv == 1) {limits $xinf $xsup $ysup $yinf}
          if ($ixinv == 1 && $iyinv == 0) {limits $xsup $xinf $yinf $ysup}
          if ($ixinv == 1 && $iyinv == 1) {limits $xsup $xinf $ysup $yinf} }
    if ($ixborne == 0 && $iyborne == 1) {
          if ($ixinv == 0 && $iyinv == 0) {limits $xinf $xsup y}
          if ($ixinv == 0 && $iyinv == 1) {limits $xinf $xsup $fy2  $fy1}
          if ($ixinv == 1 && $iyinv == 0) {limits $xsup $xinf y}
          if ($ixinv == 1 && $iyinv == 1) {limits $xsup $xinf $fy2  $fy1} }
    if ($ixborne == 1 && $iyborne == 0) {
          if ($ixinv == 0 && $iyinv == 0) {limits x $yinf $ysup}
          if ($ixinv == 0 && $iyinv == 1) {limits x $ysup $yinf}
          if ($ixinv == 1 && $iyinv == 0) {limits $fx2 $fx1 $yinf $ysup}
          if ($ixinv == 1 && $iyinv == 1) {limits $fx2 $fx1 $ysup $yinf} }
    if ($ixborne == 1 && $iyborne == 1) {
          if ($ixinv == 0 && $iyinv == 1) {limits $fx1 $fx2 $fy2 $fy1}
          if ($ixinv == 1 && $iyinv == 0) {limits $fx2 $fx1 $fy1 $fy2}
          if ($ixinv == 1 && $iyinv == 1) {limits $fx2 $fx1 $fy2 $fy1} }
  } 
  if ($ibox == 1 && $ispec == 1) {box $iibox}
  if ($ispec == 1) {
    if ($itoplabel == 1) { 
       toplabel \-2\t File : $(quote_TeX('$name')) : \ $(substr('$!date',0,12) + substr('$!date',15,0))
    }
    if ($ixlabel == 1) {xlabel $(quote_TeX('$labx')) ($unit_x)}
    if ($iylabel == 1) {ylabel $(quote_TeX('$laby')) ($unit_y)}
  }
  do i = 0,nisor[0]-1 {
    data "iso.out" lines $nni1 $nni2
    read { Liso 3  Teffiso 5  Mboliso 7  Mbolisod 8  BC 9  UV 10  BV 11  VR 12  VI 13  VJ 14  VK 15  VL 16  U 17  V 18  B 19  R 20  I 21  J 22  K 23 L 24 }
    set RI = VI-VR
    colcode $scol
    isoplot
  }

isoplot
  define nisomax (nseqr[0]-1)
  if ($ispline == 1) {
    sort { x y }
    set u = x[0], x[$nisomax], 0.05*(x[$nisomax]-x[0])
    spline x y u v	
    connect u v	
    if ($ipoints == 1) {points u v} }\
  else { connect x y 
         if ($ipoints == 1) {points x y} }
  define nni1 ($nni1+nseqr[0])
  define nni2 ($nni2+nseqr[0])

hrgen
  echo 
  echo mode for Global HRD for a model grid initiated;
  echo variable selection: automatic, except axis properties
  echo Parameters must be defined in hrgen.par!
  colors
  erase
  define ispec 1
  hrgeninit
 

hrgeninit 1
  define scol $1
  !echo $user | $smprog/hrgen.e
  data "hrgnbr"
  read { nseqr 1  nhrgr 2 }
  define nni1 1
  define nni2 0
  data "hrg.out" lines $nni1 $nni2
  read { Liso 3  Teffiso 5  Mboliso 7  Mbolisod 8  BC 9  UV 10  BV 11  VR 12  VI 13  VJ 14  VK 15  VL 16  U 17  V 18  B 19  R 20  I 21  J 22  K 23 L 24 }
  set RI = VI-VR
  colcode $scol
  define nn (dimen(x))  define nn1 ($nn-1)
  set xx = x  set yy = y  sort{xx}  sort{yy}
  define fx1 (xx[0])  define fx2 (xx[$nn1])  define fy1 (yy[0])  define fy2 (yy[$nn1])
  limits x y
  if ($ixborne == 0 && $iyborne == 0) {
        if ($ixinv == 0 && $iyinv == 0) {limits $xinf $xsup $yinf $ysup}
        if ($ixinv == 0 && $iyinv == 1) {limits $xinf $xsup $ysup $yinf}
        if ($ixinv == 1 && $iyinv == 0) {limits $xsup $xinf $yinf $ysup}
:q        if ($ixinv == 1 && $iyinv == 1) {limits $xsup $xinf $ysup $yinf} }
  if ($ixborne == 0 && $iyborne == 1) {
        if ($ixinv == 0 && $iyinv == 0) {limits $xinf $xsup y}
        if ($ixinv == 0 && $iyinv == 1) {limits $xinf $xsup $fy2  $fy1}
        if ($ixinv == 1 && $iyinv == 0) {limits $xsup $xinf y}
        if ($ixinv == 1 && $iyinv == 1) {limits $xsup $xinf $fy2  $fy1} }
  if ($ixborne == 1 && $iyborne == 0) {
        if ($ixinv == 0 && $iyinv == 0) {limits x $yinf $ysup}
        if ($ixinv == 0 && $iyinv == 1) {limits x $ysup $yinf}
        if ($ixinv == 1 && $iyinv == 0) {limits $fx2 $fx1 $yinf $ysup}
        if ($ixinv == 1 && $iyinv == 1) {limits $fx2 $fx1 $ysup $yinf} }
  if ($ixborne == 1 && $iyborne == 1) {
        if ($ixinv == 0 && $iyinv == 1) {limits $fx1 $fx2 $fy2 $fy1}
        if ($ixinv == 1 && $iyinv == 0) {limits $fx2 $fx1 $fy1 $fy2}
        if ($ixinv == 1 && $iyinv == 1) {limits $fx2 $fx1 $fy2 $fy1} }
  if ($ibox == 1) {box $iibox}
  if ($itoplabel == 1) { 
    toplabel \-2\t File : $(quote_TeX('$name')) : \ $(substr('$!date',0,12) + substr('$!date',15,0))
  }
  if ($ixlabel == 1) {xlabel $(quote_TeX('$labx')) ($unit_x)}
  if ($iylabel == 1) {ylabel $(quote_TeX('$laby')) ($unit_y)}
  if ($ispec == 1 ) { ltype 0 }
  if ($ispec == 2 ) { ltype 1 }
  do i = 0,nseqr[0]-1 {
    define nni2 ($nni2+nhrgr[$i])
    data "hrg.out" lines $nni1 $nni2
    read { Liso 3  Teffiso 5  Mboliso 7  Mbolisod 8  BC 9  UV 10  BV 11  VR 12  VI 13  VJ 14  VK 15  VL 16  U 17  V 18  B 19  R 20  I 21  J 22  K 23 L 24 }
    set RI = VI-VR
    colcode $scol
    hrgenplot
  }
  ltype 0
  if ($ispec == 2 ) { isoinit $scol }

hrgenplot
  connect x y
  if ($ipoints == 1) {points x y}
  define nni1 ($nni1+nhrgr[$i])

hrgeniso
  echo 
  echo mode for Global HRD for a model grid and isochrones initiated;
  echo variable selection: by hand
  echo Parameters must be defined in hrgen.par and iso.par!
  colors
  erase
  define ispec 2
  hrgeninit
  
synthe
  echo 
  echo Synthetic HRD mode initiated;
  echo variable selection: by hand
  echo Parameters must be defined in synthe.par!
  echo 
  colors
  erase
  syntheinit

syntheinit 1
  define scol $1
  !echo $user | $smprog/synthe.e
  data "synthe.out"
  read { Liso 3  Teffiso 5  Mboliso 7  Mbolisod 8  BC 9  UV 10  BV 11  VR 12  VI 13  VJ 14  VK 15  VL 16  U 17  V 18  B 19  R 20  I 21  J 22  K 23 L 24 }
  set RI = VI-VR
  colcode $scol
  ptype 9 1
  points x y


#####################
### built-in commands
#####################

###rho-T diagrams

rhoT 01
  #plot rho-T diagrams
  savevar 0
  if ($evolmode == 0) {define 1 0}
  if ($?1 == 0) { define 1 ? { (0) rhoc-Tc/rho_max-Tmax, (1) rhoc-Tc, (2) rho_max-Tmax : }}
  if ('$1' == 'x') {return}
  if ($irecall == 0) { 
    define recall <rhoT $1>
    define irecall 1 }
  define irhoT 1
  define _ixlabel $ixlabel
  xlog 1
  ixlabel 0
  ixinv 0
  if ($evolmode == 1) {
    if ($1 == 0) {
      ctype red
      ltype 0
      defx rho_max
      plotl Tmax
      ix 0
      ie 0
      iy 0
      ctype 0
      ltype 2
      defx rhoc
      plotl Tc
      ltype 0 }\
    else {
      if ($1 == 1) {
        defx rhoc
        plotl Tc }\
      else {
        defx rho_max
        plotl Tmax }
    }
    if ($_ixlabel == 1) {xlabel log (\rho_c)} }\
  else {
    defx rho
    plotl T
    if ($_ixlabel == 1) {xlabel log (\rho)} }
  define irhoT 0
  restorevar 0
  define irecall 0

###Kippenhahn

kippenl 1
  #plot Kippenhahn diagram - log scale
  if ($?1 == 0) { define 1 ? { enter absolute star number}}
  if ('$1' == 'x') {return}
  define _iaylog $iylog
  define iylog 1
  if ($irecall == 0) { 
    define recall <kippenl $1>
    define irecall 1 }
  kippen $1
  define iylog $_iaylog
  delete _iaylog

kippen 01
  #plot Kippenhahn diagram
  #savevar 0
  if ($irecall == 0) {
    define recall <kippen $1>
    define irecall 1 }
  define in 0
  if ($evolmode == 0) {
    savevar 0
    goevol
    define in 1
  }
  if ($?1 == 0) { define 1 ? { enter absolute star number}}
  if ('$1' == 'x') {return}
  set _nntemp = nn
  define _xsav $x
  set nn = $1
  define _ilweight $ilweight
  define _iltype $iltype
  define _nstar $nstar
  define nstar 1
  checknn
  if ($ipass != 0) {
    set nn = _nntemp
    define x $_xsav
    define nstar $_nstar
    return}
  if ($evolmode == 0) {goevol}
  echo star "#" $1 :   $dir_$1"/"$namee_$1
  define ns ($1)
  lweight 0
  if ($itinv == 1 && $itinv_$ns == 0) {dtinv}
  xborne
  if ($ixborne == 1) { 
    define xinf $xinf0
    define xsup $xsup0}\
  else {
    if ($xinf > $xsup0 || $xsup < $xinf0) {
      echo
      echo bad limits 3 : $x must range between [$xinf0 $xsup0]
      return
    }
  }
  if ($iyborne == 1) {
    defylim $kippen_type 1
    if ($iylog == 1) {
       define yinf -6 }\
    else {
       define yinf 0 }
    define ysup $ysup0}
  if ($ierase == 1) {erase}
  if ($ixinv == 1) {
    limits $xsup $xinf $yinf $ysup}\
  else {
    limits $xinf $xsup $yinf $ysup}
  if ($ixlabel == 1 && $ixlog == 0) {xlabel $(quote_TeX('$x')) ($unit_x)}
  if ($ixlabel == 1 && $ixlog == 1) {xlabel $(quote_TeX('log $x'))}
  if ($iylabel == 1 && $iylog == 0) {ylabel $(quote_TeX('$kippen_type')) }
  if ($iylabel == 1 && $iylog == 1) {ylabel $(quote_TeX('log $kippen_type')) }
  if ($itoplabel == 1) {
    toplabel \-2\t File : $(quote_TeX('$namee_$1')) : \ $(substr('$!date',0,12) + substr('$!date',15,0))
  }
  if ($ixlog == 0) { set x_temp = $x"_"$ns }\
    else { set x_temp = lg($x"_"$ns) }
  if ($iltype == 1) {ltype 0}
  #if ($ictype == 1) {ctype 0}
  define _dy $(($ysup-$yinf)*1.e-5)
  if ($iylog == 1) { define _dy $(lg($_dy)) }
  define _dx ($xsup-$xinf)
  define _1 ($xinf-0.05*$_dx)
  define _2 ($xsup+0.05*$_dx)
  if ($old_kipmacro == 1) {
    if ('$isconv_$ns' != '$kippen_type' ) {
      define _x $x
      define x model
      initconv $ns
      define kippen_type_sav $kippen_type
      define x $_x
    }
    if ($iplotcz ==1) {plotsc}
    if ($iylog == 0) {
      connect x_temp $kippen_type"_"$ns if ( x_temp >= $_1 && x_temp <= $_2 && $kippen_type"_"$ns != 0)
      do i = 0,$ntotconv {
        connect x_temp "conv"$i""$kippen_type"b_"$ns if ( x_temp >= $_1 && x_temp <= $_2 && "conv"$i""$kippen_type"b_"$ns != 0)
        connect x_temp "conv"$i""$kippen_type"t_"$ns if ( x_temp >= $_1 && x_temp <= $_2 && "conv"$i""$kippen_type"t_"$ns != 0) }}\
    else {
      set _ydraw = $kippen_type"_"$ns+1e-10
      connect x_temp (lg(_ydraw)) if ( x_temp >= $_1 && x_temp <= $_2 && $kippen_type"_"$ns != 0)
      do i = 0,$ntotconv {
        set _ydraw = "conv"$i""$kippen_type"b_"$ns+1e-10
        connect x_temp (lg(_ydraw)) if ( x_temp >= $_1 && x_temp <= $_2 && "conv"$i""$kippen_type"b_"$ns != 0)
        set _ydraw = "conv"$i""$kippen_type"t_"$ns+1e-10
        connect x_temp (lg(_ydraw)) if ( x_temp >= $_1 && x_temp <= $_2 && "conv"$i""$kippen_type"t_"$ns != 0)
      }
    }}\
  else {
    angle 90
    define ninum $(dimen(x_temp)-1)
    set inum = 0,$ninum
    do j = 0,$ntotconv {
      set _yt = "conv"$j"_"$kippen_type"t_"$ns
      set _yb = "conv"$j"_"$kippen_type"b_"$ns
      if ($iylog == 1 ) { define _ymax $(10.**$ysup) } else { define _ymax $ysup }
      set _yt = ( _yt > $_ymax) ? $_ymax  : _yt
      set _nc = nconvt_$ns
      set _ishm = 0,$(dimen(_yb)-2)
      set _ishp = 1,$(dimen(_yb)-1)
      #set _ncp = 0*_nc
      #set _ncm = 0*_nc
      #set _ncp = _nc[_ishp] concat < 0 >
      #set _ncm = < 0 > concat _nc[_ishm]

      set _ybp = 0*_yb
      set _ybm = _ybp
      set _ybp = _yb[_ishp] concat < 0 >
      set _ybm = < 0 > concat _yb[_ishm]
      set _ytp = 0*_yt
      set _ytm = _ytp
      set _ytp = _yt[_ishp] concat < 0 >
      set _ytm = < 0 > concat _yt[_ishm]
      set _dytb = ( _yt-_yb > 0 ) ?  _yt-_yb : 1.e-20
      set _ytp = _ytp+_dytb
      set _ybp = _ybp-_dytb
      #set _dytb = ( _yt-_yb > 0  && _ybp < _yt && _ytp > _yb) ?  _yt-_yb : 1.e-20
      #set _dytb = ( _yt-_yb > 0) ?  _yt-_yb : 1.e-20

      if ($iylog == 1) { set _dytb = lg(_dytb) }
      set _yshadet = (_yt > 0 && _dytb > $_dy || $j == 0) ? _yt : 1.e-10
      set _yshadeb = (_yt > 0 && _dytb > $_dy || $j == 0) ? _yb : 1.e-10
      set _xshade = x_temp
      set _idnull = (_yt == 0) ? inum : 0 
      define _idsum $(sum(_idnull))
      if ($_idsum > 0) {
        set _idnull1 = (_idnull > 0) ? _idnull-1 : 0
        set _xshade[_idnull] = (_yt[_idnull1] > 0) ? _xshade[_idnull1] : _xshade[_idnull]
        set _idnull = inum if (_yt == 0)
        set _idnull1 = (_idnull < $ninum) ? _idnull+1 :  $ninum
        set _xshade[_idnull] = (_yt[_idnull1] > 0) ? _xshade[_idnull1] : _xshade[_idnull]
      }

      set _xm = < 0> concat _xshade 
      set _xp = _xshade concat <0>
      set _dx = abs(_xp-_xm)
      set i = 0,$(dimen(_dx)-2)
      set _ddx = _dx[i]
      set _ddx[$(dimen(_dx)-2)] = _ddx[$(dimen(_dx)-3)]
      define tol (abs($xsup-$xinf)*1.d-8)
      set _xs = _xshade if (_ddx > $tol)
      set _dytb = _dytb if (_ddx > $tol)
      set _yb = _yb if (_ddx > $tol)
      set _yt = _yt if (_ddx > $tol)
      set _ysb = _yshadeb if (_ddx > $tol)
      set _yst = _yshadet if (_ddx > $tol)
      set _xshade = _xs
      set _yshadeb = _ysb
      set _yshadet = _yst
      
      if ($iylog == 0) {
        ctype $conv_color
        shed _xshade _yshadeb _xshade _yshadet $ishade
        #connect x_temp _yshadeb if ( x_temp >= $_1 && x_temp <= $_2 && _yb !=0 && _dytb > $_dy && ! ( _ybp > _yt || _ytp < _yb))
        #connect x_temp _yshadet if ( x_temp >= $_1 && x_temp <= $_2 && _yt !=0 && _dytb > $_dy && ! ( _ybp > _yt || _ytp < _yb) || $j == 0)
        connect _xshade _yshadeb if ( _xshade >= $_1 && _xshade <= $_2 && _yb !=0 && _dytb > $_dy)
        connect _xshade _yshadet if ( _xshade >= $_1 && _xshade <= $_2 && _yt !=0 && _dytb > $_dy || $j == 0)
        ctype black
      }\
      else {
        ctype $conv_color
        shed _xshade (lg(_yshadeb+1.e-20)) _xshade (lg(_yshadet)) $ishade
        connect  _xshade (lg(_yshadeb+1.e-20)) if ( _xshade >= $_1 && _xshade <= $_2 && _yb != 0 && _dytb > $_dy )
        connect  _xshade (lg(_yshadet)) if ( _xshade >= $_1 && _xshade <= $_2 && _yt != 0 && _dytb > $_dy || $j == 0)
        ctype black
      }
    }
  }
  angle 0
  if ($ibox == 1) {box $iibox}
  burning_shells
  ltype 0
  if ($itick == 1) {
    ctype orange3
    define _ilweight $ilweight
    define _iltype $iltype
    ltype 0
    define _ntick $(dimen(idxseq_$ns)-1)
    set xtick = x_temp_$ns
    define _wtick $(abs($ysup-$yinf)/50)
    if ($iyinv == 0) {
      define _ytick $($yinf+2*$_wtick)
      define _ytickb ($yinf+$_wtick)
      define _ytickl $($_ytick+$_wtick*.2) }\
    else {
      define _ytick $($ysup-2*$_wtick)
      define _ytickb ($ysup-$_wtick)
      define _ytickl $($_ytick-$_wtick*.2) }
    do k = 0,$_ntick {
      lweight 3
      define il $(idxseq_$ns[$k])
      relocate $(xtick[$il]) $_ytickb
      draw $(xtick[$il]) $_ytick
      if ($iticklabel == 1) {
        lweight 1
        expand (0.8*$iticksize) 
        if ($(xtick[$il]) >= $xinf && $(xtick[$il]) <= $xsup) {
          relocate $(xtick[$il]) $_ytickl
          putlabel 8 $(seq_$ns[$k])
        }
        expand 1.2
      }
    }
  }
  ctype 0
  lweight $_ilweight
  ltype $_iltype
  set nn = _nntemp
  define x $_xsav
  ltype 0
  define nstar $_nstar
  if ($in == 1) {
    restorevar 0
    define in 0
  }
  echo burning shells : H=$Hburn_color, He=$Heburn_color, C=$Cburn_color, Ne=$Neburn_color, O=$Oburn_color
  define irecall 0

burning_shells
  lweight $ilweight_burn
  #draw burning shells
  if ($iylog == 0) {
    # draw limits of burning shells
    ltype 2
    if ($ictype == 1) {ctype $Oburn_color}
    if ($iOburn == 1 && '$eformat_$ns' == 'SN') {
      connect x_temp "Oburn_"$kippen_type"b_"$ns  if (phase_$ns > 5) #if ( x_temp >= $_1 && x_temp <= $_2 && "Oburn_"$kippen_type"b_"$ns != 0)
      connect x_temp "Oburn_"$kippen_type"t_"$ns  if (phase_$ns > 5) #if ( x_temp >= $_1 && x_temp <= $_2 && "Oburn_"$kippen_type"t_"$ns != 0)}
    if ($ictype == 1) {ctype $Neburn_color}
    if ($iNeburn == 1 && $eversion_$ns >= 2.05) {
      connect x_temp "Neburn_"$kippen_type"b_"$ns if (phase_$ns > 5) #if ( x_temp >= $_1 && x_temp <= $_2 && "Neburn_"$kippen_type"b_"$ns != 0)
      connect x_temp "Neburn_"$kippen_type"t_"$ns if (phase_$ns > 5) #if ( x_temp >= $_1 && x_temp <= $_2 && "Neburn_"$kippen_type"t_"$ns != 0)}
    if ($ictype == 1) {ctype $Cburn_color}
    if ($iCburn == 1 && $eversion_$ns >= 2.05) {connect x_temp "Cburn_"$kippen_type"b_"$ns if (phase_$ns > 5) #if ( x_temp >= $_1 && x_temp <= $_2 && "Cburn_"$kippen_type"b_"$ns != 0)}
    if ($iCburn == 1) {connect x_temp "Cburn_"$kippen_type"t_"$ns  if (phase_$ns > 5) #if ( x_temp >= $_1 && x_temp <= $_2 && "Cburn_"$kippen_type"t_"$ns != 0)}
    if ($ictype == 1) {ctype $Heburn_color}
    if ($iHeBS == 1) {
      connect x_temp "Heburn_"$kippen_type"b_"$ns if ( x_temp >= $_1 && x_temp <= $_2 && "Heburn_"$kippen_type"b_"$ns != 0)
      connect x_temp "Heburn_"$kippen_type"t_"$ns if ( x_temp >= $_1 && x_temp <= $_2 && "Heburn_"$kippen_type"t_"$ns != 0)}
    if ($ictype == 1) {ctype $Hburn_color}
    if ($iHBS == 1) {
      connect x_temp "Hburn_"$kippen_type"b_"$ns if ( x_temp >= $_1 && x_temp <= $_2 && "Hburn_"$kippen_type"b_"$ns != 0)
      connect x_temp "Hburn_"$kippen_type"t_"$ns if ( x_temp >= $_1 && x_temp <= $_2 && "Hburn_"$kippen_type"t_"$ns != 0  && "Hburn_"$kippen_type"t_"$ns > "Hburn_"$kippen_type"b_"$ns)}
    ctype 0
    # draw location of maximum energy production
    ltype 1
    if ('$kippen_type' == 'M') {
      if ($ictype == 1) {ctype $Oburn_color}
      if ($iOburn_m == 1 && '$eformat_$ns' == 'SN') {connect x_temp "Oburn_"$kippen_type"m_"$ns if ( x_temp >= $_1 && x_temp <= $_2 && "Oburn_"$kippen_type"m_"$ns != 0)}
      if ($ictype == 1) {ctype $Neburn_color}
      if ($iNeburn_m == 1 && $eversion_$ns >= 2.05) {connect x_temp "Neburn_"$kippen_type"m_"$ns if ( x_temp >= $_1 && x_temp <= $_2 && "Neburn_"$kippen_type"m_"$ns != 0)}
      if ($ictype == 1) {ctype $Cburn_color}
      if ($iCburn_m == 1 && $eversion_$ns >= 2.05) {connect x_temp "Cburn_"$kippen_type"m_"$ns if ( x_temp >= $_1 && x_temp <= $_2 && "Cburn_"$kippen_type"m_"$ns != 0)}
      if ($ictype == 1) {ctype $Heburn_color}
      if ($iHeBS_m == 1) {connect x_temp "Heburn_"$kippen_type"m_"$ns if ( x_temp >= $_1 && x_temp <= $_2 && "Heburn_"$kippen_type"m_"$ns != 0)}
      if ($ictype == 1) {ctype $Hburn_color}
      if ($iHBS_m == 1) {connect x_temp "Hburn_"$kippen_type"m_"$ns if ( x_temp >= $_1 && x_temp <= $_2 && "Hburn_"$kippen_type"m_"$ns != 0)} }}\
  else {
    # draw limits of burning shells
    ltype 2
    if ($ictype == 1) {ctype $Oburn_color}
    if ($iOburn == 1 && '$eformat_$ns' == 'SN') {
      set _ydraw = "Oburn_"$kippen_type"b_"$ns+1.e-20
      connect x_temp (lg(_ydraw)) #if ( x_temp >= $_1 && x_temp <= $_2 && "Oburn_"$kippen_type"b_"$ns != 0)
      set _ydraw = "Oburn_"$kippen_type"t_"$ns+1.e-20
      connect x_temp (lg(_ydraw)) #if ( x_temp >= $_1 && x_temp <= $_2 && "Oburn_"$kippen_type"t_"$ns != 0)}
    if ($ictype == 1) {ctype $Neburn_color}
    if ($iNeburn == 1 && $eversion_$ns >= 2.05) {
      set _ydraw = "Neburn_"$kippen_type"b_"$ns+1.e-20
      connect x_temp (lg(_ydraw)) #if ( x_temp >= $_1 && x_temp <= $_2 && "Neburn_"$kippen_type"b_"$ns != 0)
      set _ydraw = "Neburn_"$kippen_type"t_"$ns+1.e-20
      connect x_temp (lg(_ydraw)) #if ( x_temp >= $_1 && x_temp <= $_2 && "Neburn_"$kippen_type"t_"$ns != 0)}
    if ($ictype == 1) {ctype $Cburn_color}
    if ($iCburn == 1 && $eversion_$ns >= 2.05) {
      set _ydraw = "Cburn_"$kippen_type"b_"$ns+1.e-20
      connect x_temp (lg(_ydraw)) #if ( x_temp >= $_1 && x_temp <= $_2 && "Cburn_"$kippen_type"b_"$ns != 0)
      set _ydraw = "Cburn_"$kippen_type"t_"$ns+1.e-20
      connect x_temp (lg(_ydraw)) #if ( x_temp >= $_1 && x_temp <= $_2 && "Cburn_"$kippen_type"t_"$ns != 0)}
    if ($ictype == 1) {ctype $Heburn_color}
    if ($iHeBS == 1) {
      set _ydraw = "Heburn_"$kippen_type"b_"$ns+1.e-20
      connect x_temp (lg(_ydraw)) if ( x_temp >= $_1 && x_temp <= $_2 && "Heburn_"$kippen_type"b_"$ns != 0)
      set _ydraw = "Heburn_"$kippen_type"t_"$ns+1.e-20
      connect x_temp (lg(_ydraw)) if ( x_temp >= $_1 && x_temp <= $_2 && "Heburn_"$kippen_type"t_"$ns != 0)}
    if ($ictype == 1) {ctype $Hburn_color}
    if ($iHBS == 1) {
      set _ydraw = "Hburn_"$kippen_type"b_"$ns+1.e-20
      connect x_temp (lg(_ydraw)) if ( x_temp >= $_1 && x_temp <= $_2 && "Hburn_"$kippen_type"b_"$ns != 0)
      set _ydraw = "Hburn_"$kippen_type"b_"$ns+1.e-20
      connect x_temp (lg(_ydraw)) if ( x_temp >= $_1 && x_temp <= $_2 && "Hburn_"$kippen_type"t_"$ns != 0  && "Hburn_"$kippen_type"t_"$ns > "Hburn_"$kippen_type"b_"$ns)}
    ctype 0
    # draw location of maximum energy production
    ltype 1
    if ('$kippen_type' == 'M') {
      if ($ictype == 1) {ctype $Oburn_color}
      if ($iOburn_m == 1 && '$eformat_$ns' == 'SN') {connect x_temp (lg("Oburn_"$kippen_type"m_"$ns+1.e-20)) if ( x_temp >= $_1 && x_temp <= $_2 && "Oburn_"$kippen_type"m_"$ns != 0)}
      if ($ictype == 1) {ctype $Neburn_color}
      if ($iNeburn_m == 1 && $eversion_$ns >= 2.05) {connect x_temp (lg("Neburn_"$kippen_type"m_"$ns+1.e-20)) if ( x_temp >= $_1 && x_temp <= $_2 && "Neburn_"$kippen_type"m_"$ns != 0)}
      if ($ictype == 1) {ctype $Cburn_color}
      if ($iCburn_m == 1 && $eversion_$ns >= 2.05) {connect x_temp (lg("Cburn_"$kippen_type"m_"$ns+1.e-20)) if ( x_temp >= $_1 && x_temp <= $_2 && "Cburn_"$kippen_type"m_"$ns != 0)}
      if ($ictype == 1) {ctype $Heburn_color}
      if ($iHeBS_m == 1) {connect x_temp (lg("Heburn_"$kippen_type"m_"$ns+1.e-20)) if ( x_temp >= $_1 && x_temp <= $_2 && "Heburn_"$kippen_type"m_"$ns != 0)}
      if ($ictype == 1) {ctype $Hburn_color}
      if ($iHBS_m == 1) {connect x_temp (lg("Hburn_"$kippen_type"m_"$ns+1.e-20)) if ( x_temp >= $_1 && x_temp <= $_2 && "Hburn_"$kippen_type"m_"$ns != 0)} }
  }
  lweight $ilweight


initconv 1
  echo Processing convective zones ...
  #define ntotconv 10
  define ns $1
  #define ttotj (int($ntotconv/2))
  set "conv0_"$kippen_type"b_"$1="env_"$kippen_type"b_"$1
  set "conv0_"$kippen_type"t_"$1=("env_"$kippen_type"b_"$1>0)? $kippen_type"_"$1 : 0
  do i=0,$ntotconv { set "conv"$i""$kippen_type"b_"$ns=0*t_$1
                  set "conv"$i""$kippen_type"t_"$ns=0*t_$1 }
  do j=0,$ntotconv { set "conv"$j""$kippen_type"b_"$ns[0]="conv"$j"_"$kippen_type"b_"$1[0]
                  set "conv"$j""$kippen_type"t_"$ns[0]="conv"$j"_"$kippen_type"t_"$1[0] }
  do i=0,$ntotconv { 
    set "conv"$i""$kippen_type"b_"$ns="conv"$i"_"$kippen_type"b_"$1
    set "conv"$i""$kippen_type"t_"$ns="conv"$i"_"$kippen_type"t_"$1
  }
  return
	define n (dimen($x"_"$1)-1)
  do k=1,$n {
    if (int($k/100)==($k/100)) { echo $k }
    define k1 ($k-1)
    do j=0,$ntotconv {
      define low ("conv"$j"_"$kippen_type"b_"$1[$k])
      define upp ("conv"$j"_"$kippen_type"t_"$1[$k])
      if ($upp>0) {
        define done 0
        do i=0,$ntotconv {
          if ($done==0) {
            define cMbk ("conv"$i""$kippen_type"b_"$ns[$k])
            define cMtk ("conv"$i""$kippen_type"t_"$ns[$k])
            define cMbk1 ("conv"$i""$kippen_type"b_"$ns[$k1])
            define cMtk1 ("conv"$i""$kippen_type"t_"$ns[$k1])
            if ($cMbk==0 && $cMtk==0 && $upp>=$cMbk1 && $low<=$cMtk1) {
              set "conv"$i""$kippen_type"b_"$ns[$k]="conv"$j"_"$kippen_type"b_"$1[$k]
              set "conv"$i""$kippen_type"t_"$ns[$k]="conv"$j"_"$kippen_type"t_"$1[$k]
            define done 1
            }
          }
        }
        if ($done==0) {
          do i=0,$ntotconv {
            define cMbk ("conv"$i""$kippen_type"b_"$ns[$k])
            define cMtk ("conv"$i""$kippen_type"t_"$ns[$k])
            define cMbk1 ("conv"$i""$kippen_type"b_"$ns[$k1])
            define cMtk1 ("conv"$i""$kippen_type"t_"$ns[$k1])
            if ($done==0 && $cMbk==0 && $cMtk==0 && $cMbk1==0 && $cMtk1==0 ) {
              set "conv"$i""$kippen_type"b_"$ns[$k]="conv"$j"_"$kippen_type"b_"$1[$k]
              set "conv"$i""$kippen_type"t_"$ns[$k]="conv"$j"_"$kippen_type"t_"$1[$k]
              define done 1
            }
          }
        if ($done==0) { echo Problem in processing convective zones ! }
        }
      }
    }
  }
  define isconv_$ns $kippen_type
  echo Done.


plotsc
  define x0 0
  define dlim (($xsup-$xinf)/$xplotsc)
  #define dlim 0
  define n (dimen(x_temp)-1)
  #define ns $(nn[$i1])
  define nn1 0
  define nn2 $n
  do i = 0,$n {
    if ($itinv == 1) {define ii ($n-$i)}\
      else {define ii $i}
    define ttt (x_temp[$ii])
    if ($ttt <= $_1) { define nn1 $i }
    if ($ttt <= $_2) { define nn2 $i }
  }
  if ($itinv == 1) {
    define nn1 ($n-$nn1)
    define nn2 ($n-$nn2)}
  if ($nn1 > $nn2) {
    define _nn $nn1
    define nn1 $nn2
    define nn2 $_nn}
  if ($nn2 < $n) { define nn2 ($nn2+1) }
  if ($nn1 > 0 ) { define nn1 ($nn1-1) }
  #set xt = { 0 x_temp[$nn1] x_temp[$nn1] 0 }
  do j = 0,$ntotconv {
    set xc$j = { 0 0 0 0 }  define z ("conv"$j""$kippen_type"t_"$ns[0])
    if ($z != 0) { set xc$j = { 0 } concat ("conv"$j""$kippen_type"b_"$ns[0]) concat $z concat 0 } }
  #do j = 0,$ttotsc {
  #  set xsc$j = { 0 0 0 0 }  define z ("sc"$j""$kippen_type"t_"$ns[0])  
  #  if ($z != 0) { set xsc$j = {0 "sc"$j""$kippen_type"b_"$ns[0] "sc"$j""$kippen_type"t_"$ns[0] 0} } }
  define nn1 ($nn1+1)
  do i = $nn1,$nn2 {
    #set xt[0] = xt[1]  set xt[3] = xt[2]  set xt[1] = t[$i]  set xt[2] = t[$i]
    ltype 0
    define xxx (x_temp[$i])
    define dx (abs($xxx-$x0))
    do j = 0,$ntotconv {
      set "xc"$j[0] = "xc"$j[1]
      set "xc"$j[3] = "xc"$j[2]  
      set "xc"$j[1] = "conv"$j""$kippen_type"b_"$ns[$i]  
      set "xc"$j[2] = "conv"$j""$kippen_type"t_"$ns[$i]
      define z0 $("xc"$j"[0]")  define z1 $("xc"$j"[1]")
      define z2 $("xc"$j"[2]")  define z3 $("xc"$j"[3]")
      if ($z2 > 0 && $dx > $dlim) { 
        if ($iylog == 0) {
          relocate $xxx $($z1)
          draw $xxx $($z2) }\
        else {
          relocate $xxx $(lg($($z1)+1.e-20))
          draw $xxx $(lg($($z2)+1.e-20)) }
        define x0 $xxx 
      }
    }
    ltype 1
  }
  ltype 0

kipcol
  if ('$!Hburn_color' == 'green4') {
    define Hburn_color "gold"
    define Heburn_color "neon"
    define Cburn_color "cyan"
    define Neburn_color "magenta"
    define Oburn_color "redpuple"
    define conv_color "grey3"
  } else {
    define Hburn_color "green4"
    define Heburn_color "blue"
    define Cburn_color "red"
    define Neburn_color "magenta"
    define Oburn_color "cyan"
    define conv_color "black"
  }
  
color 02
  if ($?1 == 0) { define 1 ? { enter absolute star number}}
  if ($?2 == 0) { define 2 ? { specify plotted variable ( XY : chemicals, nucl : enuc, T : temperature) } }
  if ('$2' != 'XY' && '$2' != 'nuc' && '$2' != 'T') {
    echo   second argument of color must be "XY" or "nuc" or "T"
    return
  }
  if ($evolmode == 0) {goevol}
  echo star "#" $1 :   $dir_$1"/"$namee_$1
  define ns ($1)
  lweight 0
  if ($itinv == 1 && $itinv_$ns == 0) {dtinv}
  xborne
  if ($ixborne == 1) { 
    define xinf $xinf0
    define xsup $xsup0}\
  else {
    if ($xinf > $xsup0 || $xsup < $xinf0) {
      echo
      echo bad limits 4 : $x must range between [$xinf0 $xsup0]
      return
    }
  }
  if ($iyborne == 1) {
    defylim $kippen_type 1
    if ($iylog == 1) {
       define yinf -6 }\
    else {
       define yinf 0 }
    define ysup $ysup0}
  if ($ierase == 1) {erase}
  if ($ixinv == 1) {
    limits $xsup $xinf $yinf $ysup}\
  else {
    limits $xinf $xsup $yinf $ysup}
  if ($ibox == 1) {box $iibox}
  if ($ixlabel == 1 && $ixlog == 0) {xlabel $(quote_TeX('$x')) ($unit_x)}
  if ($ixlabel == 1 && $ixlog == 1) {xlabel $(quote_TeX('log $x'))}
  if ($iylabel == 1 && $iylog == 0) {ylabel $(quote_TeX('$kippen_type')) }
  if ($iylabel == 1 && $iylog == 1) {ylabel $(quote_TeX('log $kippen_type')) }
  if ($itoplabel == 1) {
    toplabel \-2\t File : $(quote_TeX('$namee_$1')) : \ $(substr('$!date',0,12) + substr('$!date',15,0))
  }

  define ymin $yinf
  define ymax $ysup

  define xmin $xinf
  define xmax $xsup
  define temp (dimen(($x"_"$1))-1)
  if ($xmax > ($x"_"$1[$temp]) ) {define xmax ($x"_"$1[$temp]) } 
  define _file ('$smresults/$dir_$1')
  if(! is_dir("$_file")) {
    echo directory $_file not found
    return
  }
  define lpass 0
  define _file ('$smdir/DATA/$namee_$1.p99')
  #if (is_file("$_file")) {
  #  echo file $_file exists, not regenerated
  #  define lpass 1
  #}

  define ind0 $(idxseq_$1[0])
  define seq0 $(seq_$1[0])
  define t0 $($x"_"$1[$ind0])
  define _istart 1
  do i = 0,$($(dimen(seq_$1))-2) {
    #define ind $(idxseq_$1[$($(seq_$1[$i])-$seq0)])
    #define indp1 $(idxseq_$1[$($(seq_$1[$i])-$seq0+1)])
    define ind $(idxseq_$1[$i])
    define indp1 $(idxseq_$1[$($i+1)])

    #echo ($($x"_"$1[$ind])<$xmax && $($x"_"$1[$indp1])>$xmin)
    if ($($x"_"$1[$ind])<$xmax && $($x"_"$1[$indp1])>$xmin) {
      echo Model number : $i / $(dimen(seq_$1)-1)

      if ($i < $(dimen(seq_$1))-2) {define xend $($x"_"$1[$indp1])}\
      else { define xend $xmax}

      if ($lpass == 0) { !$smprog/mygensm.pl $namee_$1 $dir_$1 $(seq_$1[$i]) >> /dev/null }
      define _file ('$smhome/DATA/$namee_$1.p99')
      data "$!_file"
      read row _kshell $_istart

      define _nshell $(_kshell[0])
      define _iend $($_istart+1+$_nshell)
      #data "$!_file" lines $($_istart+1) $($_iend-1)
      data "$!_file" lines 2 0
      read { nshell_00 1 R_00 2 M_00 3 nucl_00 4 XYH1_00 5 XYHe4_00 6 XYC12_00 7 XYO16_00 8 T_00 9}
      define _istart $_iend

      if ('$2' == 'XY') {
        ## for distinct H,He and (C+O)    
        #set xx = ((XYC12_00+XYO16_00) > 1e-5) ? lg(XYC12_00+XYO16_00) : -5
        set xx = (XYC12_00+XYO16_00)
        #set xx = 1+xx/5 
        set r_00 = ((xx)*255)%256
        #set xx = (XYH1_00 > 1e-5) ? lg(XYH1_00) : -5
        set xx = XYH1_00
        #set xx = 1+xx/5 
        set v_00 = ((xx)*255)%256
        #set xx = (XYHe4_00 > 1e-5) ? lg(XYHe4_00) : -5
        set xx = XYHe4_00
        #set xx = 1+xx/5 
        set b_00 = ((xx)*255)%256
        #set r_00 = ((XYC12_00+XYO16_00)*255)%256
        #set v_00 = ((XYH1_00)*255)%256
        #set b_00 = ((XYHe4_00)*255)%256
        ## for distinct H,He,C and O     
        #set r_00 = ((1-XYO16_00)*255)%256
        #set v_00 = ((1-XYC12_00)*255)%256
        #set b_00 = ((1-XYHe4_00)*255)%256
        ## for test
        #set r_00 = ((1-XYC12_00**0.5)*255)%256
        #set v_00 = 0*XYO16_00+255
        #set b_00 = 0*XYO16_00+255 
      }
      if ('$2' == 'nuc') {
        set xx = (nucl_00 > 1) ? lg(nucl_00) : 0
        vecminmax xx min max
        set r_00 = ((xx*0)+100)%256
        set v_00 = ((xx*0)+10)%256
        set b_00 = ((xx/$max)*255)%256
      }
      if ('$2' == 'T') {
        set xx = lg(T_00)
        #set xx = (T_00)
        vecminmax xx  min max
        set r_00 = ((1-xx/$max)*255)%256
        set v_00 = ((xx/$max)*255)%256
        set b_00 = ((xx/$max)*255)%256
      }

      define old_r $(r_00[0])
      define old_v $(v_00[0])
      define old_b $(b_00[0])

      define old_Mr $($kippen_type"_00[0]")
      define indmid $(int($indp1+$ind)/2)
      define ymax $($kippen_type"_"$1[$indmid])

      do j = 0,$(dimen($kippen_type"_00")-2) {
      
        if ($kippen_type"_00"[$j] >= $ymin && $kippen_type"_00"[$j] <= $ymax){

          define r $(r_00[$j])
          define v $(v_00[$j])
          define b $(b_00[$j])	  

          if (($old_r != $r || $old_v != $v || $old_b != $b) ||  $j == $(dimen(XYH1_00)-2) || $kippen_type"_00"[$($j+1)] >= $ymax ) {
            my_add_ctype $old_r $old_v $old_b
            define old_r $r
            define old_v $v
            define old_b $b

            set xxx = <$($x"_"$1[$ind]) $xend $xend $($x"_"$1[$ind])>
            set yyy = <$old_Mr $old_Mr $ymax $ymax>
            if ($($kippen_type"_00"[$($j-1)])<$ymin) {
              set yyy[0] = $ymin
              set yyy[1] = $ymin
            }
            shade 0 xxx yyy
            define old_Mr $($kippen_type"_00"[$j])
          }
        }\
        else{
          if ($kippen_type"_00"[$j] < $ymin) {
            define old_r $(r_00[$j])
            define old_v $(v_00[$j])
            define old_b $(b_00[$j])
          }
        }
      }
    }
    ctype black
  }
  delete xx delete r_00 delete v_00 delete b_00
  delete nshell_00 delete R_00 delete M_00 delete nucl_00 delete T_00
  delete XYH1_00 delete XYHe4_00 delete XYO16_00 delete XYC12_00
  delete xxx delete yyy

my_add_ctype 3
  if ($ipasscolor == 0) {
    set tt = CTYPE()
    CTYPE	= CTYPE(STRING) concat 'new'
    define ipasscolor 1
  }    
  CTYPE = tt concat $1 + 256*($2 + 256*$3)
  ctype new
  


#####################
######shortcuts
#####################

re
  reset

reset
  initv

d 101
  device x11 -dev $1

inn 1
  define ichecknn $1

sv 1
  if ($1 == 0) {
    echo WARNING : 0 reserved for system
    echo command aborted 
    return
  }
  savevar $1

rv 1
  restorevar $1
  
z
  zoom

zx 
  zoomx

w
  window 1 1 1 1

l
  history


itick 1
  define itick $1
it 1
  itick $1

iticklabel 1
  define iticklabel $1
itlabel 1
  iticklabel $1

iticksize 1
  its $1
its 1
  define iticksize $1

iptick 1
  define iptick $1


vv
  progvar

ve
  varevol

vp
  varpulse

vs
  varstruc

vf
  varflame

vo
  varobs

x
  #show x limits
  echo $x = [$xinf,$xsup]

y
  #show y limits
  echo $y = [$yinf,$ysup]

ihisto 1
  define ihisto $1

kip 1
  define old_kipmacro $1
  
iHburn 1
  define iHBS $1

iHburn_m 1
  define iHBS_m $1

iHeburn 1
  define iHeBS $1

iHeburn_m 1
  define iHeBS_m $1

iNeburn 1
  define iNeburn $1

iNeburn_m 1
  define iNeburn_m $1

iCburn 1
  define iCburn $1

iCburn_m 1
  define iCburn_m $1

iOburn 1
  define iOburn $1

iOburn_m 1
  define iOburn_m $1

icheck 1
  define icheckvar $1

ilweight 1
  define ilweight $1

ilweight_burn 1
  define ilweight_burn $1

ireacnuc 1
  define ireacnuc $1

ipoints 1
  define ipoints $1
ip 1
  define ipoints $1

iexpand 1
  define iexpand $1

itoplabel 1
  define itoplabel $1

ixlabel 1
  define ixlabel $1

iylabel 1
  define iylabel $1

ireac 1
  define ireacnuc $1

ishade 1
  define ishade $1

iplotcz 1
  define iplotcz $1

kt 1
  if ('$1' == 'R' || '$1' == 'M') {define kippen_type $1 }

ixborne 1
  define ixborne $1
ix 1
  define ixborne $1

iyborne 1
  define iyborne $1
iy 1
  define iyborne $1

ixlog 1
  if ($ixborne == 0) {
    if ($ixlog == 1 && $1 == 0) { 
      define xinf $(10**$xinf)
      define xsup $(10**$xsup)
      define fx1 $xinf
      define fx2 $xsup
    }
    if ($ixlog == 0 && $1 == 1) { 
      define xinf $(lg($xinf))
      define xsup $(lg($xsup))
      define fx1 $xinf
      define fx2 $xsup
    }
  }
  define ixlog $1
  
iylog 1
  define iylog $1

ixinv 1
  define ixinv $1

iyinv 1
  define iyinv $1

ibox 1
  define ibox $1

iibox 101
  define iibox < $1 >

ihrd 1
  define ihrd $1

ierase 1
  define ierase $1
ie 1
  define ierase $1

iltype 1
  define iltype $1

ictype 1
  define ictype $1

iphase 1
  define iphase $1
  define iphase0 $(abs($1))

phase
  echo  current iphase = $iphase
  echo  phase : (1:PMS) cyan, (2:MS) black, (3:RGB) green, (4:Hecore) blue, (5:AGB) red, (6:Cburn) magenta

inorm 1
  define inorm $1

nstar 1
  define nstar $1

rr
  macro read "$!_filevolsm"
  echo  $_filevolsm reloaded


c
  #get screen coordinate
  cursor _Xcursor _Ycursor

sc
  print '%17.9e  %17.9e\n' {_Xcursor _Ycursor}

mode 01
  if ($?1) { define evolmode $1 }
  echo "current mode : evolmode = $!evolmode (0 = structure | 1 = evolution | 2 = pulse - TPAGB | 3 = observation) "

dy 1
  relocate $xinf $1 
  draw $xsup $1

dx 1
  relocate $1 $yinf 
  draw $1 $ysup

is_dir 1       # Return true if directory $1 exists, for example:
  DEFINE exit_status DELETE
  !test -d $1
  set $0 = ($exit_status == 0)

ierror 1
  define ierror $1

igerror 1
  define iglobalerror $1

ilimit 1
  define ilimit $1


#####################
#### axis shifts 
#####################

dtinv 01
  #define tinv : reversed time
  if ( $(dimen(nn)) < $nstar ) { define nstar $(dimen(nn)) }
  foreach n nn {
    echo    processing star .... $namee_$n
    if ($itinv_$n == 0) {
      set _dt = reverse(dt_$n)
      set _dt = cumulate(_dt)
      set tinv_$n = reverse(_dt)
      define itinv_$n 1
    }  
  }
  define itinv 1
  ixinv 1
  delete _dt
  defx tinv
	
dtinv2
  #define tinv : reversed time
  dtinv
  foreach n nn {
    set _t = t_$n
    define m (dimen(_t)-1)
    define _tend $(_t[$m])
    set tf_$n = lg(_t+1e-20/(tinv_$n+1e-20))
  }
  delete _t
  ixinv 0
  define _tend delete
  define n delete
  define j delete
  defx tf

dtshift 01
  #define ts : time is shifted by ARG 1
  if	($?1 == 0) { define 1 ? { enter t0 the time shift : new variable ts = t-t0 }}
  if ('$1' == 'x') {return}
  if ( $(dimen(nn)) < $nstar ) { define nstar $(dimen(nn)) }
  foreach n nn {
    echo    processing star .... $namee_$n
    define itshift_$n 1
    set _dt = (t_$n > $1 ) ? dt_$n : 0
    set ts_$n = cumulate(_dt)
  }
  define j delete
  delete _dt
  defx ts

mtshift 01
  #define tm : time counted from model ARG 1
  if	($?1 == 0) { define 1 ? { enter the model number from which time will be counted }}
  if ('$1' == 'x') {return}
  if ( $(dimen(nn)) < $nstar ) { define nstar $(dimen(nn)) }
  define _m $1
  foreach n nn {
    echo    processing star .... $namee_$n
    define imshift_$n 1
    set _dtp = dt_$n if (model_$n > $_m)
    set _dtm = -dt_$n if (model_$n < $_m)
    set _dtm = reverse(_dtm)
    set _tp = cumulate(_dtp)
    set _tm = cumulate(_dtm)
    set _tm = reverse(_tm)
    set tm_$n = _tm concat < 0. > concat _tp
  }
  delete _dtm delete _dtp delete _tp delete _tm delete _m
  defx tm
  
dist
  c
  sc
  echo DX : $(abs(_Xcursor[1]-_Xcursor[0])) $unit_x
  echo DY : $(abs(_Ycursor[1]-_Ycursor[0])) $unit_y
  if ($(abs(_Xcursor[1]-_Xcursor[0])) == 0) {
    echo Derivative : Infinity 
  } else {
    define DYDX $((_Ycursor[1]-_Ycursor[0])/(_Xcursor[1]-_Xcursor[0]))
    echo Derivative : $DYDX $unit_y/$unit_x
    echo linear fit : y = $DYDX*x + $(_Ycursor[1]-$DYDX*_Xcursor[1])
  }
  

###################################################
### draw convective border (in structure mode only)
###################################################

dconv 01
  #draw convective zone
  if ($?1 == 0) { define 1 ? { enter absolute star number or (0) to draw (all) convective zone(s) }}
  if ('$1' == 'x') {return}
  set _nnsav = nn
  define _nstar $nstar
  if ($1 != 0) {
    define _n $(dimen(nn))
    if ( $1 > $_n ) {
      echo
      echo "bad argument : "$1" > dimension of nn ! "
      echo
      return }\
    else {
      define nstar 1
      set nn = $(nn[$1-1]) }
  }
  checknn
  if ($ipass != 0) { 
     define nstar $_nstar
     set nn = _nnsav
     return}
  define _yi $yinf
  define _ys $ysup
  do i = 1,$nstar {
    define j ($i-1)
    define jcolor ($j % $ncolors)
    if ($ictype == 1 && $nstar > 1) {ctype $(color_name[$jcolor])}  
    if ($ixinv == 1) {
      limits $xsup $xinf 0 1 }\
    else {
      limits $xinf $xsup 0 1}
    angle 45
    set _x = $x"_"$(nn[$j])
    set _y = (yzi"_"$(nn[$j]) < 0) ? 1 : 0
    define _xx $(_x[0])
    #set _x = (0 concat _x)
    #set _y = (0 concat _y)
    if ($ixlog == 0 ) {
       shade histogram 400 _x _y}\
    else {shade histogram 400 (lg(_x+1.e-30)) _y}
    angle 0
  }
  ctype 0
  define nstar $_nstar
  set nn = _nnsav
  limits $xinf $xsup $_yi $_ys

dlconv 01
  #draw convective zone
  if ($?1 == 0) { define 1 ? { enter absolute star number or (0) to draw (all) convective zone(s) }}
  if ('$1' == 'x') {return}
  set _nnsav = nn
  define _nstar $nstar
  if ($1 != 0) {
    define _n $(dimen(nn))
    if ( $1 > $_n ) {
      echo
      echo "bad argument : "$1" > dimension of nn ! "
      echo
      return }\
    else {
      define nstar 1
      set nn = $(nn[$1-1]) }
  }
  checknn
  if ($ipass != 0) { 
     define nstar $_nstar
     set nn = _nnsav
     return}
  do i = 1,$nstar {
    define j ($i-1)
    define jcolor ($j % $ncolors)
    if ($ictype == 1 && $nstar > 1) {ctype $(color_name[$jcolor])}  
    set _x = $x"_"$(nn[$j])
    if ($ixlog == 1 ) { set _x = lg(_x+1e-30)}
    set _y = (yzi"_"$(nn[$j]) < 0) ? 1 : 0
    set _ym = < $(_y[0]) > concat _y
    set _yp = _y concat < 0 >
    set _nsh = < 0 > concat nsh"_"$(nn[$j])
    set _idx = _nsh if (_ym != _yp)
    define _nidx $(dimen(_idx)-1)
    do k = 0,$_nidx {
      define ix $(_idx[$k])
      if ($k % 2) {
        define ix $((_idx[$k])-1) }\
      else {
        define ix $(_idx[$k])
      }
      dx $(_x[$ix])
    }
  }
  ctype 0
  define nstar $_nstar
  set nn = _nnsav
  #limits $xinf $xsup $_yi $_ys


nabla
  if ($evolmode == 1) {return}
  savevar 0
  if ($irecall == 0) { 
    define recall <nabla>
    define irecall 1 }
  if ($ierase == 1) {erase}
  iylabel 0
  ie 0 
  iltype 0
  iltype 0
  if ($iyborne == 1) { ylim 0 1 }
  plot abrad
  iy 0
  ltype 2 plot abadd
  ylabel \del_{rad}, \del_{ad}
  ltype 0
  define irecall 0
  echo solid line = abrad ; dashed line = abadd
  restorevar 0


#############################################################
#### nuclear (flux, net)  and chemical (yields) applications 
#############################################################

nucevol 2
  define _checkvar $icheckvar
  define icheckvar 0
  define evolmode 1
  if ($1 != 0 && $1 != 1) {
    echo bad argument}\
  else {
    read_abund $2 $1
    net_gen $1 $2
    read_net $binversion_$(nn[0])
    plot_net
  }
  define icheckvar $_checkvar

nucevolsn 1
  define _checkvar $icheckvar
  define icheckvar 0
  define imodelnuc $1
  define evolmode 1
  read_abund $1 0
  if ($imodelnuc != $imodelnuc0) {
    net_gensn 0 $1
    read_net_sn }
  plot_netsn
  define imodelnuc0 $imodelnuc
  define icheckvar $_checkvar

nucstruc 03
  if ($?1 == 0) { define 1 ? { Arg 1 : (0) local (1) mean}}
  if ('$1' == 'x') {return}
  if ($?2 == 0) { define 2 ? { Arg 2 : shell number}}
  if ('$2' == 'x') {return}
  if ($?3 == 0) { define 3 ? { Arg 3 : absolute star number}}
  if ('$3' == 'x') {return}
  define inucl 1
  define _checkvar $icheckvar
  define icheckvar 0
  echo  number of reactions plotted : ireacnuc = $ireacnuc
  define inuctype $1
  define ishellnuc $2
  define idxstar $3
  define evolmode 0
  if ('$sformat_$3' == 'SN') {
    read_abund $2 0 $3
    if ($ishellnuc != $ishellnuc0 || $idxstar != $idxstar0 || $inuctype != $inuctype0) {
       net_gensn $1 $2 $3
       read_net_sn}
    savevar 0
    plot_netsn $3
  }
  if ('$sformat_$3' == 'AGB') {
    read_abund $2 0 $3
    if ($ishellnuc != $ishellnuc0 || $idxstar != $idxstar0) {
      net_gen $1 $2 $3
      read_net $binversion_$3}
    savevar 0
    plot_net $3
  }
  if ('$sformat_$3' == 'MASSIVE') {
    read_abund $2 0 $3
    if ($ishellnuc != $ishellnuc0 || $idxstar != $idxstar0) {
      net_genmassive $1 $2 $3
      read_net_massive}
    savevar 0
    plot_net $3
  }
  if ('$sformat_$3' == 'alpha' || '$sformat_$3' == 'ALPHA') {
    read_abund $2 0 $3
    if ($ishellnuc != $ishellnuc0 || $idxstar != $idxstar0) {
      net_genalpha $1 $2 $3
      read_net_alpha}
    savevar 0
    plot_net $3
  }
  restorevar 0
  define icheckvar $_checkvar
  define ishellnuc0 $ishellnuc
  define idxstar0 $idxstar
  define inucl 0

net_gen 3
  if ($evolmode == 0)  {
    !echo 0 $1 $2 $dtn_$3 $names_$3 | $smprog/nucsm_evol.e}\
  else {
    !echo 2 0 $2 $dtn_$3 $namee_$3 | $smprog/nucsm_evol.e}

net_genmassive 3
  if ($evolmode == 0)  {
    !echo 0 $1 $2 $dtn_$3 $names_$3 | $smprog/nucsm_massive.e}\
  else {
    !echo 2 0 $2 $dtn_$3 $namee_$3 | $smprog/nucsm_massive.e}

net_genalpha 3
  if ($evolmode == 0)  {
    !echo 0 $1 $2 $dtn_$3 $names_$3 | $smprog/nucsm_alpha.e}\
  else {
    !echo 2 0 $2 $dtn_$3 $namee_$3 | $smprog/nucsm_alpha.e}

net_gensn 3
  if ($evolmode == 0)  {
    define _nseq $(nseq_$3)
    if ($_nseq != 0) {
      define _nstrg $(strlen('$names_$3'))
      define _nstrg ($_nstrg-6)
      define a1 $(substr('$names_$3',0,$_nstrg))
      if ($_nseq < 10 ) { define namenet $a1"000"$_nseq }
      if ($_nseq > 10 && $_nseq < 100 ) { define namenet $a1"00"$_nseq }
      if ($_nseq > 100 && $_nseq < 1000 ) { define namenet $a1"0"$_nseq }
      if ($_nseq > 999 ) { define namenet $a1"_"$_nseq }}\
    }
    echo sequence filename : $namenet
    echo
    !echo 0 $1 $2 $dtn_$3 $namenet | $smprog/nucsm_sn.e -Wl,-T }\
  else {
    define namenet "$namee_$3"
    define namesn $dir_$3"/"$namee_$3
    echo "file : "$namesn
    !echo 2 0 $2 $dtn_$3 "\\'"$namesn"\\'" | $smprog/nucsm_sn.e -Wl,-T}
   #!echo 2 0 $2 $dtn_$3 "\\""$namee_$3"\\"" | $smprog/nucsm_sn.e -Wl,-T}

flux
  !less $_filerec

read_net 1
  location 3500 30000  3500 31000
  define _nspecies 54
  define _nreactions 177
  define _file ('$smprog/network_evol.dat')
  if(! is_file("$_file")) {
    echo file $_file does not exits !
    nucstruc aborted
    return }\
  else {
    data "$!_file" lines 1 $_nspecies
    read {elem 2.s A_0 3 Z_0 4 xsol 5}
    set neut_0 = A_0-Z_0
    define iend $($_nspecies+$_nreactions)
  }
  data "$!_file" lines $($_nspecies+1) $iend
  read {reac 1 k1 2 k2 3 k3 4 k4 5 k5 6 k6 7 k7 8 k8 9}
  data "$!_file" lines $($iend+1) 0
  read {name 1.s zname 2}
  data "$!_filerec" lines 3 3
  read {T 3 ro 6 age 9 M 12.s}
  define Te $(T[0])
  define rhoe $(ro[0])
  data "$!_filerec" lines 4 4
  read {Mr 6}
  if ($evolmode == 0) {
     data "$!_filerec" lines 16 186}\
  else {
     data "$!_filerec" lines 10 $(14+$_nreactions)}
  read {code 1}
  # define stable elements
  set neuts_0 = neut_0 if (xsol >1.e-25)
  set Zs_0 = Z_0 if (xsol >1.e-25)
  set Nins_0 = neut_0 if (xsol <1.e-25)
  set Zins_0 = Z_0 if (xsol <1.e-25)
  limits -1 23 -1 19

read_net_alpha
  location 3500 30000 3500 31000
  define _file ('$smprog/network_alpha.dat')
  data "$!_file" lines 1 17 
  read {elem 2.s A_0 3 Z_0 4 xsol 5}
  set neut_0 = A_0-Z_0
  data "$!_file" lines 18 48
  read {reac 1 k1 2 k2 3 k3 4 k4 5 k5 6 k6 7 k7 8 k8 9}
  data "$!_file" lines 49 63
  read {name 1.s zname 2}
  data "$!_filerec" lines 3 3
  read {T 3 ro 6 age 9 M 12.s}
  define Te $(T[0])
  define rhoe $(ro[0])
  data "$!_filerec" lines 4 4
  read {c 1.s c 2.s c 3 c 4.s c 5.s Mr 6}
  if ($evolmode == 0) {
     data "$!_filerec" lines 16 0}\
  else {
     data "$!_filerec" lines 10 39}
  read {code 1}
  # define stable elements
  set neuts_0 = neut_0 if (xsol >1.e-25)
  set Zs_0 = Z_0 if (xsol >1.e-25)
  set Nins_0 = neut_0 if (xsol <1.e-25)
  set Zins_0 = Z_0 if (xsol <1.e-25)
  limits 4 30 4 16

read_net_massive
  location 3500 30000 3500 31000
  define _nspecies 65
  define _nreactions 214
  define _file ('$smprog/network_massive.dat')
  if(! is_file("$_file")) {
    echo file $_file does not exits !
    nucstruc aborted
    return }\
  else {
    data "$!_file" lines 1 $_nspecies 
    read {elem 2.s A_0 3 Z_0 4 xsol 5}
    set neut_0 = A_0-Z_0
    define iend $($_nspecies+$_nreactions)
  }
  data "$!_file" lines $($_nspecies+1) $iend
  read {reac 1 k1 2 k2 3 k3 4 k4 5 k5 6 k6 7 k7 8 k8 9}
  data "$!_file" lines $($iend+1) 0
  read {name 1.s zname 2}
  data "$!_filerec" lines 3 3
  read {T 3 ro 6 age 9 M 12.s}
  define Te $(T[0])
  define rhoe $(ro[0])
  data "$!_filerec" lines 4 4
  read {Mr 6}
  if ($evolmode == 0) {
     data "$!_filerec" lines 16 229}\
  else {
     data "$!_filerec" lines 10 $(14+$_nreactions)}
  read {code 1}
  # define stable elements
  set neuts_0 = neut_0 if (xsol >1.e-25)
  set Zs_0 = Z_0 if (xsol >1.e-25)
  set Nins_0 = neut_0 if (xsol <1.e-25)
  set Zins_0 = Z_0 if (xsol <1.e-25)
  limits -1 30 -1 32

read_net_sn
  define ireacnuc 99
  location 3500 30000  3500 30500
  define _file ('$smprog/network210_sn32.dat')
  data "$!_file" lines 1 198
  read {elem 2.s Z_0 3 A_0 4 xsol 5}
  set neut_0 = A_0-Z_0
  #define _file ('$smprog/networksn50.dat')
  #data "$!_file" lines 287 2958
  #read {reac 1 k1 2 k2 3 k3 4 k4 5 k5 6 k6 7 k7 8 k8 9}
  #data "$!_file" lines 235 253
  #read {name 1.s}
  data "$!_filerec" lines 2 2
  read {Zmax 11}
  define zmax $(Zmax[0])
  data "$!_filerec" lines 3 3
  read {T 3 ro 6 age 9 M 12.s}
  define Te $(T[0])
  define rhoe $(ro[0])
  data "$!_filerec" lines 4 4
  read {Mr 6}
  data "$!_filerec" lines 26 0
  read {Zi_0 1 Ai_0 2 Zf_0 3 Af_0 4}
  set Ni_0 = Ai_0-Zi_0
  set Nf_0 = Af_0-Zf_0
  define xinf -2
  define xsup 46
  define yinf -2
  define ysup 34
  if ($zmax == 50) {
    define xinf -4
    define xsup 80
    define yinf -2
    define ysup 52
  }
  set xsol = xsol if (Z_0 <= $zmax)
  set A_0 = A_0 if (Z_0 <= $zmax)
  set neut_0 = neut_0 if (Z_0 <= $zmax)
  set Z_0 = Z_0 if (Z_0 <= $zmax)
  # define stable elements
  set neuts_0 = neut_0 if (xsol >1.e-25)
  set Zs_0 = Z_0 if (xsol >1.e-25)
  set Nins_0 = neut_0 if (xsol <1.e-25)
  set Zins_0 = Z_0 if (xsol <1.e-25)
  limits $xinf $xsup $yinf $ysup
 
plot_netsn 1
  #ix 1
  #iy 1
  set nn = 0
  nstar 1
  defx neut
  if ($ierase == 1) {erase}
  xborne
  if ($ixborne == 1) {
    define xinf $xinf0
    define xsup $xsup0}\
  else {
    if ($xinf > $xsup0 || $xsup < $xinf0) {
      echo
      echo bad limits : N must range between [$xinf0 $xsup0]
      return
    }
  }
  yborne Z
  if ($iyborne == 1) {
    define yinf $yinf0
    define ysup $ysup0}\
  else {
    if ($yinf > $ysup0 || $ysup < $yinf0) {
      echo bad limits : Z must range between [$yinf0 $ysup0]
      echo
      return
    }
  }
  limits $xinf $xsup $yinf $ysup
  define fexp (1.0-0.012*($xsup-$xinf))
  if ($fexp < 0.2) {define fexp 0.2}
  expand 1.3
  box
  xlabel N
  ylabel Z
  expand 1
  ctype red
  ltype 0
  ptype 4 0
  points Nins_0 Zins_0
  ctype 0
  ptype 4 3
  points neuts_0 Zs_0
  expand 0.7
  if ($ireacnuc > 1000) {define ireacnuc 999}
  do i = 0,$ireacnuc-1 {
     define in $(Ni_0[$i])
     define jn $(Nf_0[$i])
     define iZ $(Zi_0[$i])
     define jZ $(Zf_0[$i])
     lweight 2
     if ($i <= 5) {ltype 0 ctype red}
     if ($i <= 10 && $i > 5) {ltype 0 ctype magenta}
     if ($i <= 15 && $i > 10) {ltype 0 ctype cyan}
     if ($i <= 20 && $i > 15) {ltype 0 ctype green4}
     if ($i <= 25 && $i > 20) {ltype 0 ctype blue}
     if ($i > 25) {lweight 1 ctype 0}
     expand $fexp
     draw_arrow $in $iZ $jn $jZ
  }
  ctype 0
  ltype 0
  lweight 1
  expand 1.1
  if ($evolmode == 0)  { define namenet "$names_$1" }
  if ($itoplabel == 1) {
    if ($evolmode ==0) {toplabel \-2\t File : $(quote_TeX('$namenet'))   shell: "#"$ishellnuc  -  $(substr('$!date',0,12) + substr('$!date',15,0))}
  }
  define Te $(T[0])
  define roe $(ro[0])
  define Mass $(Mr[0])
  define Ma $(M[0])
  limits  -1 23 -1 19
  relocate 1 14.4
  putlabel 6 rho=$rhoe
  relocate 1 15
  putlabel 6 T=$Te
  relocate 1 15.6
  putlabel 6 Mr=$Mass
  relocate 1 16.2
  putlabel 6 M=$Ma  

plot_net 1
  ix 1
  iy 1
  iylog 0
  iyinv 0
  ixlog 0
  ixinv 0
  define _indexmod $1
  set nn = 0
  nstar 1
  defx neut
  if ($ierase == 1) {erase}
  xborne
  if ($ixborne == 1) {
    define xinf $xinf0
    define xsup $xsup0}\
  else {
    if ($xinf > $xsup0 || $xsup < $xinf0) {
      echo
      echo bad limits : N must range between [$xinf0 $xsup0]
      return
    }
  }
  yborne Z
  if ($iyborne == 1) {
    define yinf $yinf0
    define ysup $ysup0}\
  else {
    if ($yinf > $ysup0 || $ysup < $yinf0) {
      echo bad limits : Z must range between [$yinf0 $ysup0]
      echo
      return
    }
  }
  limits $xinf $xsup $yinf $ysup
  expand 1.3
  box
  xlabel N
  ylabel Z
  expand 2
  ctype red
  ptype 4 0
  points Nins_0 Zins_0
  ctype 0
  ptype 4 3
  points neuts_0 Zs_0
  expand 0.5
  echo
  echo   15 main reactions
  echo " ==================="
  if ('$sformat_$_indexmod' == 'AGB') {
    define _xcoor 23.2
    define nelement 17
    if ($ireacnuc > $_nreactions) {define ireacnuc  $_nreactions} }
  if ('$sformat_$_indexmod' == 'MASSIVE') {
    define _xcoor 30.7
    define nelement 28
    if ($ireacnuc > $_nreactions) {define ireacnuc  $_nreactions} }
  if ('$sformat_$_indexmod' == 'alpha' || '$sformat_$_indexmod' == 'ALPHA') {
    define _xcoor 31
    define nelement 14
    if ($ireacnuc > 31) {define ireacnuc 31} }
  local define print_noheader 1
  set dimen(_arg1) = 1.s
  set dimen(_arg2) = 1.s
  do i = 0,($ireacnuc-1) {
     define ireac $(code[$i]-1)
     define e1 $(k5[$ireac]-1)
     define e2 $(k8[$ireac]-1)
     define in $(neut_0[$e1])
     define jn $(neut_0[$e2])
     define iZ $(Z_0[$e1])
     define jZ $(Z_0[$e2])
     if ($i <= 5) {lweight 3 ctype red}
     if ($i <= 10 && $i > 5) {lweight 2 ctype magenta}
     if ($i <= 15 && $i > 10) {lweight 2 ctype cyan}
     if ($i <= 20 && $i > 15) {lweight 2 ctype green4}
     if ($i <= 25 && $i > 20) {lweight 2 ctype blue}
     if ($i > 25) {lweight 1 ctype 0}
     draw_arrow $in $iZ $jn $jZ
     if ($i <= 15) {
       set _arg = $($ireac+1)
       set _arg1 = '$(elem[$e1])'
       set _arg2 = '$(elem[$e2])'
       print '%3d : %-5s --> %-5s' {_arg _arg1 _arg2}
     }
  }
  delete _arg
  delete _arg1
  delete _arg2
  ctype 0
  ltype 0
  lweight 1
  expand 1
  define nelement $(dimen(name)-1)
  do i = 0,$nelement {
    define i1 ($i+1)
    relocate $_xcoor $(zname[$i])
    define nname $(name[$i])
    putlabel 5 $nname
  }
  define Te $(T[0])
  define roe $(ro[0])
  define Mass $(Mr[0])
  define Ma $(M[0])
  if ('$sformat_$_indexmod' == 'AGB') {
    relocate 1 14.4
    putlabel 6 rho=$roe
    relocate 1 15
    putlabel 6 T=$Te
    relocate 1 15.6
    putlabel 6 Mr=$Mass
    relocate 1 16.2
    putlabel 6 M=$Ma }\
  else {
    relocate 1 20
    putlabel 6 rho=$roe
    relocate 1 21
    putlabel 6 T=$Te
    relocate 1 22
    putlabel 6 Mr=$Mass
    relocate 1 23
    putlabel 6 M=$Ma
  }
  #flux
  ctype 0
  ltype 0
  lweight 1
  expand 1.1
  if ($evolmode == 0)  { define namenet "$names_$1" }
  if ($itoplabel == 1) {
    toplabel \-2\t File : $(quote_TeX('$namenet'))   shell: "#"$ishellnuc  - \ $(substr('$!date',0,12) + substr('$!date',15,0))
  }


read_abund 3
  define n_index $1
  define _n $3
  if ($evolmode == 0) { set _Xname = PXabund_$sformat_$_n }\
  else {
    if ($2 == 0) { set _Xname = Xabund_$sformat_$_n}
    if ($2 == 1) { set _Xname = Yabund_$sformat_$_n}
    define dimension $(dimen(M"_"$_n)-1)
    define _modelini $(model"_"$_n[0])
    define _modelfin $(model"_"$_n[$dimension])
    if ($1 > $_modelfin) {
       define n_index $dimension}\
    else {
      if ($1 < $_modelini) {
         define n_index 0}\
       else {
         define n_index $($1-$_modelini)}
    }
  }
  define _nel (dimen(_Xname))
  set dimen(_abund) = $($_nel+9)
  if ($evolmode == 1) {
     set _abund[0] = model"_"$_n[0]}\
  else {
     set _abund[0] = $1 }
  do i = 1,$_nel {
    define i1 ($i-1)
    define _xspname $(_Xname[$i1])
    set  _abund[$i] = $_xspname"_"$_n[$n_index]
  }
  if ($evolmode == 1) {
    if ($2 == 0) {
      set _abund[($_nel+1)] = Tc"_"$_n[$n_index]
      set _abund[($_nel+2)] = rhoc"_"$_n[$n_index]
      set _abund[($_nel+3)] = etac"_"$_n[$n_index]
      set _abund[($_nel+4)] = Enu_nucl"_"$_n[$n_index]}\
    else {
      set _abund[($_nel+1)] = env_Tb"_"$_n[$n_index]
      set _abund[($_nel+2)] = env_rob"_"$_n[$n_index]
      set _abund[($_nel+3)] = etac"_"$_n[$n_index]
      set _abund[($_nel+4)] = Enu_nucl"_"$_n[$n_index]
      set _abund[($_nel+5)] = t"_"$_n[$n_index]
      set _abund[($_nel+6)] = M"_"$_n[$n_index] }
  } else {
    set _abund[($_nel+1)] = T"_"$_n[$n_index]
    set _abund[($_nel+2)] = rho"_"$_n[$n_index]
    set _abund[($_nel+3)] = mue"_"$_n[$n_index]
  }
  define _file ('$smprog/nucshell_data')
  print "$!_file" '%10.4e\n' {_abund}

pflux 01
  if ($?1 == 0) { define 1 ? { select : flux, eng or perc }}
  if ('$1' == 'x') {return}
  if ('$1' != 'flux' && '$1' != 'eng' && '$1' != 'perc') {
    echo select : flux, eng or perc !
    return
  }
  if ($?ifluxl == 0) {savevar 0}
  set nn = 1
  if ($evolmode == 1) {
     data "$!_filerec" lines 10 194
     return }\
  else {
     data "$!_filerec" lines 2 2
     read {_nsh 6}
     define shellnuc $(_nsh[0])
     data "$!_filerec" lines 16 192
     read '%d %39s' {code_1 reaction_1}
     read '%43s %e12.6' {dum flux_1}
     read '%58s %e11.4' {dum eng_1}
     read '%71s %f7.3' {dum perc_1}
     read '%81s %e11.4' {dum xproj_1}
     read '%95s %e11.4' {dum xeject_1}
  }
  icheck 0
  itoplabel 0
  inn 0
  set creac_1 = code_1*1.
  set idxreac = 1,$(dimen(code_1))
  set _xtemp = $1_1
  set _ctemp = reaction_1
  sort {creac_1 _xtemp}
  set creac_1 = code_1*1.
  sort {creac_1 _ctemp}
  set $1_1 = _xtemp
  delete _xtemp
  defx creac
  ihisto 1
  plot $1
  restorevar 0
  relocate (200 600)
  putlabel 6 \-3\t $(quote_TeX('shell $shellnuc'))
  define name $names_$idxstar
  toplabel \-2\t File : $(quote_TeX('$name')) : \ $(substr('$!date',0,12) + substr('$!date',15,0))

  
pfluxl 01
  if ($?1 == 0) { define 1 ? { select : flux, eng or perc }}
  if ('$1' == 'x') {return}
  if ('$1' != 'flux' && '$1' != 'eng' && '$1' != 'perc') {
    echo select : flux, eng or perc !
    return
  }
  define _iiylog $iylog
  define ifluxl 1
  define iylog 1
  pflux $1
  define ifluxl delete
  define iylog $_iiylog

cf
  cursor _Xcursor _Ycursor
  do i = 0,$(dimen(_Xcursor)-1) {
    define j $(int(_Xcursor[$i]+0.5))
    echo $j $(_ctemp[$j-1])
  }

reac
  echo
  local define print_noheader 1
  data "$!_filerec" lines 16 192
  read '%d %39s' {code_1 reaction_1}
  print 'reaction  [%3d] : %35s\n' {code_1 reaction_1}

reacflx 01
  if(! is_file("$_sfilerec")) {
    echo $_sfilerec not present, use nucstruc
    return
  }
  if ($?1 == 0) { define 1 ? { select : reaction number }}
  if ('$1' == 'x') {return}
  savevar 0  
  iylog 0
  data "$!_filerec" lines 16 192
  read '%d %39s' {code_1 reaction_1}
  set idxreac = 1,$(dimen(code_1))
  set creac = code_1*1.
  sort {creac idxreac}
  data "$!_sfilerec"
  read row _info 1
  define inucshell $(_info[0])
  define netreac $(_info[1])
  define _nr $(idxreac[$1-1]-1)
  data "$!_sfilerec" lines 2 0
  read < _freac $1 >
  set dimen(_end) = $($nshell_$idxstar-$inucshell)
  set _end = _end-81.01553881
  set flxreac_$idxstar = _freac concat _end
  set nn = $idxstar
  define icheckvar 0
  plot flxreac 0 0
  define reacname "$(reaction_1[$_nr])"
  if ($itoplabel == 1) {
    relocate (200 600)
    putlabel 6 \-3\t $reacname
  }
  restorevar 0

shellflx 01
  if(! is_file("$_sfilerec")) {
    echo $_sfilerec not present, use nucstruc
    return
  }
  if ($?1 == 0) { define 1 ? { select : shell number }}
  if ('$1' == 'x') {return}
  savevar 0
  nn 1
  icheck 0
  data "$!_filerec" lines 16 192
  read '%d %39s' {code_1 reaction_1}
  set idxreac = 1,$(dimen(code_1))
  set creac_1 = code_1*1.
  sort {creac_1 idxreac}
  data "$!_sfilerec"
  read row _info 1
  define inucshell $(_info[0])
  define netreac $(_info[1])
  if ($1 > $inucshell) { 
    echo shell number exceeds shell model number
    return
  }
  read row _xtemp $($1+1)
  set flux_1 = _xtemp
  delete _xtemp
  defx creac
  ihisto 1
  plot flux
  restorevar 0
  relocate (200 600)
  putlabel 6 \-3\t $(quote_TeX('shell $shellnuc'))

pnuc
  if ($irecall == 0) { 
    define recall < pnuc>
    define irecall 1 }
  ctype magenta plotabsl enucl
  ctype red plotl enupla
  ctype blue plotl enunucl
  ctype 0 plotabsl enuc

smap 
  #not used (demo)
  data "$!_sfilerec"
  read row _info 1
  define inucshell $(_info[0])
  define netreac $($(_info[1]))
  image($inucshell,$netreac)
  set iy = 0,$($netreac-1)
  set ix = 0,$($inucshell-1)
  do k = 0,$($inucshell-1) {
   define k1 $($k+1)
   read row flx $k1
   set image[$k,iy] = exp(flx)
  }
  #viewpoint 30 40 30
  #erase surface 103 -30 -12 iy iy

nucfilm 2
  do k=$1,$2 {
    nucevol 1 $k
  }

readelem 2
  readi mevol HEADERS 0 0 $2
  define namee_$2 $1
  set t_$2 = 0
  set H1_$2 = 0
  define _file ('$smhome/PROG/REACNUC/$!1')
  data "$!_file"

  lines 1 2
  read {phys 1}
  define T_$2 $(phys[0])
  define rho_$2 $(phys[1])

  lines 3 100000
  define XName <model_$2 1 t_$2 2 n_$2 3 H1_$2 4 H2_$2 5 He3_$2 6 He4_$2 7 \
  Li6_$2 8 Li7_$2 9 Be7_$2 10 B8_$2 11 Be9_$2 12 B10_$2 13 B11_$2 14 \
  C12_$2 15 C13_$2 16 N13_$2 17 C14_$2 18 N14_$2 19 N15_$2 20 O15_$2 21 \
  O16_$2 22 O17_$2 23 O18_$2 24 F18_$2 25 F19_$2 26 F20_$2 27 Ne20_$2 28 \
  Ne21_$2 29 Ne22_$2 30 Na22_$2 31 Ne23_$2 32 Na23_$2 33 Na24_$2 34 \
  Mg24_$2 35 Na25_$2 36 Mg25_$2 37 Mg26_$2 38 Al26m_$2 39 Al26g_$2 40 \
  Mg27_$2 41 Al27_$2 42 Si28_$2 43 Si29_$2 44 Si30_$2 45 P31_$2 46 \
  S32_$2 47 S33_$2 48 S34_$2 49 S35_$2 50 Cl35_$2 51 S36_$2 52 Cl36_$2 53 \
  Cl37_$2 54 heavy_$2 55 >
  read  <$XName>

  set C_$2 = C12_$2+C13_$2+C14_$2
  set N_$2 = N13_$2+N14_$2+N15_$2
  set O_$2 = O15_$2+O16_$2+O17_$2+O18_$2
  set CNO_$2 = C_$2+N_$2+O_$2
  set F_$2 = F18_$2+F19_$2
  set Na_$2 = Na22_$2+Na23_$2
  set Mg_$2 = Mg24_$2+Mg25_$2+Mg26_$2
  set Al_$2 = Al26g_$2+Al26m_$2+Al27_$2
  expand 1.3

  set log_HvsHinit_$2 = lg(H1_$2[0]-H1_$2)


########################
### chemical composition
########################

pchem 01
  ## Arg : shell number or model number (distrib at center)
  if (($evolmode == 0 && '$eformat_$(nn[0])' != 'SN') || ($evolmode == 1 && '$sformat_$(nn[0])' != 'SN')) {
     echo
     echo command only available for SN format
     return
  }
  if ($?1 == 0) { define 1 ? { Arg 1 : shell number }}
  if ('$1' == 'x') {return}
  savevar 0
  define icheckvar 0
  iexpand 0
  define ishmod $1
  if ($ishmod != $ishmod0) {
    xlim 45 230
    ylim -2 3.5
    define itoplabel 2
    if ($evolmode == 0)  {
      echo "file : "$names_$(nn[0]) "shell : "$1
      set _Mr = "Mr_"$(nn[0])
      define _mr $(_Mr[$1])
      define name "$names_$(nn[0])"
      define names_0 $name
      !echo 0 $1 $names_$(nn[0]) | $smprog/chemextract.e -Wl,-T }\
    else { 
      define ixx $(nn[0])
      define name $dir_$(nn[0])"/"$namee_$(nn[0])
      define namee_0 $namee_$(nn[0])
      echo "file : "$name
      !echo 2 $1 "\\'"$name"\\'" | $smprog/chemextract.e -Wl,-T}}\
  else {
    xlim $_xichem $_xschem
    ylim $_yichem $_yschem }
  #set nn = 0
  define _md $(nn[0])
  nstar 1
  defx ka
  define ipoints 1
  expand 1.2
  ptype 9 0  
  ctype 0
  define _file ('$smprog/xsp_sn.dat')
  data "$!_file"
  read {kz 1 ka 2 xnsol 3 xsp 4 orig 5}
  set ks_$_md = ka if (orig == 1)
  set kr_$_md = ka if (orig == 2)
  set kp_$_md = ka if (orig == 3)
  set xs_$_md = xnsol if (orig == 1)
  set xr_$_md = xnsol if (orig == 2)
  set xp_$_md = xnsol if (orig == 3)
  set kz_$_md = kz
  set ka_$_md = ka
  set xsp_$_md = xsp
  set xnsol_$_md = xnsol 
  ixlabel 0
  iylabel 0
  plot xnsol
  ie 0
  ibox 0
  itoplabel 0
  #s-elements
  ctype red
  expand 3
  ptype 6 1
  defx ks
  plot xs
  expand 2.5
  ptype 3 3 
  #r-elements
  ctype blue
  defx kr
  plot xr
  ptype 5 2
  #p-elements
  ctype magenta
  defx kp
  plot xp
  ibox 1
  ie 1
  ixlabel 0
  iylabel 0
  ctype 0
  expand 1.2
  xlabel A
  ylabel log (X/X_\odot)
  if ($itoplabel == 2) {
     define TeX_strings delete
     if ($evolmode == 0)  {
        toplabel \-2\t $name - shell=$1 - Mr=$_mr}\
     else {
        toplabel \-2\t $name - center}
     define TeX_strings 1
  }
  define ishmod0 $ishmod
  define _xichem $xinf
  define _xschem $xsup
  define _yichem $yinf
  define _yschem $ysup
  restorevar 0

Yields 01  
  # Calculate Yields for the selected stars up to a certain point
  if ($evolmode !=1 && $evolmode != 2) {
    echo you must be in evolmode  = 1 or 2
    return
  }  
  foreach j nn {
    define ML $(M_$j[0]-M_$j[$(dimen(M_$j)-1)])
    set cont_$j = 1,$(dimen(YH1_$j))
    set _temp1 = <0> concat M_$j
    set _temp2 = M_$j concat <0>
    set DM_$j = _temp1-_temp2
    set _mask = 0*DM_$j
    set _mask[0] = 1
    set DM_$j = DM_$j if (_mask == 0)
    set DM_$j[$(dimen(DM_$j)-1)] =  DM_$j[$(dimen(DM_$j)-2)]
    define ni $(dimen(M_$j)-1)
    set Yelement = Yabund_$eformat_$j concat < YH YHe YLi YC YN YO YF YNa YMg YAl YCNO >
    define phase_ini $(phase_$j[0])
    foreach el Yelement {
      if ($?1 == 0) {
        set temp = DM_$j*$el""_$j
      } else {
        set temp = DM_$j*$el""_$j if (model_$j <= $1)
      }
      set Eject$el""_$j = $(sum(temp)) # Ejected mass of the element from the star
      set Yields$el""_$j =  $($(Eject$el""_$j)-$ML*$el""_$j[0])
      set YieldsEC$el""_$j = Yields$el""_$j + (M_$j[$ni]-env_Mb_$j[$ni])*($el""_$j[$ni]-$el""_$j[0])
      set EjectEC$el""_$j = Eject$el""_$j+(M_$j[$ni]-env_Mb_$j[$ni])*$el""_$j[$ni]
      if ($phase_ini == 1) { 
        set Yinit$el""_$j = $el""_$j[0]
        set YMini$el""_$j = $($el""_$j[0]*$(M_$j[0]))
      }
    }
  }

pYields 03
  # Print Yields
  if ($?1 == 0) { define 1 ? { select absolute star number }}
  if ('$1' == 'x') {return}
  if ($?3 != 0) {
    define _file ('$3')
    if(is_file("$_file")) {
      echo
      echo $_file already exists
      echo return
      echo
      return
    }
  }
  local define print_noheader 1
  if ($evolmode !=1 && $evolmode != 2) {
    echo you must be in evolmode  = 1 or 2
    return
  }
  set _nn = nn
  nn $1
  Yields $2
  set nn = _nn
  echo "# all numbers are in solar mass - model "$namee_$1 " - lines" 0 $2
  echo "# element   Ejec. mass     Yield      Yield env.  Eject. mass from env."
  set dimen(_arg1) = 0.s
  set dimen(_arg2) = 0
  set dimen(_arg3) = 0
  set dimen(_arg4) = 0
  set dimen(_arg5) = 0
  set dimen(_arg6) = 0
  set dimen(_arg7) = 0
  define phase_ini $(phase_$1[0])
  foreach el Yelement {
    set _arg1 = _arg1 concat '$el'
    set _arg2 = _arg2 concat  Eject$el""_$1
    set _arg3 = _arg3 concat  Yields$el""_$1
    set _arg4 = _arg4 concat  YieldsEC$el""_$1
    set _arg5 = _arg5 concat  EjectEC$el""_$1
    if ($phase_ini == 1 ) {
      set _arg6 = _arg6 concat Yinit$el""_$1
      set _arg7 = _arg7 concat YMini$el""_$1
    }
  }
  if ($?3 == 0 ) {
    print '  %6s    %11.4e  %11.4e  %11.4e   %11.4e \n' { _arg1 _arg2 _arg3 _arg4 _arg5 }
  } else {
    echo generate output : $3
    if ($phase_ini == 1 ) {
      print $_file '  %4s    %11.4e  %11.4e  %11.4e   %11.4e   %11.4e   %11.4e \n' { _arg1 _arg2 _arg3 _arg4 _arg5 _arg6 _arg7}
    } else {
      print $_file '  %4s    %11.4e  %11.4e  %11.4e   %11.4e \n' { _arg1 _arg2 _arg3 _arg4 _arg5 }
    }
  }
  


########################
### abundances
########################

CO 01
  #plot C/O ratio (at the surface or center)
  if ($?1 == 0) { define 1 Y}
  if ($irecall == 0) { 
    define recall < CO >
    define irecall 1 }
  define _iylabel $iylabel
  iylabel 0
  foreach n nn { 
    set YxC = $1""C12_$n/12+$1""C13_$n/13+$1""C14_$n/14
    set YxO = $1""O16_$n/16+$1""O15_$n/15+$1""O17_$n/17+$1""O18_$n/18
    set CO_$n = YxC/YxO
  }
  delete YxC
  delete YxO
  define _checkvar $icheckvar
  define icheckvar 0
  plot CO
  if ($_iylabel == 1) {
    define iylabel $_iylabel
    ylabel C/O
  }
  define icheckvar $_checkvar
  define irecall 0


c1213
  #plot surface C12/C13 ratio
  if ($irecall == 0) { 
    define recall < c1213 >
    define irecall 1 }
  define _iylabel $iylabel
  iylabel 0
  if ($evolmode == 1) {
    foreach n nn {
      set C12C13_$n = YC12_$n/YC13_$n*(13/12)
    }}\
  else {
    foreach n nn {
      set C12C13_$n = PXC12_$n/PXC13_$n*(13/12)
    }
  }
  define _checkvar $icheckvar
  define icheckvar 0
  if ($iylog == 0) {
     plot C12C13 }\
  else {
     plotl C12C13 }
  if ($_iylabel == 1) {
    define iylabel $_iylabel
    if ($iylog == 1) {
      ylabel log ^{12}C/^{13}C }\
    else {
      ylabel ^{12}C/^{13}C }
  }
  define icheckvar $_checkvar
  foreach n nn {
    if	($evolmode == 0 && $?sFeH_$n == 0) {
      echo FeH not defined for star $n
    } else {
      if ($evolmode == 1 || $evolmode == 2 ) {
        if ($FeH_$n < -9 ) { echo      Check star $n: [Fe/H] = $FeH_$n} }\
      else {
        if ($sFeH_$n < -9 ) { echo      Check star $n: [Fe/H] = $sFeH_$n} }
      }
  }
  define irecall 0
  

CFe
  ab C 1 0

NFe
  ab N 1 0

MgAl
  savevar 0
  if ($irecall == 0) { 
    define recall < MgAl >
    define irecall 1 }
  define _iylabel $iylabel
  iylabel 0
  echo add Al26 to Mg
  foreach n nn {
    set	_Mg26_$n = YMg26_$n
    set YMg26_$n = YMg26_$n+YAl26g_$n
  } 
	ab Mg 1 0 1
  foreach n nn {
    set YMg26_$n = _Mg26_$n
    delete _Mg26_$n
  }
  ab Al 1 27 1
  define _checkvar $icheckvar
  define icheckvar 0
  ixlabel 0
  iylabel 0
  defx MgFe
  plot AlFe
  if ($_iylabel == 1) {
    define iylabel $_iylabel
    xlabel [Mg/Fe]
    ylabel [Al/Fe]
  }
  restorevar 0
  define icheckvar $_checkvar
  define irecall 0

ONa
  savevar 99
  if ($irecall == 0) { 
    define recall < ONa >
    define irecall 1 }
  ab O 1 0 1
  ab Na 1 0 1
  define _checkvar $icheckvar
  define icheckvar 0
  define _iylabel $iylabel
  iylabel 0
  ixlabel 0
  defx OFe
  plot NaFe
  if ($_iylabel == 1) {
    define iylabel $_iylabel
    xlabel [O/Fe]
    ylabel [Na/Fe]
  }
  restorevar 99
  define icheckvar $_checkvar
  define irecall 0

CN
  savevar 99
  if ($irecall == 0) { 
    define recall < CN >
    define irecall 1 }
  ab C 1 0 1
  ab N 1 0 1
  define _checkvar $icheckvar
  define icheckvar 0
  define _iylabel $iylabel
  iylabel 0
  ixlabel 0
  defx CFe
  ix 1
  plot NFe
  if ($_iylabel == 1) {
    define iylabel $_iylabel
    xlabel [C/Fe]
    ylabel [N/Fe]
  }
  restorevar 99
  define icheckvar $_checkvar
  define irecall 0

OFe
  ab O 1 0

FCO
  savevar 0
  define _iylabel $iylabel
  iylabel 0
  if ($evolmode == 1) {
    foreach n nn {
      set XYC_$n = YC12_$n/12
      set XYO_$n = YO16_$n/16
      set FO_$n = lg(YF19_$n/(19*XYO_$n))-$Fsol+$Osol
    }
  }\
  else {
    foreach n nn {
      set XYC_$n = PXC12_$n/12
      set XYO_$n = PXO16_$n/16
      set FO_$n = lg(PXF19_$n/(19*PXYO_$n))-$Fsol+$Osol
    }
  }
  foreach n nn {
    set CO_$n = XYC_$n/XYO_$n
  }
  define _checkvar $icheckvar
  define icheckvar 0
  if ($irecall == 0) { 
    define recall < FCO >
    define irecall 1 }
  ixlabel 0
  iylabel 0
  defx CO
  plot FO
  if ($_iylabel == 1) {
    define iylabel $_iylabel
    ylabel [^{19}F/^{12}C]
    xlabel ^{12}C/^{16}O
  }
  restorevar 0
  define icheckvar $_checkvar

Li
  ab Li 2 7

Be
  ab Be 2 9

CMD 01
  #draw color-magnitude diagrams
  if ($?1 == 0) { define 1 ? { (0) your limits, (1) limits estimated : }}
  if ('$1' == 'x') {return}
  savevar 99
  iylabel 0
  ixlabel 0
  ixlog 0
  iylog 0
  icheck 0
  foreach n nn {
    set _lgTeff = lg(Teff_$n)
    set _Mbol = Mbol_$n
    if (_lgTeff <= 3.961) {
       set BV_$n = -3.684*_lgTeff+14.551 }\
    else {
       set BV_$n = 0.344*_lgTeff**2-3.402*_lgTeff+8.037
    }
    set _BC = -8.499*(_lgTeff-4)**4+13.421*(_lgTeff-4)**3-8.131*(_lgTeff-4)**2-3.901*(_lgTeff-4)-0.438
    set V_$n = _Mbol - _BC
  }
  delete _lgTeff
  delete _Mbol
  delete _BC
  hrd 2
  if ($_ixlabel_99 == 1) { xlabel (B-V)}
  if ($_iylabel_99 == 1) { ylabel M_V }
  restorevar 99

pmain 01
  #plot main species define in vector main_elem
  savevar 0
  if ( $evolmode == 0 ) { define 1 PX }
  if ($?1 == 0) { define 1 ? { (X) print central abund, (Y) surface, (PX) profile (if structure mode)}}
  if ( '$1' != 'X' && '$1' != 'Y' && $evolmode == 1 ) {
    echo evolution mode : argument must be X or Y
    return
  }
  if ($irecall == 0) { 
    define recall < pmain >
    define irecall 1 }
  if ($ierase == 1) {erase}
  ie 0
  ictype 0
  lweight $ilweight
  define nelem $(dimen(main_elem)-1)
  set PXplot = '$1'+main_elem
  define extralabel < >
  do kl = 0,$nelem {
    define jline ($kl % $nlines)
    if ($iltype == 1) {ltype $(line_name[$jline])}
    ctype $(color_name[$kl])
    plot $(PXplot[$kl])
    if ($kl == 0 & $iyborne == 0) {
      ixlabel 0
      itoplabel 0
      ibox 0}
    define extralabel ('$extralabel' + '$(main_elem[$kl])' + '=' + '$(color_name[$kl])' + '|')
  }
  echo $extralabel
  restorevar 0

pmainl 01
  define iylog 1
  if ($?1 == 0) {
     if ( $evolmode == 0 ) { define 1 PX }\
     else { define 1 " "}
  }
  if ($irecall == 0) { 
    define recall < pmainl >
    define irecall 1 }
  if ('$1' == 'x') {return}
  pmain $1
  define iylog 0

main 03
  #print the chemical composition by decreasing abundances number
  if ($?1 == 0 ) {
    if ($evolmode == 1 || $evolmode == 2) { define 1 ? {model number}}\
    else { define 1 ? {shell number}}
  }
  if ( $evolmode == 0 && $1 < 0 && $1 > 4500 ) {
    echo "structure mode : argument must be a number ( 0 < shell < 4500)"
    return
  }
  if ('$1' == 'x') {return}
  if ($?2 == 0 ) { define 2 ? {star ABSLUTE number}}
  if ('$2' == 'x') {return}
  if ($?3 == 0 ) {
	  if ( $evolmode == 1 ) {define 3 ? {(X) print central abund, (Y) surface}}\
    else	{ define 3 " " } 
  }
  if ('$3' == 'x') {return}
  define ct " " 
  if ( $evolmode == 0 ) {
    define ish $($1-1)
    if ($(abrad_$2[$ish]) > $(abadd_$2[$ish])) { define ct "c" }\
    else { define ct "r" }
    define _ndim $(dimen(PXabund_$sformat_$2))
    set dimen(_xtmp) = $_ndim
    set dimen(_xname) =  $_ndim.s
    do k = 0,$($_ndim-1) {
      define _PX (PXabund_$sformat_$2[$k])
      set _xname[$k] = (PXabund_$sformat_$2[$k])
      define _x1 $_PX"_"$2
      set _xtmp[$k] = $($_x1"["$1"]")
    }}\
  else {
    define _model $1
    define 1 $($_model-$(model_$2[0])+1)
    define _ndim $(dimen($3"abund_"$eformat_$2))
    set dimen(_xtmp) = $_ndim
    set dimen(_xname) =  $_ndim.s
    do k = 0,$($_ndim-1) {
      define _PX ($3"abund_"$eformat_$2[$k])
      set _xname[$k] = ($3"abund_"$eformat_$2[$k])
      define _x1 $_PX"_"$2
      set _xtmp[$k] = $($_x1"["$1"]")
    }}
  sort < _xtmp _xname >
  if ( $evolmode == 1 || $evolmode == 2 ) { echo   $ichem main elements : model $_model }\
  else { echo   $ichem main elements : shell $1$ct}
  echo "  ============================="
  local define print_noheader 1
  set dimen(_arg1) = 1
  set dimen(_arg2) = 1.s
  do i = $($_ndim-1),$($_ndim-$ichem),-1 {
    set _arg1 = $(_xtmp[$i])
    set _arg2 = '$(_xname[$i])'
    print '%15.5e : %-5s' {_arg1 _arg2}
  }  
  delete _arg1
  delete _arg2

shell 02 
  if ($evolmode == 1 || $evolmode == 2) {return}
  if ($?1 == 0 ) { define 1 ? {shell number}}
  if ('$1' == 'x') {return}
  if ($?2 == 0 ) { define 2 ? {absolute star number} }
  if ('$2' == 'x') {return}
  define ish $($1-1)
  define ct "r"
  if ($(abrad_$2[$ish]) > $(abadd_$2[$ish])) { define ct "c" }
  echo "shell # "$1$ct
  echo   Mr = $(Mr_$2[$ish]), r = $(r_$2[$ish]), u = $(u_$2[$ish]),  Lr = $(Lr_$2[$ish]), 
  echo   T = $(T_$2[$ish]), rho = $(rho_$2[$ish]), P = $(P_$2[$ish]), eta = $(eta_$2[$ish]), cs = $(cs_$2[$ish]) 
  echo   egrav = $(egrav_$2[$ish]), eint = $(eint_$2[$ish]), cp = $(cp_$2[$ish]), beta = $(beta_$2[$ish]) 
  echo   enucl = $(enucl_$2[$ish]), enunucl = $(enunucl_$2[$ish]), enupla = $(enupla_$2[$ish]), enuc = $(enuc_$2[$ish])
  main $1 $2 ""


ab 04
  if ($?1 == 0) { define 1 ? {Arg 1: atom name }
    if ($?2 == 0) { define 2 ? {Arg 2: unit to consider, (1) [X/Fe], (2) esp(X), (3) [X/H] } }
    if ($?3 == 0) { define 3 ? {Arg 3: (0) element or (>0) isotope number to consider} }
  }
  if ($?2 == 0) { define 2 $Abtype }
  if ('$2' == 'x') {return}
  if ($?3 == 0) { define 3 $Abiso }
  if ('$3' == 'x') {return}
  if ($?4 == 0) { define 4 0}
  if ($irecall == 0) { 
    define recall <  ab $1 $2 $3 >
    define irecall 1 }
  define _elem $1
  define _els ($3 == 0 ? <$_elem""sol> : <$_elem""$3""sol>)
  define Absol ($$_els-12)
  echo define Absol ($_els-12) $Alsol
  foreach n nn {
    if ($evolmode == 1) {
      set dimen (Ab_$n) = dimen (model_$n) 
      define _suffix Y }\
    else {
      set dimen (Ab_$n) = dimen (nsh_$n)
      define _suffix PX
    }
    if ($3 == 0) {
      define ielem 0
      do i = 1,37 {
        define _el $_suffix""$_elem""$i
        define ipass 0
        if ($evolmode == 0) {set _plotvar = strucvar_AGB}
        if ($evolmode == 1) {set _plotvar = evolvar_AGB}
        foreach _xxvar _plotvar {
          if ('$_xxvar' == '$_el') { define ipass 1 }
        }
        if ($ipass == 1) {
          define ielem $($ielem+1)
          set Ab_$n = Ab_$n + $_el""_$n/$i
          echo  Star $n: add $_elem""$i
        }
      }
      if ($ielem == 0) { 
        echo element $1 not found
        return
      }
    } else {
      define _el $_suffix""$_elem""$3
      define ipass 0
      if ($evolmode == 0) {set _plotvar = strucvar_AGB}
      if ($evolmode == 1) {set _plotvar = evolvar_AGB}
      foreach _xxvar _plotvar {
        if ('$_xxvar' == '$_el') { define ipass 1 }
      }
      if ($ipass == 0) {
        echo $_suffix""$_elem""$3 not defined - Aborted
        return
      }
      set Ab_$n = $_suffix""$_elem""$3_$n/$3
    }
    define ind ( ($2 == 1) ? '[0]' : ' ' )
    set Ab_$n = lg(Ab_$n/$_suffix"H1_"$n""$ind)
    if ($2 == 1) {
      if ($evolmode == 1 ) {
        set $_elem""Fe_$n = Ab_$n-$Absol-$FeH_$n }\
      else {
        set $_elem""Fe_$n = Ab_$n-$Absol-$sFeH_$n }
    }
    if ($2 == 2) { set eps$_elem""_$n = Ab_$n+12 }
    if ($2 == 3) {
      if ($evolmode == 1 ) {
        set $_elem""Fe_$n = Ab_$n-$Absol }\
      else {
        set $_elem""Fe_$n = Ab_$n-$Absol }
    }
  }
  if ($2 == 1) {
    echo
    foreach n nn {
    if ($evolmode == 1 ) {
      if (abs($FeH_$n) < 9 )  { echo      Check star $n: [Fe/H] = $FeH_$n} }\
    else {
      if (abs($sFeH_$n) < 9 ) { echo      Check star $n: [Fe/H] = $sFeH_$n} }
    }
  }
  
  # In case of no drawing
  if ($4 == 1) {return}

  # Draw curve
  icheck 0
  define _iylabel $iylabel
  iylabel 0
  if ($2 == 1 ) {
    plot $_elem""Fe
    if ($_iylabel == 1) {
      if ($3 == 0) {
        ylabel [$_elem/Fe]
      } else {
        ylabel [^{$3}$_elem/Fe]
      }
    }
  }
  if ($2 == 2 ) {
    plot eps$_elem
    if ($_iylabel == 1) {
      if ($3 == 0) {
        ylabel \varepsilon($_elem)
      } else {
        ylabel \varepsilon(^{$3}$_elem)
      }
    }
  }
  if ($2 == 3 ) {
    plot $_elem""Fe
    if ($_iylabel == 1) {
      if ($3 == 0) {
        ylabel [$_elem/H]
      } else {
        ylabel [^{$3}$_elem/H]
      }
    }
  }
  icheck 1
  define iylabel $_iylabel
  
  
valsol
  # composition solaire (en eps(X))
  # for elements
  define Hsol  12.0
  define Hesol 11.0
  define Lisol 1.10
  define Besol 1.40
  define Bsol  2.7
  define Csol  8.52
  define Nsol  7.92
  define Osol  8.83
  define Fsol  4.48
  define Nesol 8.08
  define Nasol 6.33
  define Mgsol 7.58
  define Alsol 6.47
  define Sisol 7.55
  define Psol  5.45
  define Ssol  7.33
  define CLsol 5.50
  #for isotopes
  define H1sol 12.0
  define H2sol 7.53
  define He3sol 7.13
  define He4sol 10.98
  define Li6sol 2.18
  define Li7sol 3.28
  define Be7sol -40
  define Be9sol 1.47
  define B8sol  -40
  define B10sol 2.18
  define B11sol 2.78
  define C12sol 8.55
  define C13sol 6.59
  define C14sol -40
  define N13sol -40
  define N14sol 7.97
  define N15sol 5.53
  define O15sol -40
  define O16sol 8.87
  define O17sol 5.45
  define O18sol 6.17
  define F18sol -40
  define F19sol 4.48
  define Ne20sol 8.05
  define Ne21sol 5.43
  define Ne22sol 6.91
  define Na22sol -40
  define Na23sol 6.31
  define Mg24sol 7.48
  define Mg25sol 6.58
  define Mg26sol 6.62
  define Al26gsol -40
  define Al26msol -40
  define Al27sol 6.47
  define Si28sol 7.51
  define Si29sol 6.22
  define Si30sol 6.04
  define P31sol  5.57
  define S32sol  7.25
  define S33sol  5.15
  define S34sol  5.89
  define S35sol  -40
  define S36sol  3.57
  define CL35sol 5.15
  define CL36sol -40
  define CL37sol 4.65


#################
## SYSTEM COMMAND
#################

wwww
  set nn = 5,9
  set a = Xabund_AGB[nn]
  print '%7s %7s %7s %7s %7s %7s %7s\n' {a}

palette
  reset_ctype
  colours

nn 121
 set nn = $1
 nstar dimen(nn)

add 1
  foreach n nn {
    if ($n == $1) { return }
  }
  set nn = nn concat $1
  nstar $(dimen(nn))
  
delnn 1
  #delete argument from the INDEX LIST nn
  define k 0
  do i = 0,$(dimen(nn)-1) {
    if ($(nn[$i]) == $1 ) { define k 1 }\
    else { set nn[$i-$k] =  nn[$i] }
  }
  set _nn = nn
  delete nn
  if ($(dimen(_nn)) > $k) {
    set _j = 0,$(dimen(_nn)-$k-1)
    set dimen(nn) = $(dimen(_j))
    set nn = _nn[_j]
  }

addvar 1
  define suff $(($evolmode == 1 || $evolmode == 2) ? 'evol' : 'struc' )
  if ($evolmode == 3) {define suff $('obs')}
  foreach _xxvar $suff""var_AGB {
    if ('$1' == '$_xxvar') {
      #echo '$1' is already a known variable [mode $suff].
      return
    }
  }
  echo '$1' add in known variables [mode $suff].
  set $suff""var_AGB = $suff""var_AGB concat <$1>
	

############
##  NUMERICS
############

smoothvar 3
  define nvar (dimen(var)-1)
  define ii 0
  define ndat ($3-$2-1)
  set var1 = 1,$ndat,1
  set var2 = var1
  do ivar = 1,$nvar {
    if ( (mvar[$ivar]) > $2 && (mvar[$ivar]) <= $3) { 
      set var1[$ii] = var[$ivar]
      define ii ($ii+1) }
  }
  smooth var1 var2 $1
  define ii 0
  do ivar = 1,$nvar {
    if ( ((mvar[$ivar]) > $2 && (mvar[$ivar]) < $3 )) { 
      set var[$ivar] = var2[$ii] 
      define ii ($ii+1) }
  }

mysmooth 2
  #Smooth a given Variable with the Filter_size. Output written in Variables
  foreach n nn {
    smooth $1_$n $1s_$n $2
  }
  addvar $1s

deriv 02
  if ($?1 == 0) { define 1 ? {Arg 1: Y variable (compute dY/dX)}}
  if ('$1' == 'x') {return}
  if ($?2 == 0) { define 2 ? {Arg 2: X variable} }
  if ('$2' == 'x') {return}
  foreach n nn {
    set _yp = $1_$n concat 0
    set _ym = 0 concat $1_$n
    if ('$2' == 't') {
       set _mp = model_$n concat 0
       set _mm = 0 concat model_$n
       set _dmmp = abs(_mp-_mm)
       set _dmmp[$(dimen(_dmmp)-2)] = _dmmp[$(dimen(_dmmp)-3)]
       set _dmmp[$(dimen(_dmmp)-1)] = _dmmp[$(dimen(_dmmp)-2)]
       vecminmax _dmmp min max
       delete _dmmp
       if ($max > 2) { 
         set _xp = $2_$n concat 0         
         set _xm = 0 concat $2_$n
         set _dx = _xp-_xm+1e-10 }\
       else {
         set _dx = dt_$n concat 1} }\
    else {
      set _xp = $2_$n concat 0
      set _xm = 0 concat $2_$n
      set _dx = _xp-_xm
    }
    set _dx[0] = $(_dx[1])
    set _dydx = (_yp-_ym)/_dx
    set _i = 1,$(dimen(_dx)-1)
    set D$1_$n = _dydx[_i]
  }
  addvar D$1  
  delete _xp delete _xm
  delete _yp delete _ym
  delete _dx delete _dydx
  delete _i
  define i delete

integ 04
  if ($?1 == 0) { define 1 ? {Arg 1: Y variable (compute sum(Y dX)) } } 
  if ('$1' == 'x') {return}
  if ($?2 == 0) { define 2 ? {Arg 2: X variable} }
  if ('$2' == 'x') {return}
  #if ($?3 == 0) { define 3 ? {Arg 3: lower integration boundary Xmin} }
  #if ('$3' == 'x') {return}
  #if ($?4 == 0) { define 3 ? {Arg 4: upper integration boundary Xmax} }
  #if ('$4' == 'x') {return}
  foreach n nn {
    set dimen(I$1_$n) = $(dimen($1_$n))
    if ( '$2' == 't') {
      if ($?3) {
        set _dt = ( $2_$n >= $3 ) ? dt_$n : 0 }\
      else {
        set _dt = dt_$n
      }
      set temp = $1_$n*_dt }\
    else {
      set _i=0,$(dimen($2_$n)-1)
      set _x = $2_$n
      if ($?3 !=0 ) {
        set _x = ( $2_$n >= $3 ) ? _x : 0.
        set _imin = _i if ( $2_$n >= $3 )
        define imin $(_imin[0])
      }
      if ($?4 !=0 ) {
        if ($4 <= $3) {
          echo wrong value for arg 3 and 4
          return
        }
        set _x = ( $2_$n <= $4 ) ? _x : 0.
        set _imax = _i if ( $2_$n <= $4 )
        define imax $(_imax[$(dimen(_imax)-1)]+1)
      }
      if ($?3 ==0 && $?4 == 0 ) {
        set _x = $2_$n
      }
      set _xp = _x concat < 0. >
      set _xm = < 0. > concat _x
      set _dx = _xp-_xm
      if ($?imin != 0) {set _dx[$imin] = $($2_$n[$($imin+1)]-$2_$n[$imin])}
      if ($?imax != 0) {set _dx[$imax] = $($2_$n[$($imax+1)]-$2_$n[$imax])}
      set _y = < 0. > concat $1_$n
      set _y = _y*_dx
      set temp = _y[_i]
      delete _xp delete _xm
      delete _dx
      delete _i
    }
    set I$1_$n = cumulate(temp)
  }
  addvar I$1
  delete temp


############################
## PHYSICS
############################

calcMloss 01
  #plot and compute different mass loss rates
  savevar 0
  foreach n nn {
    set mlossR_$n = 3.98E-13*0.5*L_$n*Reff_$n/M_$n
    set mlossB_$n = mlossR_$n*0.1*4.83E-9*L_$n**2.7/$(M_$n[0])**2.1
    set mlossVW_$n = -2.07+1.94*lg(Reff_$n)-0.9*lg(M_$n)
    set mlossVW_$n = 10**(-11.4+0.0123*10**mlossVW_$n)
  } 
  if ($ierase == 1) { erase }
  if ($?1 == 0) {
    define Zscale 1 }\
  else {
    define Zscale $(1./$1)
  }
  ie 0
  ylim -12 0
  icheck 0 iylabel 0 ictype 0
  ylabel \dot{M}  [M_\odot/yr]
  ctype black plotl mlossR $Zscale
  ibox 0 ixlabel 0
  ctype red plotl mlossB $Zscale
  ctype blue plotl mlossVW 
  ibox 1 iylabel 1 ixlabel 1 ictype 1
  icheck 1
  ctype black relocate $xinf -2   label   Reimers (\eta=0.5)
  ctype red   relocate $xinf -2.5 label   Blocker (\eta=0.05)
  ctype blue  relocate $xinf -3   label   Vassiliadis & Wood
  ctype black	
  restorevar 0

dover 01
  #compute overshoot diffusion coefficient
  if ($evolmode == 1) {
    echo only in structure mode
    return
  }
  if ($?1 == 0) { define 1 ? { enter fover} }
  if ('$1' == 'x') {return}
  define ax (dimen(filestruc)-1)
  if ($(dimen(nn)-1) < $(dimen(filestruc)-1)) { define ax $(dimen(nn)-1)}
  do k = 0,$ax {
    define ienv $ienv_$(nn[$k])
    if ($ienv > 0 ) {
      set Dover_$(nn[$k]) = (r_$(nn[$k]) < $(r_$(nn[$k])[$ienv])) ? $(Dconv_$(nn[$k])[$ienv])*exp((r_$(nn[$k])-$(r_$(nn[$k])[$ienv]))/($1*Hp_$(nn[$k])/$rsun)) : 1.e-30
    }
  }
  do k = 0,$ax {
    define icore $icore_$(nn[$k])
    if ($icore > 0 && $(yzi_$(nn[$k])[$($icore-1)]) < -1 ) {
      set Dover_$(nn[$k]) = (r_$(nn[$k]) < $(r_$(nn[$k])[$icore])) ? $(Dconv_$(nn[$k])[$icore])*exp((r_$(nn[$k])-$(r_$(nn[$k])[$icore]))/($1*Hp_$(nn[$k])/$rsun)) : 1.e-30
    }
  }
  addvar Dover

diff 01
  #plot all diffusion coefficients
  if ($?1 == 0) { define 1 ? { enter absolute star number }}
  if ('$1' == 'x') {return}
  savevar 0
  ibox 0
  ixlabel 0
  iylabel 0
  itoplabel 0
  if ($ierase == 1 ) {erase}
  ie 0 define iltype 0
  set nn = $1
  ylim 0 16
  ctype cyan ltype 4 plotl Kt
  ltype 0 ctype magenta plotl Dtot
  ltype 2 ctype red plotl Dcirc
  ltype 1 ctype blue plotl Dshear
  ltype 3 ctype black plotl Dh
  ltype 4 ctype green4 plotl Dconv
  ltype 4 ctype cyan plotl Dmicro
  ltype 0 ctype black
  dconv 1
  box
  xlabel $x  ($unit_x)
  ylabel log(D_{diff})
  if ($_itoplabel_0 == 1) {
      define name $names_$(nn[0])
      toplabel \-2\t File : $(quote_TeX('$name')) : \ $(substr('$!date',0,12) + substr('$!date',15,0))
  }
  restorevar 0
  echo cyan:Kt, black:Dh, blue:Dshear, red:Dcirc, green:Dconv, magenta:Dtot, cyan:Dmicro

calcfluxAM 01
  # 1 : structure number
  # Calculate the flux of angular momentum transported by meridional circulation and by the shear for the selected star
  if ($?1 == 0) { define 1 ? { enter absolute star number }}
  nn $1
  deriv omega r
  # Need *Rsun**4 to be truly normalized (but SM find +infinity)
  set Fluxcirc_$1 = 0.2*rho_$1*(r_$1)**4*omega_$1*Ucirc_$1
  set Fluxshear_$1 = rho_$1*(r_$1)**4*Dshear_$1*Domega_$1/$rsun
  set Fluxtot_$1 = Fluxcirc_$1+Fluxshear_$1
  addvar Fluxcirc
  addvar Fluxshear
  addvar Fluxtot
  
fluxAM 01
  # 1 : structure number
  # Calculate and plot the flux of angular momentum
  if ($?1 == 0) { define 1 ? { enter absolute star number }}
  calcfluxAM $1
  savevar 1  
  define recall <fluxAM $1>
  define irecall 1
  if ($iyborne == 1) {
    echo set vertical limits
    vecminmax Fluxcirc_$1 mincirc maxcirc
    vecminmax Fluxshear_$1 minshear maxshear
    vecminmax Fluxtot_$1 mintot maxtot
    set max = <$maxcirc $maxshear $maxtot >
    set min = <$mincirc $minshear $mintot >
    vecminmax max i max
    vecminmax min min j
    define offset $(($max-$min)*0.06)
    ylim ($min-$offset) ($max+$offset)
  }
  
  ibox 0 ixlabel 0 iylabel 0
  define _ie $ierase
  if ($ierase == 1) {erase}
  ie 0
  ctype red ltype 2 plot Fluxcirc
  ctype blue ltype 1 plot Fluxshear
  ctype black ltype 0 plot Fluxtot
  box
  dconv 1
  xlabel $x  ($unit_x)
  ylabel Flux 
  echo red: Fluxcirc ; blue: Fluxshear ; black: Fluxtot
  ie $_ie
  iy 1
  ibox 1 ixlabel 1 iylabel 1
  define irecall 0
  delete max             delete min
  define maxcirc delete  define mincirc delete
  define maxshear delete define minshear delete
  define maxtot delete   define mintot delete
  define max delete      define min delete
  define offset delete
  
irad
  #plot irradiation
  if ($evolmode != 1) {
    echo command only valid in evolution mode
    return 
  }
  foreach n nn {
    set _irad  = Xn_$n*rhoc_$n*dt_$n*sqrt(Tc_$n)*2.426072766e8
    set irad_$n = cumulate(_irad)
  }
  delete _irad

dMcoredt 01
  #compute the H mean core growth rate for the selected stars
  if ($?1 == 0) { define 1 ? { enter shell boundary : Hburn_M[bmt] }}
  if ('$1' == 'x') {return}
  deriv $1 t
  foreach n nn {
    set rlum  = LHe_$n/LH_$n
    set D$1_$n = ( rlum > 1.e-1 || D$1_$n < 1e-15 || D$1_$n > 1e-4 || phase_$n < 3 ) ? 1e-11 : abs(D$1_$n)
    set _Mmean = D$1_$n if (D$1_$n > 1e-10)
    stats _Mmean mean sigma kurtosis
    echo mean growth rate : $mean
  }


###################
### GENEVA CODE
##################


sm_loadE
  Read evolutionary files from Geneva Stellar Evolutionary Code
  loadE name directory line_start line_end ABSOLUTE_STAR_NUMBER
    ex: loadE "G60z-ESE" G60zm5S0 100 3500 3

sm_loadS 
  Read structures file from Geneva Stellar Evolutionary Code
  loadS name directory ABSOLUTE_STAR_NUMBER
    ex: loadS G60zm5SE.wv0164459 G60zm5SEXT 8

vareG
  echo From GENEVA EVOLUTION CODE
  echo NUCLEAR    :  fluxBe7   fluxB8   snuBe7   snuB8    YtauAl26 XtauAl26
  echo ROTATION   :  omegacrit omegas   omegac   xobla
  echo CNO Abund. :  lcnom     xmcno    scno

varsG
  echo From GENEVA EVOLUTION CODE
  echo ENERGETICS : enuclH    enuclHe  enuclC   enucl3a  enuclCO    enuclONe
  echo CONVECTION : zensi
  echo THERMO     : dkapdP    dkapdT   denucldP denucldT drhodP     drhodT  psi
  echo ROTATION   : Ri        Vcirc    Dh_Zahn


loadS 03
  #Read structure file (*.wv*) 
  if ($?1 == 0) { define 1 ? {Arg 1 : file name} }
  if ('$1' == 'x') {return}
  if ($?2 == 0) { define 2 ? {Arg 2 : directory}}
  if ('$2' == 'x') {return}
  if ($?3 == 0) { define 3 ? {Arg 3 : star index number} }
  if ('$3' == 'x') {return}
  if ($3 <= 0) {
    echo
    echo index must be > 0
    echo file not read $2
    return
  }
  
  define _file ('$smgeneve/$2/$1') 
   if (! is_file("$_file")){
    echo file $_file not found... 
    echo loadS aborded.
    dels $3
    return
  }
  
  readsi initGE $3
  define _file ('$smgeneve/$2/$1') 
  echo "$!_file"
  data "$!_file"

  define Xname < nsh_$3 1 xmr_$3 2 P_$3 3 T_$3 4 r_$3 5 Lr_$3 6 >
  define Xname < $Xname PXH1_$3 7 PXHe4_$3 8 PXC12_$3 9 PXO16_$3 10 >
  define Xname < $Xname enuclH_$3 11 enuclHe_$3 12 enuclC_$3  13 >
  define Xname < $Xname abrad_$3 14 rho_$3 15 zensi_$3 16 enunucl_$3  17 >

  set strucvar_$sformat_$3 = < nsh xmr P T r Lr PXH1 PXHe4 PXC12 PXO16 enuclH enuclHe enuclC abrad rho zensi enunucl >

  define Xname2 < dkapdP_$3 18 dkapdT_$3 19 denucldP_$3 20 denucldT_$3 21 drhodP_$3 22 drhodT_$3 13 psi_$3 24 >
  define Xname2 < $Xname2 enucl3a_$3 25 enuclCO_$3 26 enuclONe_$3 27 egrav_$3 28> 
  define Xname2 < $Xname2 abadd_$3 29 kap_$3 30 beta_$3 31 PXHe3_$3 32 >

  set strucvar_$sformat_$3 = strucvar_$sformat_$3 concat < dkapdP dkapdT denucldP denucldT drhodP drhodT psi enucl3a enuclCO enuclONe egrav abadd kap beta PXHe3 >

  define Xname3 < PXC13_$3 33 PXN14_$3 34 PXN15_$3 35 PXO17_$3 36 >
  define Xname3 < $Xname3 PXO18_$3 37 PXNe20_$3 38 PXNe22_$3 39 PXMg24_$3 40 >
  define Xname3 < $Xname3 PXMg25_$3 41 PXMg26_$3 42 mu_$3 43 >

  set strucvar_$sformat_$3 = strucvar_$sformat_$3 concat < PXC13 PXN14 PXN15 PXO17 PXO18 PXNe20 PXNe22 PXMg24 PXMg25 PXMg26 mu >
  
  define Xname4 < omega_$3 44 abmu_$3 45 Ri_$3 47 Dconv_$3 49 >
  define Xname4 < $Xname4 Dshear_$3 51  Dcirc_$3 52 Mr_$3 53 Kt_$3 56 >
  define Xname4 < $Xname4 Ucirc_$3 57 Vcirc_$3 58 Hp_$3 61 g_$3 62  Dh_$3 64 >
  define Xname4 < $Xname4 Dh_Zahn_$3 65 PXF19_$3 76 PXNe21_$3 77 PXNa23_$3 78 >
  define Xname4 < $Xname4 PXAl26g_$3 79 PXAl27_$3 80 PXSi28_$3 81 >
  define Xname4 < $Xname4 PXC14_$3 82 PXF18_$3 83 PXn_$3 84 >
  
  #define Xname4 < $Xname4 Dh_Zahn_$3 65 PXF19_$3 71 PXNe21_$3 72 PXNa23_$3 73 >
  #define Xname4 < $Xname4 PXAl26g_$3 74 PXAl27_$3 75 PXSi28_$3 76 >
  #define Xname4 < $Xname4 PXC14_$3 77 PXF18_$3 78 PXn_$3 79 >

  set strucvar_$sformat_$3 = strucvar_$sformat_$3 concat < omega abmu Ri Dconv Dshear Dcirc Mr Kt Ucirc Vcirc Hp g Dh Dh_Zahn PXF19 PXNe21 PXNa23 PXAl26g PXAl27 PXSi28 PXC14 PXF18 PXn >

  #echo < $Xname >

  lines 2 0
  read < $Xname >
  read < $Xname2 >
  read < $Xname3 >
  read < $Xname4 >

  set P_$3 = 10**P_$3
  set T_$3 = 10**T_$3
  set r_$3 = 10**r_$3/7E10
  set kap_$3 = 10**kap_$3
  set rho_$3 = 10**rho_$3
  set Dtot_$3 = Dcirc_$3+Dshear_$3
  set enucl_$3 = enuclH_$3+enuclHe_$3+enuclC_$3

  set strucvar_$sformat_$3 = strucvar_$sformat_$3 concat < Dtot enucl >

  define nshell_$3 $(dimen(nsh_$3))
  define Rstar_$3 $(r_$3[0])
  define Mstar_$3 $(Mr_$3[0])
  define Lstar_$3 $(Lr_$3[0])
  define names_$3 $1


loadE 05
  #Read evolutionary files: *.wg and *.asur
  if ($?1 == 0) { define 1 ? { Arg 1 : filename}}
  if ('$1' == 'x') {return}
  if ($?2 == 0) { define 2 ? { Arg 2 : directory}}
  if ('$2' == 'x') {return}
  if ($?3 == 0) { define 3 ? { Arg 3 : first line}}
  if ('$3' == 'x') {return}
  if ($?4 == 0) { define 4 ? { Arg 4 : last line}}
  if ('$4' == 'x') {return}
  if ($?5 == 0) { define 5 ? { Arg 5 : star index number}}
  if ('$5' == 'x') {return}
  if ($5 <= 0) {
    echo
    echo index must be > 0
    echo file not read
    return
  }


  define _file ('$smgeneve/$2/$1.wg')
  if (! is_file("$_file")){
    echo file $_file not found... 
    echo loadE aborded.
    dele $5
    return
  }
  
  readi mevol DATAS -1 -1 $5
  define _file ('$smgeneve/$2/$1.wg')
  data "$!_file"
  lines $3 $4
 
  define Xname < model_$5 1 t_$5 2 M_$5 3 L_$5 4 Teff_$5 5 YH1_$5 6 >
  define Xname < $Xname YHe4_$5 7 YHe3_$5 8 YC12_$5 9 YC13_$5 10 >
  define Xname < $Xname YN14_$5 11 YO16_$5 12 YO17_$5 13 YO18_$5 14 >
  define Xname < $Xname YNe20_$5 15 YNe22_$5 16  convtot_$5 17 mlos_$5 19 >
  define Xname < $Xname rhoc_$5 20 Tc_$5 21 XH1_$5 22 XHe4_$5 23 XHe3_$5 24 >
  define Xname < $Xname XC12_$5 25 XC13_$5 26 XN14_$5 27 XO16_$5 28 >
  define Xname < $Xname XO17_$5 29 XO18_$5 30 XNe20_$5 31 XNe22_$5 32 >

  set evolvar_AGB = < model t M L Teff YH1 YHe4 YHe3 YC12 YC13 YN14 YO16 YO17 YO18 YNe20 YNe22 convtot mlos rhoc Tc XH1 XHe4 XHe3 XC12 XC13 XN14 XO16 XO17 XO18 XNe20 XNe22 >

  define Xname2 < XBe7_$5 33 XB8_$5 34 fluxBe7_$5 35 fluxB8_$5 36 > 
  define Xname2 < $Xname2 snuBe7_$5 37 snuB8_$5 38 >
  define Xname2 < $Xname2 omegacrit_$5 39 omegas_$5 40 omegac_$5 41 >
  define Xname2 < $Xname2 xobla_$5 42 vsurf_$5 43  YtauAl26_$5 44 XtauAl26_$5 45 alpro6_$5 46>
  define Xname2 < $Xname2 lcnom_$5 47 xmcno_$5 48 scno_$5 49 >

  set evolvar_AGB = evolvar_AGB concat < XBe7 XB8 fluxBe7 fluxB8 snuBe7 snuB8 omegacrit omegas omegac xobla vsurf YtauAl26 XtauAl26 alpro6 lcnom xmcno scno >

  define Xname3 < conv1_Mb_$5 50 conv1_Mt_$5 51 conv2_Mb_$5 52 conv2_Mt_$5 53  >
  define Xname3 < $Xname3 conv3_Mb_$5 54 conv3_Mt_$5 55 conv4_Mb_$5 56 conv4_Mt_$5 57  >
  define Xname3 < $Xname3 conv5_Mb_$5 58 conv5_Mt_$5 59 conv6_Mb_$5 60 conv6_Mt_$5 61  >
  define Xname3 < $Xname3 conv7_Mb_$5 62 conv7_Mt_$5 63 conv8_Mb_$5 64 conv8_Mt_$5 65  >
  define Xname3 < $Xname3 conv9_Mb_$5 66 conv9_Mt_$5 67 conv10_Mb_$5 68 conv10_Mt_$5 69  >

  define Xname4 < conv11_Mb_$5 70 conv11_Mt_$5 71 conv12_Mb_$5 72 conv12_Mt_$5 73  >
  define Xname4 < $Xname4 conv13_Mb_$5 74 conv13_Mt_$5 75 conv14_Mb_$5 76 conv14_Mt_$5 77  >
  define Xname4 < $Xname4 conv15_Mb_$5 78 conv15_Mt_$5 79 conv16_Mb_$5 80 conv16_Mt_$5 81  >
  define Xname4 < $Xname4 conv17_Mb_$5 82 conv17_Mt_$5 83 conv18_Mb_$5 84 conv18_Mt_$5 85  >
  define Xname4 < $Xname4 conv19_Mb_$5 86 conv19_Mt_$5 87 conv20_Mb_$5 88 conv20_Mt_$5 89  >

  read < $Xname >
  read < $Xname2 >
  read < $Xname3 >
  read < $Xname4 >

  define dir_$5 $2  
  set mlos_$5 = 10**mlos_$5
  set Teff_$5 = 10**Teff_$5
  set L_$5 = 10**L_$5
  set rhoc_$5 = 10**rhoc_$5
  set Tc_$5 = 10**Tc_$5
  set Zsurf_$5 = 1-YH1_$5-YHe3_$5-YHe4_$5
  set Gamma_$5 = 7.66E-5*0.2*(1+YH1_$5)*L_$5/M_$5
  set R_$5 = vsurf_$5/(omegas_$5*696000)
  set vcrit_$5 = sqrt(2/3*6.673E-20*M_$5*1.989E30/R_$5)
  set Gammaom_$5 = (2/3*vsurf_$5/vcrit_$5)**2
  set rapcrit_$5 = Gammaom_$5+Gamma_$5
  set phase_$5 = 2-2*XH1_$5-XHe4_$5
  
  set evolvar_AGB = evolvar_AGB concat <Gamma rapcrit phase>

  define _file ('$smgeneve/$2/drawconv.in')  
  if (! is_file("$_file")){
    define smallconv 0
    set Mconv_$5 = M_$5
    echo file $_file not found... 
    echo not proceed
  }\
  else {
    define smallconv 1
    data "$!_file"
    lines $3 $4
    define Xname3 < tconv_$5 2 Mconv_$5 3>
    define Xname3 < $Xname3 conv1_Mb_$5 4 conv1_Mt_$5 5 conv2_Mb_$5 6 conv2_Mt_$5 7  >
    define Xname3 < $Xname3 conv3_Mb_$5 8 conv3_Mt_$5 9 conv4_Mb_$5 10 conv4_Mt_$5 11  >
    define Xname3 < $Xname3 conv5_Mb_$5 12 conv5_Mt_$5 13 conv6_Mb_$5 14 conv6_Mt_$5 15  >
    define Xname3 < $Xname3 conv7_Mb_$5 16 conv7_Mt_$5 17 conv8_Mb_$5 18 conv8_Mt_$5 19  >
    define Xname3 < $Xname3 conv9_Mb_$5 20 conv9_Mt_$5 21 conv10_Mb_$5 22 conv10_Mt_$5 23  >

    define Xname4 < conv11_Mb_$5 24 conv11_Mt_$5 25 conv12_Mb_$5 26 conv12_Mt_$5 27  >
    define Xname4 < $Xname4 conv13_Mb_$5 28 conv13_Mt_$5 29 conv14_Mb_$5 30 conv14_Mt_$5 31  >
    define Xname4 < $Xname4 conv15_Mb_$5 32 conv15_Mt_$5 33 conv16_Mb_$5 34 conv16_Mt_$5 35  >
    define Xname4 < $Xname4 conv17_Mb_$5 36 conv17_Mt_$5 37 conv18_Mb_$5 38 conv18_Mt_$5 39  >
    define Xname4 < $Xname4 conv19_Mb_$5 40 conv19_Mt_$5 41 conv20_Mb_$5 42 conv20_Mt_$5 43  >

    read < $Xname3 >
    read < $Xname4 >
  }

  set conv0_Mb_$5 = Mconv_$5
  set conv0_Mt_$5 = Mconv_$5  
  do i = 1,20 {
    if (sum(conv$i""_Mb_$5) != $(dimen(conv$i""_Mb_$5)) ) {
      define ntotconv $i
    }
    set evolvar_AGB = evolvar_AGB concat < conv$i""_Mb conv$i""_Mt >
    set conv$i""_Mb_$5 = conv$i""_Mb_$5*Mconv_$5
    set conv$i""_Mt_$5 = conv$i""_Mt_$5*Mconv_$5
  }  
  it 0
  
  define namee_$5 $1

  define _file ('$smgeneve/$2/$1.asur')  
  if (! is_file("$_file")){
    echo file $_file not found... 
    echo not proceed
  }\
  else {
    data "$!_file"
    lines $3 $4
    define Xname < YNe21_$5 12 YNa23_$5 14 YMg24_$5 15 YMg25_$5 16 YMg26_$5 17 >
    define Xname < $Xname YAl26g_$5 18 YAl27_$5 19 YSi28_$5 20 YF19_$5 21 YN15_$5 22 >
    read < $Xname >
    set evolvar_AGB = evolvar_AGB concat < YNe21 YNa23 YMg24 YMg25 YMg26 YAl26g YAl27 YSi28 YF19 YN15 >
  }

  define _file ('$smgeneve/$2/$1.acen')  
  if (! is_file("$_file")){
    echo file $_file not found... 
    echo not proceed
  }\
  else {
    data "$!_file"
    lines $3 $4
    define Xname < XNe21_$5 12 XNa23_$5 14 XMg24_$5 15 XMg25_$5 16 XMg26_$5 17 >
    define Xname < $Xname XAl26g_$5 18 XAl27_$5 19 XSi28_$5 20 XF19_$5 21 XN15_$5 22 >
    read < $Xname >
    set evolvar_AGB = evolvar_AGB concat < XNe21 XNa23 XMg24 XMg25 XMg26 XAl26g XAl27 XSi28 XF19 XN15 >
  }

  define _file ('$smgeneve/$2/$1.wl')  
  if (! is_file("$_file")){
    echo file $_file not found... 
    echo not proceed
  }\
  else {
    data "$!_file"
    lines $3 $4
    define Xname < eddesc_$5 5 vcrit1_$5 6 vcrit2_$5 7 vequat_$5 8 rpola_$5 9 rpsi_$5 10 requa_$5 11>
    read < $Xname >
    set evolvar_AGB = evolvar_AGB concat < eddesc vcrit1 vcrit2 vequat rpola rpsi requa >
  }

  define _file ('$smgeneve/$2/$1.wm')  
  if (! is_file("$_file")){
    echo file $_file not found... 
    echo not proceed
  }\
  else {
    data "$!_file"
    lines $3 $4
    define Xname < fmlos_$5 2>
    read < $Xname >
    set evolvar_AGB = evolvar_AGB concat <fmlos>
  }

colorGE 02
  if ($?1 == 0) { define 1 ? { enter absolute star number}}
  if ($?2 == 0) { define 2 ? { specify plotted variable ( XY : chemicals, nucl : enuc, T : temperature) } }
  if ('$2' != 'XY' && '$2' != 'nuc' && '$2' != 'T') {
    echo   second argument of color must be "XY" or "nuc" or "T"
    return
  }
  if ($evolmode == 0) {goevol}
  echo star "#" $1 :   $dir_$1"/"$namee_$1
  define ns ($1)
  lweight 0
  if ($itinv == 1 && $itinv_$ns == 0) {dtinv}
  xborne
  if ($ixborne == 1) { 
    define xinf $xinf0
    define xsup $xsup0}\
  else {
    if ($xinf > $xsup0 || $xsup < $xinf0) {
      echo
      echo bad limits : $x must range between [$xinf0 $xsup0]
      #return
    }
  }
  if ($iyborne == 1) {
    defylim $kippen_type 1
    if ($iylog == 1) {
       define yinf -6 }\
    else {
       define yinf 0 }
    define ysup $ysup0}
  if ($ierase == 1) {erase}
  if ($ixinv == 1) {
    limits $xsup $xinf $yinf $ysup}\
  else {
    limits $xinf $xsup $yinf $ysup}
  if ($ibox == 1) {box $iibox}
  if ($ixlabel == 1 && $ixlog == 0) {xlabel $(quote_TeX('$x')) ($unit_x)}
  if ($ixlabel == 1 && $ixlog == 1) {xlabel $(quote_TeX('log $x'))}
  if ($iylabel == 1 && $iylog == 0) {ylabel $(quote_TeX('$kippen_type')) }
  if ($iylabel == 1 && $iylog == 1) {ylabel $(quote_TeX('log $kippen_type')) }
  if ($itoplabel == 1) {
    toplabel \-2\t File : $(quote_TeX('$namee_$1')) : \ $(substr('$!date',0,12) + substr('$!date',15,0))
  }

  define ymin $yinf
  define ymax $ysup

  define xmin $xinf
  define xmax $xsup
  define temp (dimen(($x"_"$1))-1)
  if ($xmax > ($x"_"$1[$temp]) ) {define xmax ($x"_"$1[$temp]) } 

  define t0 $($x"_"$1[0])
  define _istart 1
  data "$!smgeneve/$!dir_$!1/ls-Rv"
  read {mod 1}
  do i = 1,$(dimen(mod)-1) {
    define mod $(mod[$i])
    set nbr = sprintf('%07i',<$mod>)
    define ii $($mod-$(model_$1[0]))
    if ($mod > model_$1[$(dimen(model_$1)-1)]) {return}
    define file "$!smgeneve/$!dir_$!1/$!namee_$!1.v"$(nbr)
    if (is_file("$file")) {
      echo $file is file
      echo Command: miseenformeV.pl "$!namee_$!1.v"$(nbr) $dir_$1 
      !miseenformeV.pl "$!namee_$!1.v"$(nbr) $dir_$1
      loadS "$!namee_$!1.wv"$(nbr) $dir_$1 1
      set Mr_1 = reverse(Mr_1)
      set PXH1_1 = reverse(PXH1_1)
      set PXHe4_1 = reverse(PXHe4_1)
      set PXC12_1 = reverse(PXC12_1)
      set PXO16_1 = reverse(PXO16_1)
      set T_1 = reverse(T_1)
      set nucl_1 = enuclH_1+enuclHe_1+enuclC_1+enucl3a_1+enuclCO_1+enuclONe_1
      set nucl_1 = reverse(enuc_1)
      goevol
      if ($($x"_"$1[$ii])<$xmax && $($x"_"$1[$ii])>$xmin) {
        
        if ($ii < $(dimen(seq_$1))-2) {define xend $($x"_"$1[$ii])}\
        else { define xend $xmax}

        if ('$2' == 'XY') {
          ## for distinct H,He and (C+O)    
          #set xx = ((XYC12_00+XYO16_00) > 1e-5) ? lg(XYC12_00+XYO16_00) : -5
          set xx = (PXC12_1+PXO16_1)
          #set xx = 1+xx/5 
          set r_00 = ((xx)*255)%256
          #set xx = (XYH1_00 > 1e-5) ? lg(XYH1_00) : -5
          set xx = PXH1_1
          #set xx = 1+xx/5 
          set v_00 = ((xx)*255)%256
          #set xx = (XYHe4_00 > 1e-5) ? lg(XYHe4_00) : -5
          set xx = PXHe4_1
          #set xx = 1+xx/5 
          set b_00 = ((xx)*255)%256
          #set r_00 = ((XYC12_00+XYO16_00)*255)%256
          #set v_00 = ((XYH1_00)*255)%256
          #set b_00 = ((XYHe4_00)*255)%256
          ## for distinct H,He,C and O     
          #set r_00 = ((1-XYO16_00)*255)%256
          #set v_00 = ((1-XYC12_00)*255)%256
          #set b_00 = ((1-XYHe4_00)*255)%256
          ## for test
          #set r_00 = ((1-XYC12_00**0.5)*255)%256
          #set v_00 = 0*XYO16_00+255
          #set b_00 = 0*XYO16_00+255 
        }
        if ('$2' == 'nuc') {
          set xx = (nucl_1 > 1) ? lg(nucl_1) : 0
          vecminmax xx min max
          set r_00 = ((xx*0)+100)%256
          set v_00 = ((xx*0)+10)%256
          set b_00 = ((xx/$max)*255)%256
        }
        if ('$2' == 'T') {
          set xx = lg(T_1)
          #set xx = (T_00)
          vecminmax xx  min max
          set r_00 = ((1-xx/$max)*255)%256
          set v_00 = ((xx/$max)*255)%256
          set b_00 = ((xx/$max)*255)%256
        }

        define old_r $(r_00[0])
        define old_v $(v_00[0])
        define old_b $(b_00[0])

        define old_Mr $(Mr_1[0])
        define indmid $ii
        define ymax $(Mr_1[$(dimen(Mr_1)-1)])

        do j = 0,$(dimen(Mr_1)-2) {
          if (Mr_1[$j] >= $ymin && Mr_1[$j] <= $ymax){

            define r $(r_00[$j])
            define v $(v_00[$j])
            define b $(b_00[$j]) 

            if (($old_r != $r || $old_v != $v || $old_b != $b) ||  $j == $(dimen(PXH1_1)-2) || Mr_1[$($j+1)] >= $ymax ) {
              if (Mr_1[$($j+1)] >= $ymax) {define ymax $(M_$1[0])}
              reset_ctype
              add_ctype new $old_r $old_v $old_b 
              ctype new
              define old_r $r
              define old_v $v
              define old_b $b

              set xxx = <$($x"_"$1[$ii]) $xend $xend $($x"_"$1[$ii])>
              set yyy = <$old_Mr $old_Mr $ymax $ymax>
              if ($(Mr_1[$($j-1)])<$ymin) {
                set yyy[0] = $ymin
                set yyy[1] = $ymin
              }

              shade 0 xxx yyy
              define old_Mr $(Mr_1[$j])
              #ctype black dx $($x"_"$1[$ii])
            }
          }
        }
      }
    }    
    ctype black
  }

mywhite
  ctype white
  define i $(nn[0])
  set xxx = $x""_$i
  set temp = reverse(xxx)
  set xxx = xxx concat temp
  set yyy = M_$i[0]+0*M_$i
  set temp = reverse(M_$i)
  set yyy = yyy concat temp
  shade 0 xxx yyy
  ctype black

newvar
  do i = 0,$(dimen(nn)-1) {
    define j $(nn[$i])
    define mcore $(Mr_$j[$icore_$j])    
    define menv $(Mr_$j[$ienv_$j])    
    define renv $(r_$j[$ienv_$j])    
    set Menv_$j = (Mr_$j-$menv)/($(Mr_$j[$(dimen(Mr_$j)-1)])-$menv)
    set renv_$j = (r_$j-$renv)/($(r_$j[$(dimen(Mr_$j)-1)])-$renv)
    set Te_$j = -(T_$j-$(T_$j[$(dimen(Mr_$j)-1)]))/($(T_$j[$(dimen(Mr_$j)-1)])-$(T_$j[$ienv_$j]))
    if ($menv != $mcore) { set deltamr_$j = (Mr_$j - $mcore)/($menv - $mcore) }
    echo mcore = $mcore - menv = $menv
  }
  set Te_$j[$(dimen(Mr_$j)-1)] = Te_$j[$(dimen(Mr_$j)-2)] 
  echo defined : Menv renv Te
  
calcLHe
  do i = 0,$(dimen(nn)-1) {
    define j $(nn[$i])
    set _enuc = (PXH1_$j < 1.d-3 && PXHe4_$j > 0.1) ? enucl_$j : 0.
    set lhe=_enuc*dm_$j
    define sum 0
    do 3=0,DIMEN(lhe)-1 {
      DEFINE sum ( $sum + lhe[$3] )
    }
    echo LHe = $sum Lsun - star "#" $j
  }

